{
  "version": 3,
  "sources": ["../../../../../node_modules/tone/build/esm/version.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-extended-exponential-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-extended-linear-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-set-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-set-value-curve-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-target-value-at-time.js", "../../../../../node_modules/automation-events/build/es2019/guards/exponential-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/guards/linear-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/guards/any-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/guards/set-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/guards/set-value-curve-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-value-of-automation-event-at-index-at-time.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-end-time-and-value-of-previous-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/guards/cancel-and-hold-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/guards/cancel-scheduled-values-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-event-time.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-exponential-ramp-value-at-time.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-linear-ramp-value-at-time.js", "../../../../../node_modules/automation-events/build/es2019/functions/interpolate-value.js", "../../../../../node_modules/automation-events/build/es2019/functions/get-value-curve-value-at-time.js", "../../../../../node_modules/automation-events/build/es2019/guards/set-target-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/classes/automation-event-list.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-cancel-and-hold-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-cancel-scheduled-values-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-exponential-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-linear-ramp-to-value-automation-event.js", "../../../../../node_modules/automation-events/build/es2019/functions/create-set-target-automation-event.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/abort-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/globals.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/constants.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/gain-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js", "../../../../../node_modules/standardized-audio-context/build/es2019/read-only-map.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/guards/delay-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/render-automation.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/window.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js", "../../../../../node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js", "../../../../../node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js", "../../../../../node_modules/standardized-audio-context/build/es2019/module.js", "../../../../../node_modules/tone/build/esm/core/util/Debug.js", "../../../../../node_modules/tone/build/esm/core/util/TypeCheck.js", "../../../../../node_modules/tone/build/esm/core/context/AudioContext.js", "../../../../../node_modules/tone/build/esm/core/clock/Ticker.js", "../../../../../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js", "../../../../../node_modules/tone/build/esm/core/util/Defaults.js", "../../../../../node_modules/tone/build/esm/core/Tone.js", "../../../../../node_modules/tone/build/esm/core/util/Math.js", "../../../../../node_modules/tone/build/esm/core/util/Timeline.js", "../../../../../node_modules/tone/build/esm/core/context/ContextInitialization.js", "../../../../../node_modules/tone/build/esm/core/util/Emitter.js", "../../../../../node_modules/tone/build/esm/core/context/BaseContext.js", "../../../../../node_modules/tone/build/esm/core/context/Context.js", "../../../../../node_modules/tone/build/esm/core/context/DummyContext.js", "../../../../../node_modules/tone/build/esm/core/util/Interface.js", "../../../../../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js", "../../../../../node_modules/tone/build/esm/core/context/OfflineContext.js", "../../../../../node_modules/tone/build/esm/core/Global.js", "../../../../../node_modules/tone/build/esm/core/type/Conversions.js", "../../../../../node_modules/tone/build/esm/core/type/TimeBase.js", "../../../../../node_modules/tone/build/esm/core/type/Time.js", "../../../../../node_modules/tone/build/esm/core/type/Frequency.js", "../../../../../node_modules/tone/build/esm/core/type/TransportTime.js", "../../../../../node_modules/tone/build/esm/core/context/ToneWithContext.js", "../../../../../node_modules/tone/build/esm/core/util/StateTimeline.js", "../../../../../node_modules/tone/build/esm/core/context/Param.js", "../../../../../node_modules/tone/build/esm/core/context/ToneAudioNode.js", "../../../../../node_modules/tone/build/esm/core/context/Gain.js", "../../../../../node_modules/tone/build/esm/source/OneShotSource.js", "../../../../../node_modules/tone/build/esm/signal/ToneConstantSource.js", "../../../../../node_modules/tone/build/esm/signal/Signal.js", "../../../../../node_modules/tone/build/esm/core/clock/TickParam.js", "../../../../../node_modules/tone/build/esm/core/clock/TickSignal.js", "../../../../../node_modules/tone/build/esm/core/clock/TickSource.js", "../../../../../node_modules/tone/build/esm/core/clock/Clock.js", "../../../../../node_modules/tone/build/esm/core/context/Delay.js", "../../../../../node_modules/tone/build/esm/component/channel/Volume.js", "../../../../../node_modules/tone/build/esm/core/context/Destination.js", "../../../../../node_modules/tone/build/esm/core/context/Listener.js", "../../../../../node_modules/tone/build/esm/core/context/Offline.js", "../../../../../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js", "../../../../../node_modules/tone/build/esm/core/type/Midi.js", "../../../../../node_modules/tone/build/esm/core/type/Ticks.js", "../../../../../node_modules/tone/build/esm/core/util/Draw.js", "../../../../../node_modules/tone/build/esm/core/util/IntervalTimeline.js", "../../../../../node_modules/tone/build/esm/core/type/Units.js", "../../../../../node_modules/tone/build/esm/core/util/TimelineValue.js", "../../../../../node_modules/tone/build/esm/signal/SignalOperator.js", "../../../../../node_modules/tone/build/esm/signal/WaveShaper.js", "../../../../../node_modules/tone/build/esm/signal/Pow.js", "../../../../../node_modules/tone/build/esm/core/clock/TransportEvent.js", "../../../../../node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js", "../../../../../node_modules/tone/build/esm/core/clock/Transport.js", "../../../../../node_modules/tone/build/esm/source/Source.js", "../../../../../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js", "../../../../../node_modules/tone/build/esm/source/Noise.js", "../../../../../node_modules/tone/build/esm/source/UserMedia.js", "../../../../../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js", "../../../../../node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js", "../../../../../node_modules/tone/build/esm/source/oscillator/Oscillator.js", "../../../../../node_modules/tone/build/esm/signal/AudioToGain.js", "../../../../../node_modules/tone/build/esm/signal/Multiply.js", "../../../../../node_modules/tone/build/esm/source/oscillator/AMOscillator.js", "../../../../../node_modules/tone/build/esm/source/oscillator/FMOscillator.js", "../../../../../node_modules/tone/build/esm/source/oscillator/PulseOscillator.js", "../../../../../node_modules/tone/build/esm/source/oscillator/FatOscillator.js", "../../../../../node_modules/tone/build/esm/source/oscillator/PWMOscillator.js", "../../../../../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js", "../../../../../node_modules/tone/build/esm/signal/Add.js", "../../../../../node_modules/tone/build/esm/signal/Scale.js", "../../../../../node_modules/tone/build/esm/signal/Zero.js", "../../../../../node_modules/tone/build/esm/source/oscillator/LFO.js", "../../../../../node_modules/tone/build/esm/core/util/Decorator.js", "../../../../../node_modules/tone/build/esm/source/buffer/Player.js", "../../../../../node_modules/tone/build/esm/source/buffer/Players.js", "../../../../../node_modules/tone/build/esm/source/buffer/GrainPlayer.js", "../../../../../node_modules/tone/build/esm/signal/Abs.js", "../../../../../node_modules/tone/build/esm/signal/GainToAudio.js", "../../../../../node_modules/tone/build/esm/signal/Negate.js", "../../../../../node_modules/tone/build/esm/signal/Subtract.js", "../../../../../node_modules/tone/build/esm/signal/GreaterThanZero.js", "../../../../../node_modules/tone/build/esm/signal/GreaterThan.js", "../../../../../node_modules/tone/build/esm/signal/ScaleExp.js", "../../../../../node_modules/tone/build/esm/signal/SyncedSignal.js", "../../../../../node_modules/tone/build/esm/component/envelope/Envelope.js", "../../../../../node_modules/tone/build/esm/instrument/Instrument.js", "../../../../../node_modules/tone/build/esm/instrument/Monophonic.js", "../../../../../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js", "../../../../../node_modules/tone/build/esm/instrument/Synth.js", "../../../../../node_modules/tone/build/esm/instrument/ModulationSynth.js", "../../../../../node_modules/tone/build/esm/instrument/AMSynth.js", "../../../../../node_modules/tone/build/esm/component/filter/BiquadFilter.js", "../../../../../node_modules/tone/build/esm/component/filter/Filter.js", "../../../../../node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js", "../../../../../node_modules/tone/build/esm/instrument/MonoSynth.js", "../../../../../node_modules/tone/build/esm/instrument/DuoSynth.js", "../../../../../node_modules/tone/build/esm/instrument/FMSynth.js", "../../../../../node_modules/tone/build/esm/instrument/MetalSynth.js", "../../../../../node_modules/tone/build/esm/instrument/MembraneSynth.js", "../../../../../node_modules/tone/build/esm/instrument/NoiseSynth.js", "../../../../../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js", "../../../../../node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js", "../../../../../node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js", "../../../../../node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js", "../../../../../node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js", "../../../../../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js", "../../../../../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js", "../../../../../node_modules/tone/build/esm/component/filter/OnePoleFilter.js", "../../../../../node_modules/tone/build/esm/component/filter/LowpassCombFilter.js", "../../../../../node_modules/tone/build/esm/instrument/PluckSynth.js", "../../../../../node_modules/tone/build/esm/instrument/PolySynth.js", "../../../../../node_modules/tone/build/esm/instrument/Sampler.js", "../../../../../node_modules/tone/build/esm/event/ToneEvent.js", "../../../../../node_modules/tone/build/esm/event/Loop.js", "../../../../../node_modules/tone/build/esm/event/Part.js", "../../../../../node_modules/tone/build/esm/event/PatternGenerator.js", "../../../../../node_modules/tone/build/esm/event/Pattern.js", "../../../../../node_modules/tone/build/esm/event/Sequence.js", "../../../../../node_modules/tone/build/esm/component/channel/CrossFade.js", "../../../../../node_modules/tone/build/esm/effect/Effect.js", "../../../../../node_modules/tone/build/esm/effect/LFOEffect.js", "../../../../../node_modules/tone/build/esm/effect/AutoFilter.js", "../../../../../node_modules/tone/build/esm/component/channel/Panner.js", "../../../../../node_modules/tone/build/esm/effect/AutoPanner.js", "../../../../../node_modules/tone/build/esm/component/analysis/Follower.js", "../../../../../node_modules/tone/build/esm/effect/AutoWah.js", "../../../../../node_modules/tone/build/esm/effect/BitCrusher.worklet.js", "../../../../../node_modules/tone/build/esm/effect/BitCrusher.js", "../../../../../node_modules/tone/build/esm/effect/Chebyshev.js", "../../../../../node_modules/tone/build/esm/component/channel/Split.js", "../../../../../node_modules/tone/build/esm/component/channel/Merge.js", "../../../../../node_modules/tone/build/esm/effect/StereoEffect.js", "../../../../../node_modules/tone/build/esm/effect/StereoFeedbackEffect.js", "../../../../../node_modules/tone/build/esm/effect/Chorus.js", "../../../../../node_modules/tone/build/esm/effect/Distortion.js", "../../../../../node_modules/tone/build/esm/effect/FeedbackEffect.js", "../../../../../node_modules/tone/build/esm/effect/FeedbackDelay.js", "../../../../../node_modules/tone/build/esm/component/filter/PhaseShiftAllpass.js", "../../../../../node_modules/tone/build/esm/effect/FrequencyShifter.js", "../../../../../node_modules/tone/build/esm/effect/Freeverb.js", "../../../../../node_modules/tone/build/esm/effect/JCReverb.js", "../../../../../node_modules/tone/build/esm/effect/StereoXFeedbackEffect.js", "../../../../../node_modules/tone/build/esm/effect/PingPongDelay.js", "../../../../../node_modules/tone/build/esm/effect/PitchShift.js", "../../../../../node_modules/tone/build/esm/effect/Phaser.js", "../../../../../node_modules/tone/build/esm/effect/Reverb.js", "../../../../../node_modules/tone/build/esm/component/channel/MidSideSplit.js", "../../../../../node_modules/tone/build/esm/component/channel/MidSideMerge.js", "../../../../../node_modules/tone/build/esm/effect/MidSideEffect.js", "../../../../../node_modules/tone/build/esm/effect/StereoWidener.js", "../../../../../node_modules/tone/build/esm/effect/Tremolo.js", "../../../../../node_modules/tone/build/esm/effect/Vibrato.js", "../../../../../node_modules/tone/build/esm/component/analysis/Analyser.js", "../../../../../node_modules/tone/build/esm/component/analysis/MeterBase.js", "../../../../../node_modules/tone/build/esm/component/analysis/Meter.js", "../../../../../node_modules/tone/build/esm/component/analysis/FFT.js", "../../../../../node_modules/tone/build/esm/component/analysis/DCMeter.js", "../../../../../node_modules/tone/build/esm/component/analysis/Waveform.js", "../../../../../node_modules/tone/build/esm/component/channel/Solo.js", "../../../../../node_modules/tone/build/esm/component/channel/PanVol.js", "../../../../../node_modules/tone/build/esm/component/channel/Channel.js", "../../../../../node_modules/tone/build/esm/component/channel/Mono.js", "../../../../../node_modules/tone/build/esm/component/channel/MultibandSplit.js", "../../../../../node_modules/tone/build/esm/component/channel/Panner3D.js", "../../../../../node_modules/tone/build/esm/component/channel/Recorder.js", "../../../../../node_modules/tone/build/esm/component/dynamics/Compressor.js", "../../../../../node_modules/tone/build/esm/component/dynamics/Gate.js", "../../../../../node_modules/tone/build/esm/component/dynamics/Limiter.js", "../../../../../node_modules/tone/build/esm/component/dynamics/MidSideCompressor.js", "../../../../../node_modules/tone/build/esm/component/dynamics/MultibandCompressor.js", "../../../../../node_modules/tone/build/esm/component/filter/EQ3.js", "../../../../../node_modules/tone/build/esm/component/filter/Convolver.js", "../../../../../node_modules/tone/build/esm/index.js"],
  "sourcesContent": ["export const version = \"15.1.2\";\n", "export const createExtendedExponentialRampToValueAutomationEvent = (value, endTime, insertTime) => {\n  return {\n    endTime,\n    insertTime,\n    type: 'exponentialRampToValue',\n    value\n  };\n};\n", "export const createExtendedLinearRampToValueAutomationEvent = (value, endTime, insertTime) => {\n  return {\n    endTime,\n    insertTime,\n    type: 'linearRampToValue',\n    value\n  };\n};\n", "export const createSetValueAutomationEvent = (value, startTime) => {\n  return {\n    startTime,\n    type: 'setValue',\n    value\n  };\n};\n", "export const createSetValueCurveAutomationEvent = (values, startTime, duration) => {\n  return {\n    duration,\n    startTime,\n    type: 'setValueCurve',\n    values\n  };\n};\n", "export const getTargetValueAtTime = (time, valueAtStartTime, {\n  startTime,\n  target,\n  timeConstant\n}) => {\n  return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n};\n", "export const isExponentialRampToValueAutomationEvent = automationEvent => {\n  return automationEvent.type === 'exponentialRampToValue';\n};\n", "export const isLinearRampToValueAutomationEvent = automationEvent => {\n  return automationEvent.type === 'linearRampToValue';\n};\n", "import { isExponentialRampToValueAutomationEvent } from './exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from './linear-ramp-to-value-automation-event';\nexport const isAnyRampToValueAutomationEvent = automationEvent => {\n  return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n};\n", "export const isSetValueAutomationEvent = automationEvent => {\n  return automationEvent.type === 'setValue';\n};\n", "export const isSetValueCurveAutomationEvent = automationEvent => {\n  return automationEvent.type === 'setValueCurve';\n};\n", "import { getTargetValueAtTime } from '../functions/get-target-value-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nexport const getValueOfAutomationEventAtIndexAtTime = (automationEvents, index, time, defaultValue) => {\n  const automationEvent = automationEvents[index];\n  return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n};\n", "import { getValueOfAutomationEventAtIndexAtTime } from '../functions/get-value-of-automation-event-at-index-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nexport const getEndTimeAndValueOfPreviousAutomationEvent = (automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) => {\n  return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];\n};\n", "export const isCancelAndHoldAutomationEvent = automationEvent => {\n  return automationEvent.type === 'cancelAndHold';\n};\n", "export const isCancelScheduledValuesAutomationEvent = automationEvent => {\n  return automationEvent.type === 'cancelScheduledValues';\n};\n", "import { isCancelAndHoldAutomationEvent } from '../guards/cancel-and-hold-automation-event';\nimport { isCancelScheduledValuesAutomationEvent } from '../guards/cancel-scheduled-values-automation-event';\nimport { isExponentialRampToValueAutomationEvent } from '../guards/exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from '../guards/linear-ramp-to-value-automation-event';\nexport const getEventTime = automationEvent => {\n  if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n    return automationEvent.cancelTime;\n  }\n  if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n    return automationEvent.endTime;\n  }\n  return automationEvent.startTime;\n};\n", "export const getExponentialRampValueAtTime = (time, startTime, valueAtStartTime, {\n  endTime,\n  value\n}) => {\n  if (valueAtStartTime === value) {\n    return value;\n  }\n  if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {\n    return valueAtStartTime * (value / valueAtStartTime) ** ((time - startTime) / (endTime - startTime));\n  }\n  return 0;\n};\n", "export const getLinearRampValueAtTime = (time, startTime, valueAtStartTime, {\n  endTime,\n  value\n}) => {\n  return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);\n};\n", "export const interpolateValue = (values, theoreticIndex) => {\n  const lowerIndex = Math.floor(theoreticIndex);\n  const upperIndex = Math.ceil(theoreticIndex);\n  if (lowerIndex === upperIndex) {\n    return values[lowerIndex];\n  }\n  return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n};\n", "import { interpolateValue } from './interpolate-value';\nexport const getValueCurveValueAtTime = (time, {\n  duration,\n  startTime,\n  values\n}) => {\n  const theoreticIndex = (time - startTime) / duration * (values.length - 1);\n  return interpolateValue(values, theoreticIndex);\n};\n", "export const isSetTargetAutomationEvent = automationEvent => {\n  return automationEvent.type === 'setTarget';\n};\n", "import { createExtendedExponentialRampToValueAutomationEvent } from '../functions/create-extended-exponential-ramp-to-value-automation-event';\nimport { createExtendedLinearRampToValueAutomationEvent } from '../functions/create-extended-linear-ramp-to-value-automation-event';\nimport { createSetValueAutomationEvent } from '../functions/create-set-value-automation-event';\nimport { createSetValueCurveAutomationEvent } from '../functions/create-set-value-curve-automation-event';\nimport { getEndTimeAndValueOfPreviousAutomationEvent } from '../functions/get-end-time-and-value-of-previous-automation-event';\nimport { getEventTime } from '../functions/get-event-time';\nimport { getExponentialRampValueAtTime } from '../functions/get-exponential-ramp-value-at-time';\nimport { getLinearRampValueAtTime } from '../functions/get-linear-ramp-value-at-time';\nimport { getTargetValueAtTime } from '../functions/get-target-value-at-time';\nimport { getValueCurveValueAtTime } from '../functions/get-value-curve-value-at-time';\nimport { getValueOfAutomationEventAtIndexAtTime } from '../functions/get-value-of-automation-event-at-index-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isCancelAndHoldAutomationEvent } from '../guards/cancel-and-hold-automation-event';\nimport { isCancelScheduledValuesAutomationEvent } from '../guards/cancel-scheduled-values-automation-event';\nimport { isExponentialRampToValueAutomationEvent } from '../guards/exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from '../guards/linear-ramp-to-value-automation-event';\nimport { isSetTargetAutomationEvent } from '../guards/set-target-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nexport class AutomationEventList {\n  constructor(defaultValue) {\n    this._automationEvents = [];\n    this._currenTime = 0;\n    this._defaultValue = defaultValue;\n  }\n  [Symbol.iterator]() {\n    return this._automationEvents[Symbol.iterator]();\n  }\n  add(automationEvent) {\n    const eventTime = getEventTime(automationEvent);\n    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n      const index = this._automationEvents.findIndex(currentAutomationEvent => {\n        if (isCancelScheduledValuesAutomationEvent(automationEvent) && isSetValueCurveAutomationEvent(currentAutomationEvent)) {\n          return currentAutomationEvent.startTime + currentAutomationEvent.duration >= eventTime;\n        }\n        return getEventTime(currentAutomationEvent) >= eventTime;\n      });\n      const removedAutomationEvent = this._automationEvents[index];\n      if (index !== -1) {\n        this._automationEvents = this._automationEvents.slice(0, index);\n      }\n      if (isCancelAndHoldAutomationEvent(automationEvent)) {\n        const lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n        if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n          if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n            throw new Error('The internal list is malformed.');\n          }\n          const startTime = lastAutomationEvent === undefined ? removedAutomationEvent.insertTime : isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);\n          const startValue = lastAutomationEvent === undefined ? this._defaultValue : isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;\n          const value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n          const truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n          this._automationEvents.push(truncatedAutomationEvent);\n        }\n        if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n          this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n        }\n        if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n          const duration = eventTime - lastAutomationEvent.startTime;\n          const ratio = (lastAutomationEvent.values.length - 1) / lastAutomationEvent.duration;\n          const length = Math.max(2, 1 + Math.ceil(duration * ratio));\n          const fraction = duration / (length - 1) * ratio;\n          const values = lastAutomationEvent.values.slice(0, length);\n          if (fraction < 1) {\n            for (let i = 1; i < length; i += 1) {\n              const factor = fraction * i % 1;\n              values[i] = lastAutomationEvent.values[i - 1] * (1 - factor) + lastAutomationEvent.values[i] * factor;\n            }\n          }\n          this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(values, lastAutomationEvent.startTime, duration);\n        }\n      }\n    } else {\n      const index = this._automationEvents.findIndex(currentAutomationEvent => getEventTime(currentAutomationEvent) > eventTime);\n      const previousAutomationEvent = index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[index - 1];\n      if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n        return false;\n      }\n      const persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;\n      if (index === -1) {\n        this._automationEvents.push(persistentAutomationEvent);\n      } else {\n        if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[index])) {\n          return false;\n        }\n        this._automationEvents.splice(index, 0, persistentAutomationEvent);\n      }\n    }\n    return true;\n  }\n  flush(time) {\n    const index = this._automationEvents.findIndex(currentAutomationEvent => getEventTime(currentAutomationEvent) > time);\n    if (index > 1) {\n      const remainingAutomationEvents = this._automationEvents.slice(index - 1);\n      const firstRemainingAutomationEvent = remainingAutomationEvents[0];\n      if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n        remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n      }\n      this._automationEvents = remainingAutomationEvents;\n    }\n  }\n  getValue(time) {\n    if (this._automationEvents.length === 0) {\n      return this._defaultValue;\n    }\n    const indexOfNextEvent = this._automationEvents.findIndex(automationEvent => getEventTime(automationEvent) > time);\n    const nextAutomationEvent = this._automationEvents[indexOfNextEvent];\n    const indexOfCurrentEvent = (indexOfNextEvent === -1 ? this._automationEvents.length : indexOfNextEvent) - 1;\n    const currentAutomationEvent = this._automationEvents[indexOfCurrentEvent];\n    if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {\n      return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, indexOfCurrentEvent - 1, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n    }\n    if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n      return currentAutomationEvent.value;\n    }\n    if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n      if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n        return getValueCurveValueAtTime(time, currentAutomationEvent);\n      }\n      return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n    }\n    if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n      return currentAutomationEvent.value;\n    }\n    if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n      const [startTime, value] = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue);\n      return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n    }\n    if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n      const [startTime, value] = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue);\n      return getLinearRampValueAtTime(time, startTime, value, nextAutomationEvent);\n    }\n    return this._defaultValue;\n  }\n}\n", "export const createCancelAndHoldAutomationEvent = cancelTime => {\n  return {\n    cancelTime,\n    type: 'cancelAndHold'\n  };\n};\n", "export const createCancelScheduledValuesAutomationEvent = cancelTime => {\n  return {\n    cancelTime,\n    type: 'cancelScheduledValues'\n  };\n};\n", "export const createExponentialRampToValueAutomationEvent = (value, endTime) => {\n  return {\n    endTime,\n    type: 'exponentialRampToValue',\n    value\n  };\n};\n", "export const createLinearRampToValueAutomationEvent = (value, endTime) => {\n  return {\n    endTime,\n    type: 'linearRampToValue',\n    value\n  };\n};\n", "export const createSetTargetAutomationEvent = (target, startTime, timeConstant) => {\n  return {\n    startTime,\n    target,\n    timeConstant,\n    type: 'setTarget'\n  };\n};\n", "export const createAbortError = () => new DOMException('', 'AbortError');\n", "export const createAddActiveInputConnectionToAudioNode = insertElementInSet => {\n  return (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs[input], [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n  };\n};\n", "export const createAddAudioNodeConnections = audioNodeConnectionsStore => {\n  return (audioNode, audioNodeRenderer, nativeAudioNode) => {\n    const activeInputs = [];\n    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n      activeInputs.push(new Set());\n    }\n    audioNodeConnectionsStore.set(audioNode, {\n      activeInputs,\n      outputs: new Set(),\n      passiveInputs: new WeakMap(),\n      renderer: audioNodeRenderer\n    });\n  };\n};\n", "export const createAddAudioParamConnections = audioParamConnectionsStore => {\n  return (audioParam, audioParamRenderer) => {\n    audioParamConnectionsStore.set(audioParam, {\n      activeInputs: new Set(),\n      passiveInputs: new WeakMap(),\n      renderer: audioParamRenderer\n    });\n  };\n};\n", "export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const EVENT_LISTENERS = new WeakMap();\nexport const CYCLE_COUNTERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\n", "const handler = {\n  construct() {\n    return handler;\n  }\n};\nexport const isConstructible = constructible => {\n  try {\n    const proxy = new Proxy(constructible, handler);\n    new proxy(); // tslint:disable-line:no-unused-expression\n  } catch {\n    return false;\n  }\n  return true;\n};\n", "/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n  const importStatements = [];\n  let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  while (result !== null) {\n    const unresolvedUrl = result[1].slice(1, -1);\n    const importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n", "import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = parameterDescriptors => {\n  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n  }\n};\nconst verifyProcessorCtor = processorCtor => {\n  if (!isConstructible(processorCtor)) {\n    throw new TypeError('The given value for processorCtor should be a constructor.');\n  }\n  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n    throw new TypeError('The given value for processorCtor should have a prototype.');\n  }\n};\nexport const createAddAudioWorkletModule = (cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window) => {\n  let index = 0;\n  return (context, moduleURL, options = {\n    credentials: 'omit'\n  }) => {\n    const resolvedRequestsOfContext = resolvedRequests.get(context);\n    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n      return Promise.resolve();\n    }\n    const ongoingRequestsOfContext = ongoingRequests.get(context);\n    if (ongoingRequestsOfContext !== undefined) {\n      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n      if (promiseOfOngoingRequest !== undefined) {\n        return promiseOfOngoingRequest;\n      }\n    }\n    const nativeContext = getNativeContext(context);\n    // Bug #59: Safari does not implement the audioWorklet property.\n    const promise = nativeContext.audioWorklet === undefined ? fetchSource(moduleURL).then(([source, absoluteUrl]) => {\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * ${ importStatements };\n       * ((a, b) => {\n       *     (a[b] = a[b] || [ ]).push(\n       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n       *             ${ sourceWithoutImportStatements }\n       *         }\n       *     );\n       * })(window, '_AWGS');\n       * ```\n       */\n      // tslint:disable-next-line:max-line-length\n      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n      // @todo Evaluating the given source code is a possible security problem.\n      return evaluateSource(wrappedSource);\n    }).then(() => {\n      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n      if (evaluateAudioWorkletGlobalScope === undefined) {\n        // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n        throw new SyntaxError();\n      }\n      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {\n        if (name.trim() === '') {\n          throw createNotSupportedError();\n        }\n        const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n        if (nodeNameToProcessorConstructorMap !== undefined) {\n          if (nodeNameToProcessorConstructorMap.has(name)) {\n            throw createNotSupportedError();\n          }\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          nodeNameToProcessorConstructorMap.set(name, processorCtor);\n        } else {\n          verifyProcessorCtor(processorCtor);\n          verifyParameterDescriptors(processorCtor.parameterDescriptors);\n          NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n        }\n      }, nativeContext.sampleRate, undefined, undefined));\n    }) : Promise.all([fetchSource(moduleURL), Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {\n      const currentIndex = index + 1;\n      index = currentIndex;\n      const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n      /*\n       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n       *\n       * This is the unminified version of the code used below.\n       *\n       * ```js\n       * class extends AudioWorkletProcessor {\n       *\n       *     __buffers = new WeakSet();\n       *\n       *     constructor () {\n       *         super();\n       *\n       *         this.port.postMessage = ((postMessage) => {\n       *             return (message, transferables) => {\n       *                 const filteredTransferables = (transferables)\n       *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))\n       *                     : transferables;\n       *\n       *                 return postMessage.call(this.port, message, filteredTransferables);\n       *              };\n       *         })(this.port.postMessage);\n       *     }\n       * }\n       * ```\n       */\n      const patchedAudioWorkletProcessor = isSupportingPostMessage ? 'AudioWorkletProcessor' : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';\n      /*\n       * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.\n       *\n       * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n       *\n       * Bug #190: Safari doesn't throw an error when loading an unparsable module.\n       *\n       * This is the unminified version of the code used below:\n       *\n       * ```js\n       * `${ importStatements };\n       * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }\n       * })(\n       *     ${ patchedAudioWorkletProcessor },\n       *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {\n       *\n       *         __collectBuffers = (array) => {\n       *             array.forEach((element) => this.__buffers.add(element.buffer));\n       *         };\n       *\n       *         process (inputs, outputs, parameters) {\n       *             inputs.forEach(this.__collectBuffers);\n       *             outputs.forEach(this.__collectBuffers);\n       *             this.__collectBuffers(Object.values(parameters));\n       *\n       *             return super.process(\n       *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n       *                 outputs,\n       *                 parameters\n       *             );\n       *         }\n       *\n       *     })\n       * );\n       *\n       * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{\n       *\n       *     process () {\n       *         return false;\n       *     }\n       *\n       * })`\n       * ```\n       */\n      const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';\n      const bufferRegistration = isSupportingPostMessage ? '' : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';\n      const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}\n})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;\n      const blob = new Blob([wrappedSource], {\n        type: 'application/javascript; charset=utf-8'\n      });\n      const url = URL.createObjectURL(blob);\n      return nativeContext.audioWorklet.addModule(url, options).then(() => {\n        if (isNativeOfflineAudioContext(nativeContext)) {\n          return nativeContext;\n        }\n        // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n        const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);\n        return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(() => backupOfflineAudioContext);\n      }).then(nativeContextOrBackupOfflineAudioContext => {\n        if (nativeAudioWorkletNodeConstructor === null) {\n          throw new SyntaxError();\n        }\n        try {\n          // Bug #190: Safari doesn't throw an error when loading an unparsable module.\n          new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression\n        } catch {\n          throw new SyntaxError();\n        }\n      }).finally(() => URL.revokeObjectURL(url));\n    });\n    if (ongoingRequestsOfContext === undefined) {\n      ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n    } else {\n      ongoingRequestsOfContext.set(moduleURL, promise);\n    }\n    promise.then(() => {\n      const updatedResolvedRequestsOfContext = resolvedRequests.get(context);\n      if (updatedResolvedRequestsOfContext === undefined) {\n        resolvedRequests.set(context, new Set([moduleURL]));\n      } else {\n        updatedResolvedRequestsOfContext.add(moduleURL);\n      }\n    }).finally(() => {\n      const updatedOngoingRequestsOfContext = ongoingRequests.get(context);\n      if (updatedOngoingRequestsOfContext !== undefined) {\n        updatedOngoingRequestsOfContext.delete(moduleURL);\n      }\n    });\n    return promise;\n  };\n};\n", "export const getValueForKey = (map, key) => {\n  const value = map.get(key);\n  if (value === undefined) {\n    throw new Error('A value with the given key could not be found.');\n  }\n  return value;\n};\n", "export const pickElementFromSet = (set, predicate) => {\n  const matchingElements = Array.from(set).filter(predicate);\n  if (matchingElements.length > 1) {\n    throw Error('More than one element was found.');\n  }\n  if (matchingElements.length === 0) {\n    throw Error('No element was found.');\n  }\n  const [matchingElement] = matchingElements;\n  set.delete(matchingElement);\n  return matchingElement;\n};\n", "import { getValueForKey } from './get-value-for-key';\nimport { pickElementFromSet } from './pick-element-from-set';\nexport const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input);\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n  return matchingConnection;\n};\n", "import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = audioNode => {\n  return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = audioNode => {\n  if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is already stored.');\n  }\n  ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(true));\n};\n", "export const isAudioWorkletNode = audioNode => {\n  return 'port' in audioNode;\n};\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToPassive = audioNode => {\n  if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n    throw new Error('The AudioNode is not stored.');\n  }\n  ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n  getEventListenersOfAudioNode(audioNode).forEach(eventListener => eventListener(false));\n};\n", "import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n  if (!isAudioWorkletNode(audioNode) && activeInputs.every(connections => connections.size === 0)) {\n    setInternalStateToPassive(audioNode);\n  }\n};\n", "import { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nexport const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) => {\n  const tailTimeTimeoutIds = new WeakMap();\n  return (source, destination, output, input, isOffline) => {\n    const {\n      activeInputs,\n      passiveInputs\n    } = getAudioNodeConnections(destination);\n    const {\n      outputs\n    } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = isActive => {\n      const nativeDestinationAudioNode = getNativeAudioNode(destination);\n      const nativeSourceAudioNode = getNativeAudioNode(source);\n      if (isActive) {\n        const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n        if (!isOffline && !isPartOfACycle(source)) {\n          connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n        }\n        if (isPassiveAudioNode(destination)) {\n          setInternalStateToActive(destination);\n        }\n      } else {\n        const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n        addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n        if (!isOffline && !isPartOfACycle(source)) {\n          disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n        }\n        const tailTime = getAudioNodeTailTime(destination);\n        if (tailTime === 0) {\n          if (isActiveAudioNode(destination)) {\n            setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n          }\n        } else {\n          const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n          if (tailTimeTimeoutId !== undefined) {\n            clearTimeout(tailTimeTimeoutId);\n          }\n          tailTimeTimeoutIds.set(destination, setTimeout(() => {\n            if (isActiveAudioNode(destination)) {\n              setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n            }\n          }, tailTime * 1000));\n        }\n      }\n    };\n    if (insertElementInSet(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n      eventListeners.add(eventListener);\n      if (isActiveAudioNode(source)) {\n        addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n      } else {\n        addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n      }\n      return true;\n    }\n    return false;\n  };\n};\n", "export const createAddPassiveInputConnectionToAudioNode = insertElementInSet => {\n  return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n      passiveInputs.set(source, new Set([[output, input, eventListener]]));\n    } else {\n      insertElementInSet(passiveInputConnections, [output, input, eventListener], passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);\n    }\n  };\n};\n", "export const createAddSilentConnection = createNativeGainNode => {\n  return (nativeContext, nativeAudioScheduledSourceNode) => {\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);\n    const disconnect = () => {\n      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);\n      nativeAudioScheduledSourceNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);\n  };\n};\n", "export const createAddUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {\n  return (nativeContext, audioWorkletNode) => {\n    getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class AnalyserNode extends audionNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n      this._nativeAnalyserNode = nativeAnalyserNode;\n    }\n    get fftSize() {\n      return this._nativeAnalyserNode.fftSize;\n    }\n    set fftSize(value) {\n      this._nativeAnalyserNode.fftSize = value;\n    }\n    get frequencyBinCount() {\n      return this._nativeAnalyserNode.frequencyBinCount;\n    }\n    get maxDecibels() {\n      return this._nativeAnalyserNode.maxDecibels;\n    }\n    set maxDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n      this._nativeAnalyserNode.maxDecibels = value;\n      if (!(value > this._nativeAnalyserNode.minDecibels)) {\n        this._nativeAnalyserNode.maxDecibels = maxDecibels;\n        throw createIndexSizeError();\n      }\n    }\n    get minDecibels() {\n      return this._nativeAnalyserNode.minDecibels;\n    }\n    set minDecibels(value) {\n      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n      const minDecibels = this._nativeAnalyserNode.minDecibels;\n      this._nativeAnalyserNode.minDecibels = value;\n      if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n        this._nativeAnalyserNode.minDecibels = minDecibels;\n        throw createIndexSizeError();\n      }\n    }\n    get smoothingTimeConstant() {\n      return this._nativeAnalyserNode.smoothingTimeConstant;\n    }\n    set smoothingTimeConstant(value) {\n      this._nativeAnalyserNode.smoothingTimeConstant = value;\n    }\n    getByteFrequencyData(array) {\n      this._nativeAnalyserNode.getByteFrequencyData(array);\n    }\n    getByteTimeDomainData(array) {\n      this._nativeAnalyserNode.getByteTimeDomainData(array);\n    }\n    getFloatFrequencyData(array) {\n      this._nativeAnalyserNode.getFloatFrequencyData(array);\n    }\n    getFloatTimeDomainData(array) {\n      this._nativeAnalyserNode.getFloatTimeDomainData(array);\n    }\n  };\n};\n", "export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n  return nativeAudioNode.context === nativeContext;\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAnalyserNodes = new WeakMap();\n    const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAnalyserNode = getNativeAudioNode(proxy);\n      // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n      if (!nativeAnalyserNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAnalyserNode.channelCount,\n          channelCountMode: nativeAnalyserNode.channelCountMode,\n          channelInterpretation: nativeAnalyserNode.channelInterpretation,\n          fftSize: nativeAnalyserNode.fftSize,\n          maxDecibels: nativeAnalyserNode.maxDecibels,\n          minDecibels: nativeAnalyserNode.minDecibels,\n          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n        };\n        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n      return nativeAnalyserNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n        return createAnalyserNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = nativeAudioBuffer => {\n  try {\n    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n  } catch {\n    return false;\n  }\n  return true;\n};\n", "export const createIndexSizeError = () => new DOMException('', 'IndexSizeError');\n", "import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = audioBuffer => {\n  audioBuffer.getChannelData = (getChannelData => {\n    return channel => {\n      try {\n        return getChannelData.call(audioBuffer, channel);\n      } catch (err) {\n        if (err.code === 12) {\n          throw createIndexSizeError();\n        }\n        throw err;\n      }\n    };\n  })(audioBuffer.getChannelData);\n};\n", "import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  let nativeOfflineAudioContext = null;\n  return class AudioBuffer {\n    constructor(options) {\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n      // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      }\n      // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n      return audioBuffer;\n    }\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n    }\n  };\n};\n", "export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = audioNode => ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  loop: false,\n  loopEnd: 0,\n  loopStart: 0,\n  playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class AudioBufferSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;\n      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n      this._isBufferNullified = false;\n      this._isBufferSet = mergedOptions.buffer !== null;\n      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n      this._onended = null;\n      // Bug #73: Safari does not export the correct values for maxValue and minValue.\n      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n      return this._nativeAudioBufferSourceNode.buffer;\n    }\n    set buffer(value) {\n      this._nativeAudioBufferSourceNode.buffer = value;\n      // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n      if (value !== null) {\n        if (this._isBufferSet) {\n          throw createInvalidStateError();\n        }\n        this._isBufferSet = true;\n      }\n    }\n    get loop() {\n      return this._nativeAudioBufferSourceNode.loop;\n    }\n    set loop(value) {\n      this._nativeAudioBufferSourceNode.loop = value;\n    }\n    get loopEnd() {\n      return this._nativeAudioBufferSourceNode.loopEnd;\n    }\n    set loopEnd(value) {\n      this._nativeAudioBufferSourceNode.loopEnd = value;\n    }\n    get loopStart() {\n      return this._nativeAudioBufferSourceNode.loopStart;\n    }\n    set loopStart(value) {\n      this._nativeAudioBufferSourceNode.loopStart = value;\n    }\n    get onended() {\n      return this._onended;\n    }\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioBufferSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n    get playbackRate() {\n      return this._playbackRate;\n    }\n    start(when = 0, offset = 0, duration) {\n      this._nativeAudioBufferSourceNode.start(when, offset, duration);\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n      }\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n        const resetInternalStateToPassive = () => {\n          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n    stop(when = 0) {\n      this._nativeAudioBufferSourceNode.stop(when);\n      if (this._audioBufferSourceNodeRenderer !== null) {\n        this._audioBufferSourceNodeRenderer.stop = when;\n      }\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioBufferSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeAudioBufferSourceNode.buffer,\n          channelCount: nativeAudioBufferSourceNode.channelCount,\n          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n          // Bug #149: Safari does not yet support the detune AudioParam.\n          loop: nativeAudioBufferSourceNode.loop,\n          loopEnd: nativeAudioBufferSourceNode.loopEnd,\n          loopStart: nativeAudioBufferSourceNode.loopStart,\n          playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n        };\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeAudioBufferSourceNode.start(...start);\n        }\n        if (stop !== null) {\n          nativeAudioBufferSourceNode.stop(stop);\n        }\n      }\n      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n      } else {\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n      return nativeAudioBufferSourceNode;\n    };\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const isAudioBufferSourceNode = audioNode => {\n  return 'playbackRate' in audioNode;\n};\n", "export const isBiquadFilterNode = audioNode => {\n  return 'frequency' in audioNode && 'gain' in audioNode;\n};\n", "export const isConstantSourceNode = audioNode => {\n  return 'offset' in audioNode;\n};\n", "export const isGainNode = audioNode => {\n  return !('frequency' in audioNode) && 'gain' in audioNode;\n};\n", "export const isOscillatorNode = audioNode => {\n  return 'detune' in audioNode && 'frequency' in audioNode && !('gain' in audioNode);\n};\n", "export const isStereoPannerNode = audioNode => {\n  return 'pan' in audioNode;\n};\n", "import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = audioNode => {\n  return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};\n", "import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioParamConnections = audioParam => {\n  return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};\n", "import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {\n  const {\n    activeInputs\n  } = getAudioNodeConnections(audioNode);\n  activeInputs.forEach(connections => connections.forEach(([source]) => {\n    if (!trace.includes(audioNode)) {\n      deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n    }\n  }));\n  const audioParams = isAudioBufferSourceNode(audioNode) ? [\n  // Bug #149: Safari does not yet support the detune AudioParam.\n  audioNode.playbackRate] : isAudioWorkletNode(audioNode) ? Array.from(audioNode.parameters.values()) : isBiquadFilterNode(audioNode) ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain] : isConstantSourceNode(audioNode) ? [audioNode.offset] : isGainNode(audioNode) ? [audioNode.gain] : isOscillatorNode(audioNode) ? [audioNode.detune, audioNode.frequency] : isStereoPannerNode(audioNode) ? [audioNode.pan] : [];\n  for (const audioParam of audioParams) {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    if (audioParamConnections !== undefined) {\n      audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n    }\n  }\n  if (isActiveAudioNode(audioNode)) {\n    setInternalStateToPassive(audioNode);\n  }\n};\n", "import { deactivateActiveAudioNodeInputConnections } from './deactivate-active-audio-node-input-connections';\nexport const deactivateAudioGraph = context => {\n  deactivateActiveAudioNodeInputConnections(context.destination, []);\n};\n", "export const isValidLatencyHint = latencyHint => {\n  return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');\n};\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n  return class AudioContext extends baseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n      let nativeAudioContext;\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n      // Bug #131 Safari returns null when there are four other AudioContexts running already.\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      }\n      // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      }\n      // Bug #150 Safari does not support setting the sampleRate.\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext;\n      // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        this._nativeGainNode = nativeAudioContext.createGain();\n        this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        this._nativeGainNode.gain.value = 1e-37;\n        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n        this._nativeOscillatorNode.start();\n      } else {\n        this._nativeGainNode = null;\n        this._nativeOscillatorNode = null;\n      }\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n    get baseLatency() {\n      return this._baseLatency;\n    }\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      }\n      // Bug #34: If the state was set to suspended before it should be revoked now.\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n      return this._nativeAudioContext.close().then(() => {\n        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n          this._nativeOscillatorNode.stop();\n          this._nativeGainNode.disconnect();\n          this._nativeOscillatorNode.disconnect();\n        }\n        deactivateAudioGraph(this);\n      });\n    }\n    createMediaElementSource(mediaElement) {\n      return new mediaElementAudioSourceNodeConstructor(this, {\n        mediaElement\n      });\n    }\n    createMediaStreamDestination() {\n      return new mediaStreamAudioDestinationNodeConstructor(this);\n    }\n    createMediaStreamSource(mediaStream) {\n      return new mediaStreamAudioSourceNodeConstructor(this, {\n        mediaStream\n      });\n    }\n    createMediaStreamTrackSource(mediaStreamTrack) {\n      return new mediaStreamTrackAudioSourceNodeConstructor(this, {\n        mediaStreamTrack\n      });\n    }\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n  };\n};\n", "export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n  return class AudioDestinationNode extends audioNodeConstructor {\n    constructor(context, channelCount) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;\n      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n      this._isNodeOfNativeOfflineAudioContext = isOffline;\n      this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n    }\n    get channelCount() {\n      return this._nativeAudioDestinationNode.channelCount;\n    }\n    set channelCount(value) {\n      // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n      // Bug #54: Firefox does throw an IndexSizeError.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      }\n      // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n      if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n        throw createIndexSizeError();\n      }\n      this._nativeAudioDestinationNode.channelCount = value;\n    }\n    get channelCountMode() {\n      return this._nativeAudioDestinationNode.channelCountMode;\n    }\n    set channelCountMode(value) {\n      // Bug #53: No browser does throw an exception yet.\n      if (this._isNodeOfNativeOfflineAudioContext) {\n        throw createInvalidStateError();\n      }\n      this._nativeAudioDestinationNode.channelCountMode = value;\n    }\n    get maxChannelCount() {\n      return this._nativeAudioDestinationNode.maxChannelCount;\n    }\n  };\n};\n", "export const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {\n  const renderedNativeAudioDestinationNodes = new WeakMap();\n  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n    renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n    return nativeAudioDestinationNode;\n  };\n  return {\n    render(proxy, nativeOfflineAudioContext) {\n      const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n      if (renderedNativeAudioDestinationNode !== undefined) {\n        return Promise.resolve(renderedNativeAudioDestinationNode);\n      }\n      return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n    }\n  };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) => {\n  return (context, nativeContext) => {\n    const nativeListener = nativeContext.listener;\n    // Bug #117: Only Chrome & Edge support the new interface already.\n    const createFakeAudioParams = () => {\n      const buffer = new Float32Array(1);\n      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: 9\n      });\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      let isScriptProcessorNodeCreated = false;\n      let lastOrientation = [0, 0, -1, 0, 1, 0];\n      let lastPosition = [0, 0, 0];\n      const createScriptProcessorNode = () => {\n        if (isScriptProcessorNodeCreated) {\n          return;\n        }\n        isScriptProcessorNodeCreated = true;\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({\n          inputBuffer\n        }) => {\n          const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2), getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n          if (orientation.some((value, index) => value !== lastOrientation[index])) {\n            nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n            lastOrientation = orientation;\n          }\n          const positon = [getFirstSample(inputBuffer, buffer, 6), getFirstSample(inputBuffer, buffer, 7), getFirstSample(inputBuffer, buffer, 8)];\n          if (positon.some((value, index) => value !== lastPosition[index])) {\n            nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n            lastPosition = positon;\n          }\n        };\n        channelMergerNode.connect(scriptProcessorNode);\n      };\n      const createSetOrientation = index => value => {\n        if (value !== lastOrientation[index]) {\n          lastOrientation[index] = value;\n          nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n      };\n      const createSetPosition = index => value => {\n        if (value !== lastPosition[index]) {\n          lastPosition[index] = value;\n          nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n      };\n      const createFakeAudioParam = (input, initialValue, setValue) => {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: initialValue\n        });\n        constantSourceNode.connect(channelMergerNode, 0, input);\n        // @todo This should be stopped when the context is closed.\n        constantSourceNode.start();\n        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n          get() {\n            return initialValue;\n          }\n        });\n        /*\n         * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n         * minValue for GainNodes.\n         */\n        const audioParam = createAudioParam({\n          context\n        }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        overwriteAccessors(audioParam, 'value', get => () => get.call(audioParam), set => value => {\n          try {\n            set.call(audioParam, value);\n          } catch (err) {\n            if (err.code !== 9) {\n              throw err;\n            }\n          }\n          createScriptProcessorNode();\n          if (isOffline) {\n            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n            setValue(value);\n          }\n        });\n        audioParam.cancelAndHoldAtTime = (cancelAndHoldAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = cancelAndHoldAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.cancelAndHoldAtTime);\n        audioParam.cancelScheduledValues = (cancelScheduledValues => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = cancelScheduledValues.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.cancelScheduledValues);\n        audioParam.exponentialRampToValueAtTime = (exponentialRampToValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = exponentialRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.exponentialRampToValueAtTime);\n        audioParam.linearRampToValueAtTime = (linearRampToValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = linearRampToValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.linearRampToValueAtTime);\n        audioParam.setTargetAtTime = (setTargetAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = setTargetAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setTargetAtTime);\n        audioParam.setValueAtTime = (setValueAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = setValueAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setValueAtTime);\n        audioParam.setValueCurveAtTime = (setValueCurveAtTime => {\n          if (isOffline) {\n            return () => {\n              throw createNotSupportedError();\n            };\n          }\n          return (...args) => {\n            const value = setValueCurveAtTime.apply(audioParam, args);\n            createScriptProcessorNode();\n            return value;\n          };\n        })(audioParam.setValueCurveAtTime);\n        return audioParam;\n      };\n      return {\n        forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n        forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n        forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n        positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n        positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n        positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n        upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n        upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n        upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n      };\n    };\n    const {\n      forwardX,\n      forwardY,\n      forwardZ,\n      positionX,\n      positionY,\n      positionZ,\n      upX,\n      upY,\n      upZ\n    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n    return {\n      get forwardX() {\n        return forwardX;\n      },\n      get forwardY() {\n        return forwardY;\n      },\n      get forwardZ() {\n        return forwardZ;\n      },\n      get positionX() {\n        return positionX;\n      },\n      get positionY() {\n        return positionY;\n      },\n      get positionZ() {\n        return positionZ;\n      },\n      get upX() {\n        return upX;\n      },\n      get upY() {\n        return upY;\n      },\n      get upZ() {\n        return upZ;\n      }\n    };\n  };\n};\n", "export const isAudioNode = audioNodeOrAudioParam => {\n  return 'context' in audioNodeOrAudioParam;\n};\n", "import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = outputConnection => {\n  return isAudioNode(outputConnection[0]);\n};\n", "export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n  for (const lmnt of set) {\n    if (predicate(lmnt)) {\n      if (ignoreDuplicates) {\n        return false;\n      }\n      throw Error('The set contains at least one similar element.');\n    }\n  }\n  set.add(element);\n  return true;\n};\n", "import { insertElementInSet } from './insert-element-in-set';\nexport const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n  insertElementInSet(activeInputs, [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n", "import { insertElementInSet } from './insert-element-in-set';\nexport const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n  const passiveInputConnections = passiveInputs.get(source);\n  if (passiveInputConnections === undefined) {\n    passiveInputs.set(source, new Set([[output, eventListener]]));\n  } else {\n    insertElementInSet(passiveInputConnections, [output, eventListener], passiveInputConnection => passiveInputConnection[0] === output, ignoreDuplicates);\n  }\n};\n", "export const isNativeAudioNodeFaker = nativeAudioNodeOrNativeAudioNodeFaker => {\n  return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n    return [fakeNativeDestinationAudioNode, output, 0];\n  }\n  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n  return [nativeDestinationAudioNode, output, input];\n};\n", "export const deleteActiveInputConnection = (activeInputConnections, source, output) => {\n  for (const activeInputConnection of activeInputConnections) {\n    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n      activeInputConnections.delete(activeInputConnection);\n      return activeInputConnection;\n    }\n  }\n  return null;\n};\n", "import { pickElementFromSet } from './pick-element-from-set';\nexport const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n  return pickElementFromSet(activeInputs, activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n", "import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n  const eventListeners = getEventListenersOfAudioNode(audioNode);\n  if (!eventListeners.delete(eventListener)) {\n    throw new Error('Missing the expected event listener.');\n  }\n};\n", "import { getValueForKey } from './get-value-for-key';\nimport { pickElementFromSet } from './pick-element-from-set';\nexport const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n  const passiveInputConnections = getValueForKey(passiveInputs, source);\n  const matchingConnection = pickElementFromSet(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output);\n  if (passiveInputConnections.size === 0) {\n    passiveInputs.delete(source);\n  }\n  return matchingConnection;\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n  if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n  } else {\n    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n  }\n};\n", "import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = audioNode => {\n  return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n", "import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = audioParam => {\n  return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n", "import { CYCLE_COUNTERS } from '../globals';\nexport const isPartOfACycle = audioNode => {\n  return CYCLE_COUNTERS.has(audioNode);\n};\n", "import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = audioNode => {\n  return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n", "export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {\n  return new Promise(resolve => {\n    /*\n     * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n     * constructor for an AudioWorkletNode can be used here to skip the test.\n     */\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      resolve(true);\n    } else {\n      const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n      const dummy = nativeAudioContext.createGain();\n      // Bug #95: Safari does not play one sample buffers.\n      const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n      const channelData = ones.getChannelData(0);\n      channelData[0] = 1;\n      channelData[1] = 1;\n      const source = nativeAudioContext.createBufferSource();\n      source.buffer = ones;\n      source.loop = true;\n      source.connect(analyzer).connect(nativeAudioContext.destination);\n      source.connect(dummy);\n      source.disconnect(dummy);\n      // tslint:disable-next-line:deprecation\n      analyzer.onaudioprocess = event => {\n        const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n        if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n        source.stop();\n        analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n        source.disconnect(analyzer);\n        analyzer.disconnect(nativeAudioContext.destination);\n      };\n      source.start();\n    }\n  });\n};\n", "export const visitEachAudioNodeOnce = (cycles, visitor) => {\n  const counts = new Map();\n  for (const cycle of cycles) {\n    for (const audioNode of cycle) {\n      const count = counts.get(audioNode);\n      counts.set(audioNode, count === undefined ? 1 : count + 1);\n    }\n  }\n  counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n", "export const isNativeAudioNode = nativeAudioNodeOrAudioParam => {\n  return 'context' in nativeAudioNodeOrAudioParam;\n};\n", "import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = nativeAudioNode => {\n  const connections = new Map();\n  nativeAudioNode.connect = (connect => {\n    // tslint:disable-next-line:invalid-void no-inferrable-types\n    return (destination, output = 0, input = 0) => {\n      const returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output);\n      // Save the new connection only if the calls to connect above didn't throw an error.\n      const connectionsToDestination = connections.get(destination);\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input,\n          output\n        }]);\n      } else {\n        if (connectionsToDestination.every(connection => connection.input !== input || connection.output !== output)) {\n          connectionsToDestination.push({\n            input,\n            output\n          });\n        }\n      }\n      return returnValue;\n    };\n  })(nativeAudioNode.connect.bind(nativeAudioNode));\n  nativeAudioNode.disconnect = (disconnect => {\n    return (destinationOrOutput, output, input) => {\n      disconnect.apply(nativeAudioNode);\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        for (const [destination, connectionsToDestination] of connections) {\n          const filteredConnections = connectionsToDestination.filter(connection => connection.output !== destinationOrOutput);\n          if (filteredConnections.length === 0) {\n            connections.delete(destination);\n          } else {\n            connections.set(destination, filteredConnections);\n          }\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections.delete(destinationOrOutput);\n        } else {\n          const connectionsToDestination = connections.get(destinationOrOutput);\n          if (connectionsToDestination !== undefined) {\n            const filteredConnections = connectionsToDestination.filter(connection => connection.output !== output && (connection.input !== input || input === undefined));\n            if (filteredConnections.length === 0) {\n              connections.delete(destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, filteredConnections);\n            }\n          }\n        }\n      }\n      for (const [destination, connectionsToDestination] of connections) {\n        connectionsToDestination.forEach(connection => {\n          if (isNativeAudioNode(destination)) {\n            nativeAudioNode.connect(destination, connection.output, connection.input);\n          } else {\n            nativeAudioNode.connect(destination, connection.output);\n          }\n        });\n      }\n    };\n  })(nativeAudioNode.disconnect);\n};\n", "import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { addActiveInputConnectionToAudioParam } from '../helpers/add-active-input-connection-to-audio-param';\nimport { addPassiveInputConnectionToAudioParam } from '../helpers/add-passive-input-connection-to-audio-param';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteActiveInputConnection } from '../helpers/delete-active-input-connection';\nimport { deleteActiveInputConnectionToAudioParam } from '../helpers/delete-active-input-connection-to-audio-param';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { deletePassiveInputConnectionToAudioParam } from '../helpers/delete-passive-input-connection-to-audio-param';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output, isOffline) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const {\n    outputs\n  } = getAudioNodeConnections(source);\n  const eventListeners = getEventListenersOfAudioNode(source);\n  const eventListener = isActive => {\n    const nativeAudioNode = getNativeAudioNode(source);\n    const nativeAudioParam = getNativeAudioParam(destination);\n    if (isActive) {\n      const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n      if (!isOffline && !isPartOfACycle(source)) {\n        nativeAudioNode.connect(nativeAudioParam, output);\n      }\n    } else {\n      const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n      addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n      if (!isOffline && !isPartOfACycle(source)) {\n        nativeAudioNode.disconnect(nativeAudioParam, output);\n      }\n    }\n  };\n  if (insertElementInSet(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n    eventListeners.add(eventListener);\n    if (isActiveAudioNode(source)) {\n      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n    } else {\n      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n    }\n    return true;\n  }\n  return false;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioNodeConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n    return [passiveInputConnection[2], false];\n  }\n  return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n  const {\n    activeInputs,\n    passiveInputs\n  } = getAudioParamConnections(destination);\n  const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n  if (activeInputConnection === null) {\n    const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n    return [passiveInputConnection[1], false];\n  }\n  return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, isOffline, destination, output, input) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n    if (isActive && !isOffline && !isPartOfACycle(source)) {\n      disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n    }\n  }\n  if (isActiveAudioNode(destination)) {\n    const {\n      activeInputs\n    } = getAudioNodeConnections(destination);\n    setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n  }\n};\nconst deleteInputsOfAudioParam = (source, isOffline, destination, output) => {\n  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n  if (listener !== null) {\n    deleteEventListenerOfAudioNode(source, listener);\n    if (isActive && !isOffline && !isPartOfACycle(source)) {\n      getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n    }\n  }\n};\nconst deleteAnyConnection = (source, isOffline) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n    }\n    destinations.push(outputConnection[0]);\n  }\n  audioNodeConnectionsOfSource.outputs.clear();\n  return destinations;\n};\nconst deleteConnectionAtOutput = (source, isOffline, output) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  const destinations = [];\n  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n    if (outputConnection[1] === output) {\n      if (isAudioNodeOutputConnection(outputConnection)) {\n        deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n      } else {\n        deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n      }\n      destinations.push(outputConnection[0]);\n      audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    }\n  }\n  return destinations;\n};\nconst deleteConnectionToDestination = (source, isOffline, destination, output, input) => {\n  const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n  return Array.from(audioNodeConnectionsOfSource.outputs).filter(outputConnection => outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map(outputConnection => {\n    if (isAudioNodeOutputConnection(outputConnection)) {\n      deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n    } else {\n      deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n    }\n    audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n    return outputConnection[0];\n  });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor) => {\n  return class AudioNode extends eventTargetConstructor {\n    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n      super(nativeAudioNode);\n      this._context = context;\n      this._nativeAudioNode = nativeAudioNode;\n      const nativeContext = getNativeContext(context);\n      // Bug #12: Safari does not support to disconnect a specific destination.\n      if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n        return testAudioNodeDisconnectMethodSupport(nativeContext, nativeAudioWorkletNodeConstructor);\n      })) {\n        wrapAudioNodeDisconnectMethod(nativeAudioNode);\n      }\n      AUDIO_NODE_STORE.set(this, nativeAudioNode);\n      EVENT_LISTENERS.set(this, new Set());\n      if (context.state !== 'closed' && isActive) {\n        setInternalStateToActive(this);\n      }\n      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n    }\n    get channelCount() {\n      return this._nativeAudioNode.channelCount;\n    }\n    set channelCount(value) {\n      this._nativeAudioNode.channelCount = value;\n    }\n    get channelCountMode() {\n      return this._nativeAudioNode.channelCountMode;\n    }\n    set channelCountMode(value) {\n      this._nativeAudioNode.channelCountMode = value;\n    }\n    get channelInterpretation() {\n      return this._nativeAudioNode.channelInterpretation;\n    }\n    set channelInterpretation(value) {\n      this._nativeAudioNode.channelInterpretation = value;\n    }\n    get context() {\n      return this._context;\n    }\n    get numberOfInputs() {\n      return this._nativeAudioNode.numberOfInputs;\n    }\n    get numberOfOutputs() {\n      return this._nativeAudioNode.numberOfOutputs;\n    }\n    // tslint:disable-next-line:invalid-void\n    connect(destination, output = 0, input = 0) {\n      // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n      if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n        throw createIndexSizeError();\n      }\n      const nativeContext = getNativeContext(this._context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n        throw createInvalidAccessError();\n      }\n      if (isAudioNode(destination)) {\n        const nativeDestinationAudioNode = getNativeAudioNode(destination);\n        try {\n          const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n          const isPassive = isPassiveAudioNode(this);\n          if (isOffline || isPassive) {\n            this._nativeAudioNode.disconnect(...connection);\n          }\n          if (this.context.state !== 'closed' && !isPassive && isPassiveAudioNode(destination)) {\n            setInternalStateToActive(destination);\n          }\n        } catch (err) {\n          // Bug #41: Safari does not throw the correct exception so far.\n          if (err.code === 12) {\n            throw createInvalidAccessError();\n          }\n          throw err;\n        }\n        const isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline);\n        // Bug #164: Only Firefox detects cycles so far.\n        if (isNewConnectionToAudioNode) {\n          const cycles = detectCycles([this], destination);\n          visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n        }\n        return destination;\n      }\n      const nativeAudioParam = getNativeAudioParam(destination);\n      /*\n       * Bug #73, #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n       * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n       * Safari. In addition to that the maxValue property is used to only detect the affected versions below v14.0.2.\n       */\n      if (nativeAudioParam.name === 'playbackRate' && nativeAudioParam.maxValue === 1024) {\n        throw createNotSupportedError();\n      }\n      try {\n        this._nativeAudioNode.connect(nativeAudioParam, output);\n        if (isOffline || isPassiveAudioNode(this)) {\n          this._nativeAudioNode.disconnect(nativeAudioParam, output);\n        }\n      } catch (err) {\n        // Bug #58: Safari doesn't throw an InvalidAccessError yet.\n        if (err.code === 12) {\n          throw createInvalidAccessError();\n        }\n        throw err;\n      }\n      const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);\n      // Bug #164: Only Firefox detects cycles so far.\n      if (isNewConnectionToAudioParam) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n      }\n    }\n    disconnect(destinationOrOutput, output, input) {\n      let destinations;\n      const nativeContext = getNativeContext(this._context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      if (destinationOrOutput === undefined) {\n        destinations = deleteAnyConnection(this, isOffline);\n      } else if (typeof destinationOrOutput === 'number') {\n        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n          throw createIndexSizeError();\n        }\n        destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);\n      } else {\n        if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n          throw createIndexSizeError();\n        }\n        if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n          throw createIndexSizeError();\n        }\n        destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);\n        if (destinations.length === 0) {\n          throw createInvalidAccessError();\n        }\n      }\n      // Bug #164: Only Firefox detects cycles so far.\n      for (const destination of destinations) {\n        const cycles = detectCycles([this], destination);\n        visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n      }\n    }\n  };\n};\n", "import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) => {\n  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n    // Bug #196 Only Safari sets the defaultValue to the initial value.\n    const defaultValue = nativeAudioParam.value;\n    const automationEventList = new AutomationEventList(defaultValue);\n    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n    const audioParam = {\n      get defaultValue() {\n        return defaultValue;\n      },\n      get maxValue() {\n        return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n      },\n      get minValue() {\n        return minValue === null ? nativeAudioParam.minValue : minValue;\n      },\n      get value() {\n        return nativeAudioParam.value;\n      },\n      set value(value) {\n        nativeAudioParam.value = value;\n        // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n        audioParam.setValueAtTime(value, audioNode.context.currentTime);\n      },\n      cancelAndHoldAtTime(cancelTime) {\n        // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n        } else {\n          const previousLastEvent = Array.from(automationEventList).pop();\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          const currentLastEvent = Array.from(automationEventList).pop();\n          nativeAudioParam.cancelScheduledValues(cancelTime);\n          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n            if (currentLastEvent.type === 'exponentialRampToValue') {\n              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'linearRampToValue') {\n              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'setValue') {\n              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n            } else if (currentLastEvent.type === 'setValueCurve') {\n              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n            }\n          }\n        }\n        return audioParam;\n      },\n      cancelScheduledValues(cancelTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n        nativeAudioParam.cancelScheduledValues(cancelTime);\n        return audioParam;\n      },\n      exponentialRampToValueAtTime(value, endTime) {\n        // Bug #45: Safari does not throw an error yet.\n        if (value === 0) {\n          throw new RangeError();\n        }\n        // Bug #187: Safari does not throw an error yet.\n        if (!Number.isFinite(endTime) || endTime < 0) {\n          throw new RangeError();\n        }\n        const currentTime = audioNode.context.currentTime;\n        if (audioParamRenderer === null) {\n          automationEventList.flush(currentTime);\n        }\n        // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n        if (Array.from(automationEventList).length === 0) {\n          automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n          nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n        }\n        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n      linearRampToValueAtTime(value, endTime) {\n        const currentTime = audioNode.context.currentTime;\n        if (audioParamRenderer === null) {\n          automationEventList.flush(currentTime);\n        }\n        // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n        if (Array.from(automationEventList).length === 0) {\n          automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n          nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n        }\n        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.linearRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n      setTargetAtTime(target, startTime, timeConstant) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n        return audioParam;\n      },\n      setValueAtTime(value, startTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n        automationEventList.add(createSetValueAutomationEvent(value, startTime));\n        nativeAudioParam.setValueAtTime(value, startTime);\n        return audioParam;\n      },\n      setValueCurveAtTime(values, startTime, duration) {\n        // Bug 183: Safari only accepts a Float32Array.\n        const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n        /*\n         * Bug #152: Safari does not correctly interpolate the values of the curve.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n         * existence of the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          const endTime = startTime + duration;\n          const sampleRate = audioNode.context.sampleRate;\n          const firstSample = Math.ceil(startTime * sampleRate);\n          const lastSample = Math.floor(endTime * sampleRate);\n          const numberOfInterpolatedValues = lastSample - firstSample;\n          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n            const theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n          }\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n          const timeOfLastSample = lastSample / sampleRate;\n          if (timeOfLastSample < endTime) {\n            setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n          }\n          setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n        } else {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n          automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n        }\n        return audioParam;\n      }\n    };\n    audioParamStore.set(audioParam, nativeAudioParam);\n    audioParamAudioNodeStore.set(audioParam, audioNode);\n    addAudioParamConnections(audioParam, audioParamRenderer);\n    return audioParam;\n  };\n};\n", "export const createAudioParamRenderer = automationEventList => {\n  return {\n    replay(audioParam) {\n      for (const automationEvent of automationEventList) {\n        if (automationEvent.type === 'exponentialRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.exponentialRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'linearRampToValue') {\n          const {\n            endTime,\n            value\n          } = automationEvent;\n          audioParam.linearRampToValueAtTime(value, endTime);\n        } else if (automationEvent.type === 'setTarget') {\n          const {\n            startTime,\n            target,\n            timeConstant\n          } = automationEvent;\n          audioParam.setTargetAtTime(target, startTime, timeConstant);\n        } else if (automationEvent.type === 'setValue') {\n          const {\n            startTime,\n            value\n          } = automationEvent;\n          audioParam.setValueAtTime(value, startTime);\n        } else if (automationEvent.type === 'setValueCurve') {\n          const {\n            duration,\n            startTime,\n            values\n          } = automationEvent;\n          audioParam.setValueCurveAtTime(values, startTime, duration);\n        } else {\n          throw new Error(\"Can't apply an unknown automation.\");\n        }\n      }\n    }\n  };\n};\n", "export class ReadOnlyMap {\n  constructor(parameters) {\n    this._map = new Map(parameters);\n  }\n  get size() {\n    return this._map.size;\n  }\n  entries() {\n    return this._map.entries();\n  }\n  forEach(callback, thisArg = null) {\n    return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n  }\n  get(name) {\n    return this._map.get(name);\n  }\n  has(name) {\n    return this._map.has(name);\n  }\n  keys() {\n    return this._map.keys();\n  }\n  values() {\n    return this._map.values();\n  }\n}\n", "import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  parameterData: {},\n  processorOptions: {}\n};\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) => {\n  return class AudioWorkletNode extends audioNodeConstructor {\n    constructor(context, name, options) {\n      var _a;\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = sanitizeAudioWorkletNodeOptions({\n        ...DEFAULT_OPTIONS,\n        ...options\n      });\n      // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n      testAudioWorkletNodeOptionsClonability(mergedOptions);\n      const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n      const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);\n      // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n      const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n      const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n      /*\n       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n       * returns false.\n       */\n      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n      const parameters = [];\n      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n        const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n        parameters.push([nm, audioParam]);\n      });\n      this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n      this._onprocessorerror = null;\n      this._parameters = new ReadOnlyMap(parameters);\n      /*\n       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n       * the destination.\n       */\n      if (isOffline) {\n        addUnrenderedAudioWorkletNode(nativeContext, this);\n      }\n      const {\n        activeInputs\n      } = getAudioNodeConnections(this);\n      setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n    }\n    get onprocessorerror() {\n      return this._onprocessorerror;\n    }\n    set onprocessorerror(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n    }\n    get parameters() {\n      if (this._parameters === null) {\n        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n        return this._nativeAudioWorkletNode.parameters;\n      }\n      return this._parameters;\n    }\n    get port() {\n      return this._nativeAudioWorkletNode.port;\n    }\n  };\n};\n", "export function copyFromChannel(audioBuffer,\n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n  if (typeof audioBuffer.copyFromChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength === 0) {\n      parent[key] = new Float32Array(128);\n    }\n    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n    // Bug #5: Safari does not support copyFromChannel().\n  } else {\n    const channelData = audioBuffer.getChannelData(channelNumber);\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength === 0) {\n      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n    } else {\n      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n      parent[key].set(slicedInput);\n    }\n  }\n}\n", "export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n  if (typeof audioBuffer.copyToChannel === 'function') {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n    }\n    // Bug #5: Safari does not support copyToChannel().\n  } else {\n    // The byteLength will be 0 when the ArrayBuffer was transferred.\n    if (parent[key].byteLength !== 0) {\n      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n    }\n  }\n};\n", "export const createNestedArrays = (x, y) => {\n  const arrays = [];\n  for (let i = 0; i < x; i += 1) {\n    const array = [];\n    const length = typeof y === 'number' ? y : y[i];\n    for (let j = 0; j < length; j += 1) {\n      array.push(new Float32Array(128));\n    }\n    arrays.push(array);\n  }\n  return arrays;\n};\n", "import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n  const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n  const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n  return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n", "import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) => {\n  // Ceil the length to the next full render quantum.\n  // Bug #17: Safari does not yet expose the length.\n  const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n  const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n  const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n  const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n  if (processorConstructor === undefined) {\n    throw new Error('Missing the processor constructor.');\n  }\n  const audioNodeConnections = getAudioNodeConnections(proxy);\n  const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n  const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n  const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n  const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({\n    ...prmtrs,\n    [name]: new Float32Array(128)\n  }), {});\n  for (let i = 0; i < length; i += 128) {\n    if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n      for (let j = 0; j < options.numberOfInputs; j += 1) {\n        for (let k = 0; k < options.channelCount; k += 1) {\n          copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n        }\n      }\n    }\n    if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n      processorConstructor.parameterDescriptors.forEach(({\n        name\n      }, index) => {\n        copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n      });\n    }\n    for (let j = 0; j < options.numberOfInputs; j += 1) {\n      for (let k = 0; k < outputChannelCount[j]; k += 1) {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (outputs[j][k].byteLength === 0) {\n          outputs[j][k] = new Float32Array(128);\n        }\n      }\n    }\n    try {\n      const potentiallyEmptyInputs = inputs.map((input, index) => {\n        if (audioNodeConnections.activeInputs[index].size === 0) {\n          return [];\n        }\n        return input;\n      });\n      const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n      if (processedBuffer !== null) {\n        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n          for (let k = 0; k < outputChannelCount[j]; k += 1) {\n            copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n          }\n          outputChannelSplitterNodeOutput += outputChannelCount[j];\n        }\n      }\n      if (!activeSourceFlag) {\n        break;\n      }\n    } catch (error) {\n      proxy.dispatchEvent(new ErrorEvent('processorerror', {\n        colno: error.colno,\n        filename: error.filename,\n        lineno: error.lineno,\n        message: error.message\n      }));\n      break;\n    }\n  }\n  return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (name, options, processorConstructor) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let processedBufferPromise = null;\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n      let nativeOutputNodes = null;\n      const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n      const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);\n      // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n      if (nativeAudioWorkletNodeConstructor === null) {\n        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n          channelCount: Math.max(1, numberOfOutputChannels),\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n          outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: outputChannelCount[i]\n          }));\n        }\n        const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          channelCount: options.channelCount,\n          channelCountMode: options.channelCountMode,\n          channelInterpretation: options.channelInterpretation,\n          gain: 1\n        });\n        outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n        outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n        nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n      } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n        nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n      if (nativeOutputNodes !== null) {\n        if (processedBufferPromise === null) {\n          if (processorConstructor === undefined) {\n            throw new Error('Missing the processor constructor.');\n          }\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n          // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n          const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n          const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n          const numberOfChannels = numberOfInputChannels + numberOfParameters;\n          const renderBuffer = async () => {\n            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels,\n            // Ceil the length to the next full render quantum.\n            // Bug #17: Safari does not yet expose the length.\n            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n            const gainNodes = [];\n            const inputChannelSplitterNodes = [];\n            for (let i = 0; i < options.numberOfInputs; i += 1) {\n              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n              }));\n              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n              }));\n            }\n            const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async audioParam => {\n              const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: audioParam.value\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n              return constantSourceNode;\n            }));\n            const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n              channelCount: 1,\n              channelCountMode: 'explicit',\n              channelInterpretation: 'speakers',\n              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n            });\n            for (let i = 0; i < options.numberOfInputs; i += 1) {\n              gainNodes[i].connect(inputChannelSplitterNodes[i]);\n              for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n              }\n            }\n            for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n              constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n              constantSourceNode.start(0);\n            }\n            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n            await Promise.all(gainNodes.map(gainNode => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)));\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          };\n          processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime);\n        }\n        const processedBuffer = await processedBufferPromise;\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n          buffer: null,\n          channelCount: 2,\n          channelCountMode: 'max',\n          channelInterpretation: 'speakers',\n          loop: false,\n          loopEnd: 0,\n          loopStart: 0,\n          playbackRate: 1\n        });\n        const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n        if (processedBuffer !== null) {\n          audioBufferSourceNode.buffer = processedBuffer;\n          audioBufferSourceNode.start(0);\n        }\n        audioBufferSourceNode.connect(outputChannelSplitterNode);\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n          for (let j = 0; j < outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n          outputChannelSplitterNodeOutput += outputChannelCount[i];\n        }\n        return outputGainNode;\n      }\n      if (!nativeAudioWorkletNodeIsOwnedByContext) {\n        for (const [nm, audioParam] of proxy.parameters.entries()) {\n          await renderAutomation(nativeOfflineAudioContext, audioParam,\n          // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          nativeAudioWorkletNode.parameters.get(nm));\n        }\n      } else {\n        for (const [nm, audioParam] of proxy.parameters.entries()) {\n          await connectAudioParam(nativeOfflineAudioContext, audioParam,\n          // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          nativeAudioWorkletNode.parameters.get(nm));\n        }\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n      return nativeAudioWorkletNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n        const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n  return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext, numberOfChannels);\n      this._nativeContext = _nativeContext;\n      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: (moduleURL, options) => {\n          return addAudioWorkletModule(this, moduleURL, options);\n        }\n      };\n    }\n    get audioWorklet() {\n      return this._audioWorklet;\n    }\n    createAnalyser() {\n      return new analyserNodeConstructor(this);\n    }\n    createBiquadFilter() {\n      return new biquadFilterNodeConstructor(this);\n    }\n    createBuffer(numberOfChannels, length, sampleRate) {\n      return new audioBufferConstructor({\n        length,\n        numberOfChannels,\n        sampleRate\n      });\n    }\n    createBufferSource() {\n      return new audioBufferSourceNodeConstructor(this);\n    }\n    createChannelMerger(numberOfInputs = 6) {\n      return new channelMergerNodeConstructor(this, {\n        numberOfInputs\n      });\n    }\n    createChannelSplitter(numberOfOutputs = 6) {\n      return new channelSplitterNodeConstructor(this, {\n        numberOfOutputs\n      });\n    }\n    createConstantSource() {\n      return new constantSourceNodeConstructor(this);\n    }\n    createConvolver() {\n      return new convolverNodeConstructor(this);\n    }\n    createDelay(maxDelayTime = 1) {\n      return new delayNodeConstructor(this, {\n        maxDelayTime\n      });\n    }\n    createDynamicsCompressor() {\n      return new dynamicsCompressorNodeConstructor(this);\n    }\n    createGain() {\n      return new gainNodeConstructor(this);\n    }\n    createIIRFilter(feedforward, feedback) {\n      return new iIRFilterNodeConstructor(this, {\n        feedback,\n        feedforward\n      });\n    }\n    createOscillator() {\n      return new oscillatorNodeConstructor(this);\n    }\n    createPanner() {\n      return new pannerNodeConstructor(this);\n    }\n    createPeriodicWave(real, imag, constraints = {\n      disableNormalization: false\n    }) {\n      return new periodicWaveConstructor(this, {\n        ...constraints,\n        imag,\n        real\n      });\n    }\n    createStereoPanner() {\n      return new stereoPannerNodeConstructor(this);\n    }\n    createWaveShaper() {\n      return new waveShaperNodeConstructor(this);\n    }\n    decodeAudioData(audioData, successCallback, errorCallback) {\n      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {\n        if (typeof successCallback === 'function') {\n          successCallback(audioBuffer);\n        }\n        return audioBuffer;\n      }, err => {\n        if (typeof errorCallback === 'function') {\n          errorCallback(err);\n        }\n        throw err;\n      });\n    }\n  };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class BiquadFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n      // Bug #80: Safari does not export the correct values for maxValue and minValue.\n      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n      // Bug #77: Firefox & Safari do not export the correct value for minValue.\n      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n      // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get detune() {\n      return this._detune;\n    }\n    get frequency() {\n      return this._frequency;\n    }\n    get gain() {\n      return this._gain;\n    }\n    get Q() {\n      return this._Q;\n    }\n    get type() {\n      return this._nativeBiquadFilterNode.type;\n    }\n    set type(value) {\n      this._nativeBiquadFilterNode.type = value;\n    }\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      // Bug #189: Safari does throw an InvalidStateError.\n      try {\n        this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n      } catch (err) {\n        if (err.code === 11) {\n          throw createInvalidAccessError();\n        }\n        throw err;\n      }\n      // Bug #68: Safari does not throw an error if the parameters differ in their length.\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeBiquadFilterNodes = new WeakMap();\n    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        const options = {\n          Q: nativeBiquadFilterNode.Q.value,\n          channelCount: nativeBiquadFilterNode.channelCount,\n          channelCountMode: nativeBiquadFilterNode.channelCountMode,\n          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n          detune: nativeBiquadFilterNode.detune.value,\n          frequency: nativeBiquadFilterNode.frequency.value,\n          gain: nativeBiquadFilterNode.gain.value,\n          type: nativeBiquadFilterNode.type\n        };\n        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n      if (!nativeBiquadFilterNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n      return nativeBiquadFilterNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeBiquadFilterNode !== undefined) {\n          return Promise.resolve(renderedNativeBiquadFilterNode);\n        }\n        return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createCacheTestResult = (ongoingTests, testResults) => {\n  return (tester, test) => {\n    const cachedTestResult = testResults.get(tester);\n    if (cachedTestResult !== undefined) {\n      return cachedTestResult;\n    }\n    const ongoingTest = ongoingTests.get(tester);\n    if (ongoingTest !== undefined) {\n      return ongoingTest;\n    }\n    try {\n      const synchronousTestResult = test();\n      if (synchronousTestResult instanceof Promise) {\n        ongoingTests.set(tester, synchronousTestResult);\n        return synchronousTestResult.catch(() => false).then(finalTestResult => {\n          ongoingTests.delete(tester);\n          testResults.set(tester, finalTestResult);\n          return finalTestResult;\n        });\n      }\n      testResults.set(tester, synchronousTestResult);\n      return synchronousTestResult;\n    } catch {\n      testResults.set(tester, false);\n      return false;\n    }\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  channelCount: 1,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class ChannelMergerNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n      const channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;\n      super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioNode = getNativeAudioNode(proxy);\n      // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfInputs: nativeAudioNode.numberOfInputs\n        };\n        nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n      return nativeAudioNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  channelCount: 6,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'discrete',\n  numberOfOutputs: 6\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {\n  return class ChannelSplitterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizeChannelSplitterOptions({\n        ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;\n      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioNode = getNativeAudioNode(proxy);\n      // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n      if (!nativeAudioNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeAudioNode.channelCount,\n          channelCountMode: nativeAudioNode.channelCountMode,\n          channelInterpretation: nativeAudioNode.channelInterpretation,\n          numberOfOutputs: nativeAudioNode.numberOfOutputs\n        };\n        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n      return nativeAudioNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createConnectAudioParam = renderInputsOfAudioParam => {\n  return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n  };\n};\n", "import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destination, output = 0, input = 0) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n      throw createIndexSizeError();\n    }\n    if (isNativeAudioNode(destination)) {\n      return outputAudioNode.connect(destination, 0, input);\n    }\n    return outputAudioNode.connect(destination, 0);\n  };\n};\n", "export const createConnectedNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNode => {\n  return (nativeContext, nativeAudioNode) => {\n    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.loop = true;\n    nativeAudioBufferSourceNode.connect(nativeAudioNode);\n    nativeAudioBufferSourceNode.start();\n    return () => {\n      nativeAudioBufferSourceNode.stop();\n      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n    };\n  };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class ConstantSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._onended = null;\n    }\n    get offset() {\n      return this._offset;\n    }\n    get onended() {\n      return this._onended;\n    }\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeConstantSourceNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeConstantSourceNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n    start(when = 0) {\n      this._nativeConstantSourceNode.start(when);\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.start = when;\n      }\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n        const resetInternalStateToPassive = () => {\n          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n    stop(when = 0) {\n      this._nativeConstantSourceNode.stop(when);\n      if (this._constantSourceNodeRenderer !== null) {\n        this._constantSourceNodeRenderer.stop = when;\n      }\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConstantSourceNodes = new WeakMap();\n    let start = null;\n    let stop = null;\n    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConstantSourceNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeConstantSourceNode.channelCount,\n          channelCountMode: nativeConstantSourceNode.channelCountMode,\n          channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n          offset: nativeConstantSourceNode.offset.value\n        };\n        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeConstantSourceNode.start(start);\n        }\n        if (stop !== null) {\n          nativeConstantSourceNode.stop(stop);\n        }\n      }\n      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n      if (!nativeConstantSourceNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n      return nativeConstantSourceNode;\n    };\n    return {\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConstantSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeConstantSourceNode);\n        }\n        return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createConvertNumberToUnsignedLong = unit32Array => {\n  return value => {\n    unit32Array[0] = value;\n    return unit32Array[0];\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  buffer: null,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class ConvolverNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;\n      super(context, false, nativeConvolverNode, convolverNodeRenderer);\n      this._isBufferNullified = false;\n      this._nativeConvolverNode = nativeConvolverNode;\n      if (mergedOptions.buffer !== null) {\n        setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n      }\n    }\n    get buffer() {\n      if (this._isBufferNullified) {\n        return null;\n      }\n      return this._nativeConvolverNode.buffer;\n    }\n    set buffer(value) {\n      this._nativeConvolverNode.buffer = value;\n      // Bug #115: Safari does not allow to set the buffer to null.\n      if (value === null && this._nativeConvolverNode.buffer !== null) {\n        const nativeContext = this._nativeConvolverNode.context;\n        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n        this._isBufferNullified = true;\n        setAudioNodeTailTime(this, 0);\n      } else {\n        this._isBufferNullified = false;\n        setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n      }\n    }\n    get normalize() {\n      return this._nativeConvolverNode.normalize;\n    }\n    set normalize(value) {\n      this._nativeConvolverNode.normalize = value;\n    }\n  };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeConvolverNodes = new WeakMap();\n    const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeConvolverNode = getNativeAudioNode(proxy);\n      // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n      if (!nativeConvolverNodeIsOwnedByContext) {\n        const options = {\n          buffer: nativeConvolverNode.buffer,\n          channelCount: nativeConvolverNode.channelCount,\n          channelCountMode: nativeConvolverNode.channelCountMode,\n          channelInterpretation: nativeConvolverNode.channelInterpretation,\n          disableNormalization: !nativeConvolverNode.normalize\n        };\n        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n      if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n      }\n      return nativeConvolverNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n  return (numberOfChannels, length, sampleRate) => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      throw new Error('Missing the native OfflineAudioContext constructor.');\n    }\n    try {\n      return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n    } catch (err) {\n      // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n      if (err.name === 'SyntaxError') {\n        throw createNotSupportedError();\n      }\n      throw err;\n    }\n  };\n};\n", "export const createDataCloneError = () => new DOMException('', 'DataCloneError');\n", "export const detachArrayBuffer = arrayBuffer => {\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n  return new Promise(resolve => {\n    const closeAndResolve = () => {\n      port2.onmessage = null;\n      port1.close();\n      port2.close();\n      resolve();\n    };\n    port2.onmessage = () => closeAndResolve();\n    try {\n      port1.postMessage(arrayBuffer, [arrayBuffer]);\n    } catch {\n      // Ignore errors.\n    } finally {\n      closeAndResolve();\n    }\n  });\n};\n", "import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (anyContext, audioData) => {\n    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n    // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n    if (detachedArrayBuffers.has(audioData)) {\n      const err = createDataCloneError();\n      return Promise.reject(err);\n    }\n    // The audioData parameter maybe of a type which can't be added to a WeakSet.\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch {\n      // Ignore errors.\n    }\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n      return nativeContext.decodeAudioData(audioData).then(audioBuffer => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        detachArrayBuffer(audioData).catch(() => {\n          // Ignore errors.\n        });\n        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    }\n    // Bug #21: Safari does not return a Promise yet.\n    return new Promise((resolve, reject) => {\n      const complete = async () => {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        try {\n          await detachArrayBuffer(audioData);\n        } catch {\n          // Ignore errors.\n        }\n      };\n      const fail = err => {\n        reject(err);\n        complete();\n      };\n      // Bug #26: Safari throws a synchronous error.\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, audioBuffer => {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n          audioBufferStore.add(audioBuffer);\n          complete().then(() => resolve(audioBuffer));\n        }, err => {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};\n", "import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n  return (audioNode, count) => {\n    const cycleCounter = cycleCounters.get(audioNode);\n    if (cycleCounter === undefined) {\n      throw new Error('Missing the expected cycle count.');\n    }\n    const nativeContext = getNativeContext(audioNode.context);\n    const isOffline = isNativeOfflineAudioContext(nativeContext);\n    if (cycleCounter === count) {\n      cycleCounters.delete(audioNode);\n      if (!isOffline && isActiveAudioNode(audioNode)) {\n        const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n        const {\n          outputs\n        } = getAudioNodeConnections(audioNode);\n        for (const output of outputs) {\n          if (isAudioNodeOutputConnection(output)) {\n            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n          } else {\n            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n          }\n        }\n      }\n    } else {\n      cycleCounters.set(audioNode, cycleCounter - count);\n    }\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  delayTime: 0,\n  maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class DelayNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;\n      super(context, false, nativeDelayNode, delayNodeRenderer);\n      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n      setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n    }\n    get delayTime() {\n      return this._delayTime;\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return maxDelayTime => {\n    const renderedNativeDelayNodes = new WeakMap();\n    const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDelayNode = getNativeAudioNode(proxy);\n      // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n      if (!nativeDelayNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeDelayNode.channelCount,\n          channelCountMode: nativeDelayNode.channelCountMode,\n          channelInterpretation: nativeDelayNode.channelInterpretation,\n          delayTime: nativeDelayNode.delayTime.value,\n          maxDelayTime\n        };\n        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n      if (!nativeDelayNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n      return nativeDelayNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDelayNode !== undefined) {\n          return Promise.resolve(renderedNativeDelayNode);\n        }\n        return createDelayNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createDeleteActiveInputConnectionToAudioNode = pickElementFromSet => {\n  return (activeInputs, source, output, input) => {\n    return pickElementFromSet(activeInputs[input], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);\n  };\n};\n", "export const createDeleteUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {\n  return (nativeContext, audioWorkletNode) => {\n    getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);\n  };\n};\n", "export const isDelayNode = audioNode => {\n  return 'delayTime' in audioNode;\n};\n", "import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n  return function detectCycles(chain, nextLink) {\n    const audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n    if (isDelayNode(audioNode)) {\n      return [];\n    }\n    if (chain[0] === audioNode) {\n      return [chain];\n    }\n    if (chain.includes(audioNode)) {\n      return [];\n    }\n    const {\n      outputs\n    } = getAudioNodeConnections(audioNode);\n    return Array.from(outputs).map(outputConnection => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n  };\n};\n", "import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n  const outputAudioNode = outputAudioNodes[output];\n  if (outputAudioNode === undefined) {\n    throw createIndexSizeError();\n  }\n  return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = createIndexSizeError => {\n  return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n    if (destinationOrOutput === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());\n    }\n    if (typeof destinationOrOutput === 'number') {\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n    }\n    if (isNativeAudioNode(destinationOrOutput)) {\n      if (output === undefined) {\n        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n      }\n      if (input === undefined) {\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n      }\n      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n    }\n    if (output === undefined) {\n      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));\n    }\n    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class DynamicsCompressorNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(this, 0.006);\n    }\n    get attack() {\n      return this._attack;\n    }\n    // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n    get channelCount() {\n      return this._nativeDynamicsCompressorNode.channelCount;\n    }\n    set channelCount(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n      this._nativeDynamicsCompressorNode.channelCount = value;\n      if (value > 2) {\n        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    /*\n     * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n     * overwritten here.\n     */\n    get channelCountMode() {\n      return this._nativeDynamicsCompressorNode.channelCountMode;\n    }\n    set channelCountMode(value) {\n      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n      this._nativeDynamicsCompressorNode.channelCountMode = value;\n      if (value === 'max') {\n        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n        throw createNotSupportedError();\n      }\n    }\n    get knee() {\n      return this._knee;\n    }\n    get ratio() {\n      return this._ratio;\n    }\n    get reduction() {\n      // Bug #111: Safari returns an AudioParam instead of a number.\n      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n        return this._nativeDynamicsCompressorNode.reduction.value;\n      }\n      return this._nativeDynamicsCompressorNode.reduction;\n    }\n    get release() {\n      return this._release;\n    }\n    get threshold() {\n      return this._threshold;\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeDynamicsCompressorNodes = new WeakMap();\n    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n       * created again.\n       */\n      const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        const options = {\n          attack: nativeDynamicsCompressorNode.attack.value,\n          channelCount: nativeDynamicsCompressorNode.channelCount,\n          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n          knee: nativeDynamicsCompressorNode.knee.value,\n          ratio: nativeDynamicsCompressorNode.ratio.value,\n          release: nativeDynamicsCompressorNode.release.value,\n          threshold: nativeDynamicsCompressorNode.threshold.value\n        };\n        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n      return nativeDynamicsCompressorNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeDynamicsCompressorNode !== undefined) {\n          return Promise.resolve(renderedNativeDynamicsCompressorNode);\n        }\n        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createEncodingError = () => new DOMException('', 'EncodingError');\n", "export const createEvaluateSource = window => {\n  return source => new Promise((resolve, reject) => {\n    if (window === null) {\n      // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n      reject(new SyntaxError());\n      return;\n    }\n    const head = window.document.head;\n    if (head === null) {\n      // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n      reject(new SyntaxError());\n    } else {\n      const script = window.document.createElement('script');\n      // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n      const blob = new Blob([source], {\n        type: 'application/javascript'\n      });\n      const url = URL.createObjectURL(blob);\n      const originalOnErrorHandler = window.onerror;\n      const removeErrorEventListenerAndRevokeUrl = () => {\n        window.onerror = originalOnErrorHandler;\n        URL.revokeObjectURL(url);\n      };\n      window.onerror = (message, src, lineno, colno, error) => {\n        // @todo Edge thinks the source is the one of the html document.\n        if (src === url || src === window.location.href && lineno === 1 && colno === 1) {\n          removeErrorEventListenerAndRevokeUrl();\n          reject(error);\n          return false;\n        }\n        if (originalOnErrorHandler !== null) {\n          return originalOnErrorHandler(message, src, lineno, colno, error);\n        }\n      };\n      script.onerror = () => {\n        removeErrorEventListenerAndRevokeUrl();\n        // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n        reject(new SyntaxError());\n      };\n      script.onload = () => {\n        removeErrorEventListenerAndRevokeUrl();\n        resolve();\n      };\n      script.src = url;\n      script.type = 'module';\n      head.appendChild(script);\n    }\n  });\n};\n", "export const createEventTargetConstructor = wrapEventListener => {\n  return class EventTarget {\n    constructor(_nativeEventTarget) {\n      this._nativeEventTarget = _nativeEventTarget;\n      this._listeners = new WeakMap();\n    }\n    addEventListener(type, listener, options) {\n      if (listener !== null) {\n        let wrappedEventListener = this._listeners.get(listener);\n        if (wrappedEventListener === undefined) {\n          wrappedEventListener = wrapEventListener(this, listener);\n          if (typeof listener === 'function') {\n            this._listeners.set(listener, wrappedEventListener);\n          }\n        }\n        this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n      }\n    }\n    dispatchEvent(event) {\n      return this._nativeEventTarget.dispatchEvent(event);\n    }\n    removeEventListener(type, listener, options) {\n      const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n      this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n    }\n  };\n};\n", "export const createExposeCurrentFrameAndCurrentTime = window => {\n  return (currentTime, sampleRate, fn) => {\n    Object.defineProperties(window, {\n      currentFrame: {\n        configurable: true,\n        get() {\n          return Math.round(currentTime * sampleRate);\n        }\n      },\n      currentTime: {\n        configurable: true,\n        get() {\n          return currentTime;\n        }\n      }\n    });\n    try {\n      return fn();\n    } finally {\n      if (window !== null) {\n        delete window.currentFrame;\n        delete window.currentTime;\n      }\n    }\n  };\n};\n", "export const createFetchSource = createAbortError => {\n  return async url => {\n    try {\n      const response = await fetch(url);\n      if (response.ok) {\n        return [await response.text(), response.url];\n      }\n    } catch {\n      // Ignore errors.\n    } // tslint:disable-line:no-empty\n    throw createAbortError();\n  };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class GainNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;\n      super(context, false, nativeGainNode, gainNodeRenderer);\n      // Bug #74: Safari does not export the correct values for maxValue and minValue.\n      this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n    }\n    get gain() {\n      return this._gain;\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeGainNodes = new WeakMap();\n    const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = getNativeAudioNode(proxy);\n      // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n      if (!nativeGainNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeGainNode.channelCount,\n          channelCountMode: nativeGainNode.channelCountMode,\n          channelInterpretation: nativeGainNode.channelInterpretation,\n          gain: nativeGainNode.gain.value\n        };\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n      if (!nativeGainNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n      return nativeGainNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createGetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore, getValueForKey) => {\n  return nativeAudioWorkletNode => getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);\n};\n", "export const createGetAudioNodeRenderer = getAudioNodeConnections => {\n  return audioNode => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    if (audioNodeConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n    }\n    return audioNodeConnections.renderer;\n  };\n};\n", "export const createGetAudioNodeTailTime = audioNodeTailTimeStore => {\n  return audioNode => {\n    var _a;\n    return (_a = audioNodeTailTimeStore.get(audioNode)) !== null && _a !== void 0 ? _a : 0;\n  };\n};\n", "export const createGetAudioParamRenderer = getAudioParamConnections => {\n  return audioParam => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    if (audioParamConnections.renderer === null) {\n      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n    }\n    return audioParamConnections.renderer;\n  };\n};\n", "export const createGetBackupOfflineAudioContext = backupOfflineAudioContextStore => {\n  return nativeContext => {\n    return backupOfflineAudioContextStore.get(nativeContext);\n  };\n};\n", "export const createInvalidStateError = () => new DOMException('', 'InvalidStateError');\n", "import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = contextStore => {\n  return context => {\n    const nativeContext = contextStore.get(context);\n    if (nativeContext === undefined) {\n      throw createInvalidStateError();\n    }\n    return nativeContext;\n  };\n};\n", "export const createGetOrCreateBackupOfflineAudioContext = (backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor) => {\n  return nativeContext => {\n    let backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);\n    if (backupOfflineAudioContext !== undefined) {\n      return backupOfflineAudioContext;\n    }\n    if (nativeOfflineAudioContextConstructor === null) {\n      throw new Error('Missing the native OfflineAudioContext constructor.');\n    }\n    // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n    backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);\n    return backupOfflineAudioContext;\n  };\n};\n", "export const createGetUnrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore => {\n  return nativeContext => {\n    const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n    if (unrenderedAudioWorkletNodes === undefined) {\n      throw new Error('The context has no set of AudioWorkletNodes.');\n    }\n    return unrenderedAudioWorkletNodes;\n  };\n};\n", "export const createInvalidAccessError = () => new DOMException('', 'InvalidAccessError');\n", "import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = nativeIIRFilterNode => {\n  nativeIIRFilterNode.getFrequencyResponse = (getFrequencyResponse => {\n    return (frequencyHz, magResponse, phaseResponse) => {\n      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n        throw createInvalidAccessError();\n      }\n      return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n    };\n  })(nativeIIRFilterNode.getFrequencyResponse);\n};\n", "import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class IIRFilterNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;\n      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n      // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n      // @todo Write a test which allows other browsers to remain unpatched.\n      wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n      this._nativeIIRFilterNode = nativeIIRFilterNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n    }\n  };\n};\n", "// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n  const inputLength = input.length;\n  let i = bufferIndex;\n  for (let j = 0; j < inputLength; j += 1) {\n    let y = feedforward[0] * input[j];\n    for (let k = 1; k < minLength; k += 1) {\n      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise\n      y += feedforward[k] * xBuffer[x];\n      y -= feedback[k] * yBuffer[x];\n    }\n    for (let k = minLength; k < feedforwardLength; k += 1) {\n      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n    for (let k = minLength; k < feedbackLength; k += 1) {\n      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise\n    }\n    xBuffer[i] = input[j];\n    yBuffer[i] = y;\n    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise\n    output[j] = y;\n  }\n  return i;\n};\n", "import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n  const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n  const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n  const feedbackLength = convertedFeedback.length;\n  const feedforwardLength = convertedFeedforward.length;\n  const minLength = Math.min(feedbackLength, feedforwardLength);\n  if (convertedFeedback[0] !== 1) {\n    for (let i = 0; i < feedbackLength; i += 1) {\n      convertedFeedforward[i] /= convertedFeedback[0];\n    }\n    for (let i = 1; i < feedforwardLength; i += 1) {\n      convertedFeedback[i] /= convertedFeedback[0];\n    }\n  }\n  const bufferLength = 32;\n  const xBuffer = new Float32Array(bufferLength);\n  const yBuffer = new Float32Array(bufferLength);\n  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  const numberOfChannels = renderedBuffer.numberOfChannels;\n  for (let i = 0; i < numberOfChannels; i += 1) {\n    const input = renderedBuffer.getChannelData(i);\n    const output = filteredBuffer.getChannelData(i);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n  return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return (feedback, feedforward) => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let filteredBufferPromise = null;\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeAudioBufferSourceNode = null;\n      let nativeIIRFilterNode = getNativeAudioNode(proxy);\n      // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n      // Bug #9: Safari does not support IIRFilterNodes.\n      if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n          buffer: null,\n          channelCount: 2,\n          channelCountMode: 'max',\n          channelInterpretation: 'speakers',\n          loop: false,\n          loopEnd: 0,\n          loopStart: 0,\n          playbackRate: 1\n        });\n      } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n        nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n      if (nativeAudioBufferSourceNode !== null) {\n        if (filteredBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n          // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n          proxy.context.destination.channelCount,\n          // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n          filteredBufferPromise = (async () => {\n            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n          })();\n        }\n        const filteredBuffer = await filteredBufferPromise;\n        nativeAudioBufferSourceNode.buffer = filteredBuffer;\n        nativeAudioBufferSourceNode.start(0);\n        return nativeAudioBufferSourceNode;\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n      return nativeIIRFilterNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n  return isOffline => {\n    return (audioNode, count) => {\n      const cycleCounter = cycleCounters.get(audioNode);\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n          const {\n            outputs\n          } = getAudioNodeConnections(audioNode);\n          for (const output of outputs) {\n            if (isAudioNodeOutputConnection(output)) {\n              const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n            } else {\n              const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n            }\n          }\n        }\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};\n", "export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n  return anything => {\n    const nativeContext = contextStore.get(anything);\n    return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n  };\n};\n", "export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n  return anything => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n", "export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n  return anything => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n", "export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n  return anything => {\n    const nativeContext = contextStore.get(anything);\n    return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n  };\n};\n", "export const createIsNativeAudioContext = nativeAudioContextConstructor => {\n  return anything => {\n    return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;\n  };\n};\n", "export const createIsNativeAudioNode = window => {\n  return anything => {\n    return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;\n  };\n};\n", "export const createIsNativeAudioParam = window => {\n  return anything => {\n    return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;\n  };\n};\n", "export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n  return anything => {\n    return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);\n  };\n};\n", "export const createIsNativeOfflineAudioContext = nativeOfflineAudioContextConstructor => {\n  return anything => {\n    return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;\n  };\n};\n", "export const createIsSecureContext = window => window !== null && window.isSecureContext;\n", "export const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {\n  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {\n    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);\n    return results.every(result => result);\n  }\n  return false;\n};\n", "export const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaElementAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n      // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw TypeError();\n      }\n      super(context, true, nativeMediaElementAudioSourceNode, null);\n      this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n    }\n    get mediaElement() {\n      return this._nativeMediaElementAudioSourceNode.mediaElement;\n    }\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers'\n};\nexport const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioDestinationNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n      super(context, false, nativeMediaStreamAudioDestinationNode, null);\n      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n    }\n    get stream() {\n      return this._nativeMediaStreamAudioDestinationNode.stream;\n    }\n  };\n};\n", "export const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n  return class MediaStreamAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n      // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n      if (isNativeOfflineAudioContext(nativeContext)) {\n        throw new TypeError();\n      }\n      super(context, true, nativeMediaStreamAudioSourceNode, null);\n      this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n    }\n    get mediaStream() {\n      return this._nativeMediaStreamAudioSourceNode.mediaStream;\n    }\n  };\n};\n", "export const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {\n  return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n      super(context, true, nativeMediaStreamTrackAudioSourceNode, null);\n    }\n  };\n};\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {\n  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options = {}) {\n      if (nativeAudioContextConstructor === null) {\n        throw new Error('Missing the native AudioContext constructor.');\n      }\n      let nativeAudioContext;\n      try {\n        nativeAudioContext = new nativeAudioContextConstructor(options);\n      } catch (err) {\n        // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n        if (err.code === 12 && err.message === 'sampleRate is not in range') {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n      // Bug #131 Safari returns null when there are four other AudioContexts running already.\n      if (nativeAudioContext === null) {\n        throw createUnknownError();\n      }\n      // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n      if (!isValidLatencyHint(options.latencyHint)) {\n        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n      }\n      // Bug #150 Safari does not support setting the sampleRate.\n      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n        throw createNotSupportedError();\n      }\n      super(nativeAudioContext, 2);\n      const {\n        latencyHint\n      } = options;\n      const {\n        sampleRate\n      } = nativeAudioContext;\n      // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :\n      /*\n       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n       * ScriptProcessorNode.\n       */\n      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;\n      this._nativeAudioContext = nativeAudioContext;\n      // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n      if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n        this._nativeGainNode = nativeAudioContext.createGain();\n        this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n        this._nativeGainNode.gain.value = 1e-37;\n        this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n        this._nativeOscillatorNode.start();\n      } else {\n        this._nativeGainNode = null;\n        this._nativeOscillatorNode = null;\n      }\n      this._state = null;\n      /*\n       * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n       * to 'running'.\n       */\n      if (nativeAudioContext.state === 'running') {\n        this._state = 'suspended';\n        const revokeState = () => {\n          if (this._state === 'suspended') {\n            this._state = null;\n          }\n          nativeAudioContext.removeEventListener('statechange', revokeState);\n        };\n        nativeAudioContext.addEventListener('statechange', revokeState);\n      }\n    }\n    get baseLatency() {\n      return this._baseLatency;\n    }\n    get state() {\n      return this._state !== null ? this._state : this._nativeAudioContext.state;\n    }\n    close() {\n      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n      if (this.state === 'closed') {\n        return this._nativeAudioContext.close().then(() => {\n          throw createInvalidStateError();\n        });\n      }\n      // Bug #34: If the state was set to suspended before it should be revoked now.\n      if (this._state === 'suspended') {\n        this._state = null;\n      }\n      return this._nativeAudioContext.close().then(() => {\n        if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n          this._nativeOscillatorNode.stop();\n          this._nativeGainNode.disconnect();\n          this._nativeOscillatorNode.disconnect();\n        }\n        deactivateAudioGraph(this);\n      });\n    }\n    resume() {\n      if (this._state === 'suspended') {\n        return new Promise((resolve, reject) => {\n          const resolvePromise = () => {\n            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n            if (this._nativeAudioContext.state === 'running') {\n              resolve();\n            } else {\n              this.resume().then(resolve, reject);\n            }\n          };\n          this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n        });\n      }\n      return this._nativeAudioContext.resume().catch(err => {\n        // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined || err.code === 15) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n    suspend() {\n      return this._nativeAudioContext.suspend().catch(err => {\n        // Bug #56: Safari invokes the catch handler but without an error.\n        if (err === undefined) {\n          throw createInvalidStateError();\n        }\n        throw err;\n      });\n    }\n  };\n};\n", "import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n  return class MinimalBaseAudioContext extends eventTargetConstructor {\n    constructor(_nativeContext, numberOfChannels) {\n      super(_nativeContext);\n      this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(this, _nativeContext);\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n      this._listener = createAudioListener(this, _nativeContext);\n      this._onstatechange = null;\n    }\n    get currentTime() {\n      return this._nativeContext.currentTime;\n    }\n    get destination() {\n      return this._destination;\n    }\n    get listener() {\n      return this._listener;\n    }\n    get onstatechange() {\n      return this._onstatechange;\n    }\n    set onstatechange(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeContext.onstatechange = wrappedListener;\n      const nativeOnStateChange = this._nativeContext.onstatechange;\n      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n    }\n    get sampleRate() {\n      return this._nativeContext.sampleRate;\n    }\n    get state() {\n      return this._nativeContext.state;\n    }\n  };\n};\n", "export const testPromiseSupport = nativeContext => {\n  // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n  const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n  try {\n    // Bug #1: Safari requires a successCallback.\n    const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n      // Ignore the success callback.\n    });\n    if (promise === undefined) {\n      return false;\n    }\n    promise.catch(() => {\n      // Ignore rejected errors.\n    });\n    return true;\n  } catch {\n    // Ignore errors.\n  }\n  return false;\n};\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {\n  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {\n    constructor(options) {\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n      // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n          return delayStateChangeEvent;\n        })());\n      }\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n      return this._nativeOfflineAudioContext.length;\n    }\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n        this._state = null;\n        deactivateAudioGraph(this);\n      });\n    }\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n  };\n};\n", "export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n  return (nativeAudioNode, whenConnected, whenDisconnected) => {\n    const connections = new Set();\n    nativeAudioNode.connect = (connect => {\n      // tslint:disable-next-line:invalid-void no-inferrable-types\n      return (destination, output = 0, input = 0) => {\n        const wasDisconnected = connections.size === 0;\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n          if (wasDisconnected) {\n            whenConnected();\n          }\n          return destination;\n        }\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);\n        if (wasDisconnected) {\n          whenConnected();\n        }\n        return;\n      };\n    })(nativeAudioNode.connect);\n    nativeAudioNode.disconnect = (disconnect => {\n      return (destinationOrOutput, output, input) => {\n        const wasConnected = connections.size > 0;\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n          for (const connection of connections) {\n            if (connection[1] === destinationOrOutput) {\n              connections.delete(connection);\n            }\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n          for (const connection of connections) {\n            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {\n              connections.delete(connection);\n            }\n          }\n        }\n        const isDisconnected = connections.size === 0;\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    })(nativeAudioNode.disconnect);\n    return nativeAudioNode;\n  };\n};\n", "export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n  const value = options[option];\n  if (value !== undefined && value !== nativeAudioNode[option]) {\n    nativeAudioNode[option] = value;\n  }\n};\n", "import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n  assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n", "export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = nativeAnalyserNode => {\n  return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n", "export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = nativeAnalyserNode => {\n  nativeAnalyserNode.getFloatTimeDomainData = array => {\n    const byteTimeDomainData = new Uint8Array(array.length);\n    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n    const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n    for (let i = 0; i < length; i += 1) {\n      array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n    }\n    return array;\n  };\n};\n", "import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError) => {\n  return (nativeContext, options) => {\n    const nativeAnalyserNode = nativeContext.createAnalyser();\n    // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n    assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n    // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n    if (!(options.maxDecibels > options.minDecibels)) {\n      throw createIndexSizeError();\n    }\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n    assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n    // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n    if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n      wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n    }\n    return nativeAnalyserNode;\n  };\n};\n", "export const createNativeAudioBufferConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n  if (window.hasOwnProperty('AudioBuffer')) {\n    return window.AudioBuffer;\n  }\n  return null;\n};\n", "export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n  const value = options[audioParam];\n  if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n    nativeAudioNode[audioParam].value = value;\n  }\n};\n", "import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    let isScheduled = false;\n    return (when = 0, offset = 0, duration) => {\n      if (isScheduled) {\n        throw createInvalidStateError();\n      }\n      start.call(nativeAudioBufferSourceNode, when, offset, duration);\n      isScheduled = true;\n    };\n  })(nativeAudioBufferSourceNode.start);\n};\n", "export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {\n        throw new RangeError(\"The parameters can't be negative.\");\n      }\n      // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n      start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n    };\n  })(nativeAudioScheduledSourceNode.start);\n};\n", "export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    return (when = 0) => {\n      if (when < 0) {\n        throw new RangeError(\"The parameter can't be negative.\");\n      }\n      stop.call(nativeAudioScheduledSourceNode, when);\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n    // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    }\n    // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    }\n    // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    }\n    // Bug #44: Safari does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    }\n    // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    }\n    // Bug #44: Only Firefox does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    }\n    // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};\n", "export const createNativeAudioContextConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n  if (window.hasOwnProperty('AudioContext')) {\n    return window.AudioContext;\n  }\n  return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;\n};\n", "export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n    const nativeAudioDestinationNode = nativeContext.destination;\n    // Bug #132: Safari does not have the correct channelCount.\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    }\n    // Bug #83: Safari does not have the correct channelCountMode.\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    }\n    // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    }\n    // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n    const gainNode = createNativeGainNode(nativeContext, {\n      channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      try {\n        nativeAudioDestinationNode.channelCount = value;\n      } catch (err) {\n        // Bug #169: Safari throws an error on each attempt to change the channelCount.\n        if (value > nativeAudioDestinationNode.maxChannelCount) {\n          throw err;\n        }\n      }\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelCountMode = value;\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {\n      set.call(gainNode, value);\n      nativeAudioDestinationNode.channelInterpretation = value;\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: () => nativeAudioDestinationNode.maxChannelCount\n    });\n    // @todo This should be disconnected when the context is closed.\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};\n", "export const createNativeAudioWorkletNodeConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n  return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;\n};\n", "export const testClonabilityOfAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  const {\n    port1\n  } = new MessageChannel();\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n  }\n};\n", "import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);\n        const patchedEventListeners = new Map();\n        let onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: () => options.channelCount,\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: () => 'explicit',\n            set: () => {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: () => onprocessorerror,\n            set: value => {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n              onprocessorerror = typeof value === 'function' ? value : null;\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n        nativeAudioWorkletNode.addEventListener = (addEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n              if (unpatchedEventListener !== null) {\n                const patchedEventListener = patchedEventListeners.get(args[1]);\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = event => {\n                    // Bug #178: Chrome and Edge do fire an event of type error.\n                    if (event.type === 'error') {\n                      Object.defineProperties(event, {\n                        type: {\n                          value: 'processorerror'\n                        }\n                      });\n                      unpatchedEventListener(event);\n                    } else {\n                      unpatchedEventListener(new ErrorEvent(args[0], {\n                        ...event\n                      }));\n                    }\n                  };\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            }\n            // Bug #178: Chrome and Edge do fire an event of type error.\n            addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return addEventListener.call(nativeAudioWorkletNode, ...args);\n          };\n        })(nativeAudioWorkletNode.addEventListener);\n        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {\n          return (...args) => {\n            if (args[0] === 'processorerror') {\n              const patchedEventListener = patchedEventListeners.get(args[1]);\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            }\n            // Bug #178: Chrome and Edge do fire an event of type error.\n            removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        })(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n         * has an output.\n         */\n        if (options.numberOfOutputs !== 0) {\n          const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n          const whenConnected = () => nativeGainNode.disconnect();\n          const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);\n          // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n        throw err;\n      }\n    }\n    // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};\n", "export const computeBufferSize = (baseLatency, sampleRate) => {\n  if (baseLatency === null) {\n    return 512;\n  }\n  return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n", "export const cloneAudioWorkletNodeOptions = audioWorkletNodeOptions => {\n  return new Promise((resolve, reject) => {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    port1.onmessage = ({\n      data\n    }) => {\n      port1.close();\n      port2.close();\n      resolve(data);\n    };\n    port1.onmessageerror = ({\n      data\n    }) => {\n      port1.close();\n      port2.close();\n      reject(data);\n    };\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port2.postMessage(audioWorkletNodeOptions);\n  });\n};\n", "import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n  const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n  return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n", "import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n  let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n  if (nodeToProcessorMap === undefined) {\n    nodeToProcessorMap = new WeakMap();\n    NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n  }\n  const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n  return audioWorkletProcessorPromise;\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) => {\n  return (nativeContext, baseLatency, processorConstructor, options) => {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n    const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);\n    // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n    if (outputChannelCount.some(channelCount => channelCount < 1)) {\n      throw createNotSupportedError();\n    }\n    if (outputChannelCount.length !== options.numberOfOutputs) {\n      throw createIndexSizeError();\n    }\n    // Bug #61: This is not part of the standard but required for the faker to work.\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n    // Bug #61: This is not part of the standard but required for the faker to work.\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n    const messageChannel = new MessageChannel();\n    const gainNodes = [];\n    const inputChannelSplitterNodes = [];\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n    const constantSourceNodes = [];\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      for (const {\n        defaultValue,\n        maxValue,\n        minValue,\n        name\n      } of processorConstructor.parameterDescriptors) {\n        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n          channelCount: 1,\n          channelCountMode: 'explicit',\n          channelInterpretation: 'discrete',\n          offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n        });\n        Object.defineProperties(constantSourceNode.offset, {\n          defaultValue: {\n            get: () => defaultValue === undefined ? 0 : defaultValue\n          },\n          maxValue: {\n            get: () => maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue\n          },\n          minValue: {\n            get: () => minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue\n          }\n        });\n        constantSourceNodes.push(constantSourceNode);\n      }\n    }\n    const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters,\n    // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    const outputChannelMergerNodes = [];\n    for (let i = 0; i < options.numberOfOutputs; i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: outputChannelCount[i]\n      }));\n    }\n    for (let i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes[i].connect(inputChannelSplitterNodes[i]);\n      for (let j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n      }\n    }\n    const parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(({\n      name\n    }, index) => {\n      const constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    let channelInterpretation = options.channelInterpretation;\n    let onprocessorerror = null;\n    // Bug #87: Expose at least one output to make this node connectable.\n    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    const nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n      get channelCount() {\n        return options.channelCount;\n      },\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        for (const gainNode of gainNodes) {\n          gainNode.channelInterpretation = value;\n        }\n        channelInterpretation = value;\n      },\n      get context() {\n        return scriptProcessorNode.context;\n      },\n      get inputs() {\n        return gainNodes;\n      },\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n        onprocessorerror = typeof value === 'function' ? value : null;\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n      get parameters() {\n        return parameterMap;\n      },\n      get port() {\n        return messageChannel.port2;\n      },\n      addEventListener(...args) {\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    const patchedEventListeners = new Map();\n    messageChannel.port1.addEventListener = (addEventListener => {\n      return (...args) => {\n        if (args[0] === 'message') {\n          const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n          if (unpatchedEventListener !== null) {\n            const patchedEventListener = patchedEventListeners.get(args[1]);\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = event => {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n              };\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.addEventListener);\n    messageChannel.port1.removeEventListener = (removeEventListener => {\n      return (...args) => {\n        if (args[0] === 'message') {\n          const patchedEventListener = patchedEventListeners.get(args[1]);\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners.delete(args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    })(messageChannel.port1.removeEventListener);\n    let onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: () => onmessage,\n      set: value => {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n        onmessage = typeof value === 'function' ? value : null;\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    let audioWorkletProcessor = null;\n    const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(dWrkltPrcssr => audioWorkletProcessor = dWrkltPrcssr);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, {\n      name\n    }) => ({\n      ...prmtrs,\n      [name]: new Float32Array(128)\n    }), {});\n    let isActive = true;\n    const disconnectOutputsGraph = () => {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n      for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n        const outputChannelMergerNode = outputChannelMergerNodes[i];\n        for (let j = 0; j < outputChannelCount[i]; j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n        }\n        outputChannelSplitterNodeOutput += outputChannelCount[i];\n      }\n    };\n    const activeInputIndexes = new Map();\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer,\n      outputBuffer\n    }) => {\n      if (audioWorkletProcessor !== null) {\n        const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n        for (let i = 0; i < bufferSize; i += 128) {\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < options.channelCount; k += 1) {\n              copyFromChannel(inputBuffer, inputs[j], k, k, i);\n            }\n          }\n          if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(({\n              name\n            }, index) => {\n              copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n          }\n          for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n              // The byteLength will be 0 when the ArrayBuffer was transferred.\n              if (outputs[j][k].byteLength === 0) {\n                outputs[j][k] = new Float32Array(128);\n              }\n            }\n          }\n          try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n              const activeInput = activeInputs[index];\n              if (activeInput.size > 0) {\n                activeInputIndexes.set(index, bufferSize / 128);\n                return input;\n              }\n              const count = activeInputIndexes.get(index);\n              if (count === undefined) {\n                return [];\n              }\n              if (input.every(channelData => channelData.every(sample => sample === 0))) {\n                if (count === 1) {\n                  activeInputIndexes.delete(index);\n                } else {\n                  activeInputIndexes.set(index, count - 1);\n                }\n              }\n              return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            isActive = activeSourceFlag;\n            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n              for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n              }\n              outputChannelSplitterNodeOutput += outputChannelCount[j];\n            }\n          } catch (error) {\n            isActive = false;\n            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n              colno: error.colno,\n              filename: error.filename,\n              lineno: error.lineno,\n              message: error.message\n            }));\n          }\n          if (!isActive) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n              for (let k = 0; k < options.channelCount; k += 1) {\n                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n              }\n            }\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              const length = processorConstructor.parameterDescriptors.length;\n              for (let j = 0; j < length; j += 1) {\n                const constantSourceNode = constantSourceNodes[j];\n                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                constantSourceNode.stop();\n              }\n            }\n            inputChannelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n            if (isConnected) {\n              disconnectOutputsGraph();\n            } else {\n              disconnectFakeGraph();\n            }\n            break;\n          }\n        }\n      }\n    };\n    let isConnected = false;\n    // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    const nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n    const disconnectFakeGraph = () => {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n    const whenConnected = () => {\n      if (isActive) {\n        disconnectFakeGraph();\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n          const outputChannelMergerNode = outputChannelMergerNodes[i];\n          for (let j = 0; j < outputChannelCount[i]; j += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n          }\n          outputChannelSplitterNodeOutput += outputChannelCount[i];\n        }\n      }\n      isConnected = true;\n    };\n    const whenDisconnected = () => {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n      isConnected = false;\n    };\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNode = (nativeContext, options) => {\n  const nativeBiquadFilterNode = nativeContext.createBiquadFilter();\n  assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n  assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n  assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n  return nativeBiquadFilterNode;\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode) => {\n  return (nativeContext, options) => {\n    const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);\n    /*\n     * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here.\n     */\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n      wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n    }\n    assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n    return nativeChannelMergerNode;\n  };\n};\n", "import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = channelSplitterNode => {\n  const channelCount = channelSplitterNode.numberOfOutputs;\n  // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n  Object.defineProperty(channelSplitterNode, 'channelCount', {\n    get: () => channelCount,\n    set: value => {\n      if (value !== channelCount) {\n        throw createInvalidStateError();\n      }\n    }\n  });\n  // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.\n  Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n    get: () => 'explicit',\n    set: value => {\n      if (value !== 'explicit') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n  // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.\n  Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n    get: () => 'discrete',\n    set: value => {\n      if (value !== 'discrete') {\n        throw createInvalidStateError();\n      }\n    }\n  });\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNode = (nativeContext, options) => {\n  const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);\n  // Bug #96: Safari does not have the correct channelCount.\n  // Bug #29: Safari does not have the correct channelCountMode.\n  // Bug #31: Safari does not have the correct channelInterpretation.\n  assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n  // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge & Firefox partially support the spec yet.\n  wrapChannelSplitterNode(nativeChannelSplitterNode);\n  return nativeChannelSplitterNode;\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n  return (nativeContext, options) => {\n    // Bug #62: Safari does not support ConstantSourceNodes.\n    if (nativeContext.createConstantSource === undefined) {\n      return createNativeConstantSourceNodeFaker(nativeContext, options);\n    }\n    const nativeConstantSourceNode = nativeContext.createConstantSource();\n    assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n    // Bug #44: Safari does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n    }\n    // Bug #44: Only Firefox does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n    }\n    // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.\n    addSilentConnection(nativeContext, nativeConstantSourceNode);\n    return nativeConstantSourceNode;\n  };\n};\n", "export const interceptConnections = (original, interceptor) => {\n  original.connect = interceptor.connect.bind(interceptor);\n  original.disconnect = interceptor.disconnect.bind(interceptor);\n  return original;\n};\n", "import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n  return (nativeContext, {\n    offset,\n    ...audioNodeOptions\n  }) => {\n    const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    const gainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: offset\n    });\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    const channelData = audioBuffer.getChannelData(0);\n    // Bug #95: Safari does not play or loop one sample buffers.\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    const nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n      get context() {\n        return gainNode.context;\n      },\n      get inputs() {\n        return [];\n      },\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n      get offset() {\n        return gainNode.gain;\n      },\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n      addEventListener(...args) {\n        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return audioBufferSourceNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n      },\n      start(when = 0) {\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n      stop(when = 0) {\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n    };\n    const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n    // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};\n", "import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeConvolverNode = nativeContext.createConvolver();\n    assignNativeAudioNodeOptions(nativeConvolverNode, options);\n    // The normalize property needs to be set before setting the buffer.\n    if (options.disableNormalization === nativeConvolverNode.normalize) {\n      nativeConvolverNode.normalize = !options.disableNormalization;\n    }\n    assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n    // Bug #113: Safari does allow to set the channelCount to a value larger than 2.\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n    overwriteAccessors(nativeConvolverNode, 'channelCount', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value > 2) {\n        throw createNotSupportedError();\n      }\n      return set.call(nativeConvolverNode, value);\n    });\n    // Bug #114: Safari allows to set the channelCountMode to 'max'.\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    overwriteAccessors(nativeConvolverNode, 'channelCountMode', get => () => get.call(nativeConvolverNode), set => value => {\n      if (value === 'max') {\n        throw createNotSupportedError();\n      }\n      return set.call(nativeConvolverNode, value);\n    });\n    return nativeConvolverNode;\n  };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNode = (nativeContext, options) => {\n  const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);\n  assignNativeAudioNodeOptions(nativeDelayNode, options);\n  assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n  return nativeDelayNode;\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = createNotSupportedError => {\n  return (nativeContext, options) => {\n    const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();\n    assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n    // Bug #108: Safari allows a channelCount of three and above.\n    if (options.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n    // Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max'.\n    if (options.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n    assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n    return nativeDynamicsCompressorNode;\n  };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNode = (nativeContext, options) => {\n  const nativeGainNode = nativeContext.createGain();\n  assignNativeAudioNodeOptions(nativeGainNode, options);\n  assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n  return nativeGainNode;\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = createNativeIIRFilterNodeFaker => {\n  return (nativeContext, baseLatency, options) => {\n    // Bug #9: Safari does not support IIRFilterNodes.\n    if (nativeContext.createIIRFilter === undefined) {\n      return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n    }\n    // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n    const nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);\n    assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n    return nativeIIRFilterNode;\n  };\n};\n", "import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n  const denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\nfunction evaluatePolynomial(coefficient, z) {\n  let result = [0, 0];\n  for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n  return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n  return (nativeContext, baseLatency, {\n    channelCount,\n    channelCountMode,\n    channelInterpretation,\n    feedback,\n    feedforward\n  }) => {\n    const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (feedbackLength === 0 || feedbackLength > 20) {\n      throw createNotSupportedError();\n    }\n    if (convertedFeedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n    if (feedforwardLength === 0 || feedforwardLength > 20) {\n      throw createNotSupportedError();\n    }\n    if (convertedFeedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n    if (convertedFeedback[0] !== 1) {\n      for (let i = 0; i < feedforwardLength; i += 1) {\n        convertedFeedforward[i] /= convertedFeedback[0];\n      }\n      for (let i = 1; i < feedbackLength; i += 1) {\n        convertedFeedback[i] /= convertedFeedback[0];\n      }\n    }\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    const bufferLength = 32;\n    const bufferIndexes = [];\n    const xBuffers = [];\n    const yBuffers = [];\n    for (let i = 0; i < channelCount; i += 1) {\n      bufferIndexes.push(0);\n      const xBuffer = new Float32Array(bufferLength);\n      const yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    }\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = event => {\n      const inputBuffer = event.inputBuffer;\n      const outputBuffer = event.outputBuffer;\n      const numberOfChannels = inputBuffer.numberOfChannels;\n      for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = inputBuffer.getChannelData(i);\n        const output = outputBuffer.getChannelData(i);\n        bufferIndexes[i] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n      }\n    };\n    const nyquist = nativeContext.sampleRate / 2;\n    const nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n      get context() {\n        return scriptProcessorNode.context;\n      },\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n      addEventListener(...args) {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return scriptProcessorNode.dispatchEvent(args[0]);\n      },\n      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n        const length = frequencyHz.length;\n        for (let i = 0; i < length; i += 1) {\n          const omega = -Math.PI * (frequencyHz[i] / nyquist);\n          const z = [Math.cos(omega), Math.sin(omega)];\n          const numerator = evaluatePolynomial(convertedFeedforward, z);\n          const denominator = evaluatePolynomial(convertedFeedback, z);\n          const response = divide(numerator, denominator);\n          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[i] = Math.atan2(response[1], response[0]);\n        }\n      },\n      removeEventListener(...args) {\n        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};\n", "export const createNativeMediaElementAudioSourceNode = (nativeAudioContext, options) => {\n  return nativeAudioContext.createMediaElementSource(options.mediaElement);\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeMediaStreamAudioDestinationNode = (nativeAudioContext, options) => {\n  const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();\n  assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options);\n  // Bug #174: Safari does expose a wrong numberOfOutputs.\n  if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n    Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {\n      get: () => 0\n    });\n  }\n  return nativeMediaStreamAudioDestinationNode;\n};\n", "export const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, {\n  mediaStream\n}) => {\n  const audioStreamTracks = mediaStream.getAudioTracks();\n  /*\n   * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n   * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n   */\n  audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);\n  const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n  const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n  /*\n   * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n   * to be overwritten as it would otherwise expose the reconstructed version.\n   */\n  Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {\n    value: mediaStream\n  });\n  return nativeMediaStreamAudioSourceNode;\n};\n", "export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, isNativeOfflineAudioContext) => {\n  return (nativeAudioContext, {\n    mediaStreamTrack\n  }) => {\n    // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n    if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n      return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);\n    }\n    const mediaStream = new MediaStream([mediaStreamTrack]);\n    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);\n    // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n    if (mediaStreamTrack.kind !== 'audio') {\n      throw createInvalidStateError();\n    }\n    // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n    if (isNativeOfflineAudioContext(nativeAudioContext)) {\n      throw new TypeError();\n    }\n    return nativeMediaStreamAudioSourceNode;\n  };\n};\n", "export const createNativeOfflineAudioContextConstructor = window => {\n  if (window === null) {\n    return null;\n  }\n  if (window.hasOwnProperty('OfflineAudioContext')) {\n    return window.OfflineAudioContext;\n  }\n  return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n  return (nativeContext, options) => {\n    const nativeOscillatorNode = nativeContext.createOscillator();\n    assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n    if (options.periodicWave !== undefined) {\n      nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n    } else {\n      assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n    }\n    // Bug #44: Only Chrome & Edge throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n    }\n    // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n    }\n    // Bug #44: Only Firefox does not throw a RangeError yet.\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n    }\n    // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n    addSilentConnection(nativeContext, nativeOscillatorNode);\n    return nativeOscillatorNode;\n  };\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = createNativePannerNodeFaker => {\n  return (nativeContext, options) => {\n    const nativePannerNode = nativeContext.createPanner();\n    // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n    if (nativePannerNode.orientationX === undefined) {\n      return createNativePannerNodeFaker(nativeContext, options);\n    }\n    assignNativeAudioNodeOptions(nativePannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n    assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n    assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n    return nativePannerNode;\n  };\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {\n  return (nativeContext, {\n    coneInnerAngle,\n    coneOuterAngle,\n    coneOuterGain,\n    distanceModel,\n    maxDistance,\n    orientationX,\n    orientationY,\n    orientationZ,\n    panningModel,\n    positionX,\n    positionY,\n    positionZ,\n    refDistance,\n    rolloffFactor,\n    ...audioNodeOptions\n  }) => {\n    const pannerNode = nativeContext.createPanner();\n    // Bug #125: Safari does not throw an error yet.\n    if (audioNodeOptions.channelCount > 2) {\n      throw createNotSupportedError();\n    }\n    // Bug #126: Safari does not throw an error yet.\n    if (audioNodeOptions.channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n    const SINGLE_CHANNEL_OPTIONS = {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete'\n    };\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      channelInterpretation: 'speakers',\n      numberOfInputs: 6\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: 1\n    });\n    const orientationXGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 1\n    });\n    const orientationYGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const orientationZGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionXGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionYGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const positionZGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n    const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      curve: new Float32Array([1, 1]),\n      oversample: 'none'\n    });\n    let lastOrientation = [orientationX, orientationY, orientationZ];\n    let lastPosition = [positionX, positionY, positionZ];\n    const buffer = new Float32Array(1);\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = ({\n      inputBuffer\n    }) => {\n      const orientation = [getFirstSample(inputBuffer, buffer, 0), getFirstSample(inputBuffer, buffer, 1), getFirstSample(inputBuffer, buffer, 2)];\n      if (orientation.some((value, index) => value !== lastOrientation[index])) {\n        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n        lastOrientation = orientation;\n      }\n      const positon = [getFirstSample(inputBuffer, buffer, 3), getFirstSample(inputBuffer, buffer, 4), getFirstSample(inputBuffer, buffer, 5)];\n      if (positon.some((value, index) => value !== lastPosition[index])) {\n        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n        lastPosition = positon;\n      }\n    };\n    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    const nativePannerNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return pannerNode.channelCount;\n      },\n      set channelCount(value) {\n        // Bug #125: Safari does not throw an error yet.\n        if (value > 2) {\n          throw createNotSupportedError();\n        }\n        inputGainNode.channelCount = value;\n        pannerNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return pannerNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        // Bug #126: Safari does not throw an error yet.\n        if (value === 'max') {\n          throw createNotSupportedError();\n        }\n        inputGainNode.channelCountMode = value;\n        pannerNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return pannerNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        pannerNode.channelInterpretation = value;\n      },\n      get coneInnerAngle() {\n        return pannerNode.coneInnerAngle;\n      },\n      set coneInnerAngle(value) {\n        pannerNode.coneInnerAngle = value;\n      },\n      get coneOuterAngle() {\n        return pannerNode.coneOuterAngle;\n      },\n      set coneOuterAngle(value) {\n        pannerNode.coneOuterAngle = value;\n      },\n      get coneOuterGain() {\n        return pannerNode.coneOuterGain;\n      },\n      set coneOuterGain(value) {\n        // Bug #127: Safari does not throw an InvalidStateError yet.\n        if (value < 0 || value > 1) {\n          throw createInvalidStateError();\n        }\n        pannerNode.coneOuterGain = value;\n      },\n      get context() {\n        return pannerNode.context;\n      },\n      get distanceModel() {\n        return pannerNode.distanceModel;\n      },\n      set distanceModel(value) {\n        pannerNode.distanceModel = value;\n      },\n      get inputs() {\n        return [inputGainNode];\n      },\n      get maxDistance() {\n        return pannerNode.maxDistance;\n      },\n      set maxDistance(value) {\n        // Bug #128: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n        pannerNode.maxDistance = value;\n      },\n      get numberOfInputs() {\n        return pannerNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return pannerNode.numberOfOutputs;\n      },\n      get orientationX() {\n        return orientationXGainNode.gain;\n      },\n      get orientationY() {\n        return orientationYGainNode.gain;\n      },\n      get orientationZ() {\n        return orientationZGainNode.gain;\n      },\n      get panningModel() {\n        return pannerNode.panningModel;\n      },\n      set panningModel(value) {\n        pannerNode.panningModel = value;\n      },\n      get positionX() {\n        return positionXGainNode.gain;\n      },\n      get positionY() {\n        return positionYGainNode.gain;\n      },\n      get positionZ() {\n        return positionZGainNode.gain;\n      },\n      get refDistance() {\n        return pannerNode.refDistance;\n      },\n      set refDistance(value) {\n        // Bug #129: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n        pannerNode.refDistance = value;\n      },\n      get rolloffFactor() {\n        return pannerNode.rolloffFactor;\n      },\n      set rolloffFactor(value) {\n        // Bug #130: Safari does not throw an error yet.\n        if (value < 0) {\n          throw new RangeError();\n        }\n        pannerNode.rolloffFactor = value;\n      },\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n    }\n    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n    }\n    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n      nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n    }\n    if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n      nativePannerNodeFaker.distanceModel = distanceModel;\n    }\n    if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n      nativePannerNodeFaker.maxDistance = maxDistance;\n    }\n    if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n      nativePannerNodeFaker.orientationX.value = orientationX;\n    }\n    if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n      nativePannerNodeFaker.orientationY.value = orientationY;\n    }\n    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n      nativePannerNodeFaker.orientationZ.value = orientationZ;\n    }\n    if (panningModel !== nativePannerNodeFaker.panningModel) {\n      nativePannerNodeFaker.panningModel = panningModel;\n    }\n    if (positionX !== nativePannerNodeFaker.positionX.value) {\n      nativePannerNodeFaker.positionX.value = positionX;\n    }\n    if (positionY !== nativePannerNodeFaker.positionY.value) {\n      nativePannerNodeFaker.positionY.value = positionY;\n    }\n    if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n      nativePannerNodeFaker.positionZ.value = positionZ;\n    }\n    if (refDistance !== nativePannerNodeFaker.refDistance) {\n      nativePannerNodeFaker.refDistance = refDistance;\n    }\n    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n      nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n    }\n    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n    }\n    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n    }\n    const whenConnected = () => {\n      inputGainNode.connect(pannerNode);\n      // Bug #119: Safari does not fully support the WaveShaperNode.\n      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n    };\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(pannerNode);\n      // Bug #119: Safari does not fully support the WaveShaperNode.\n      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n      waveShaperNode.disconnect(orientationXGainNode);\n      orientationXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationYGainNode);\n      orientationYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(orientationZGainNode);\n      orientationZGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionXGainNode);\n      positionXGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionYGainNode);\n      positionYGainNode.disconnect(channelMergerNode);\n      waveShaperNode.disconnect(positionZGainNode);\n      positionZGainNode.disconnect(channelMergerNode);\n      channelMergerNode.disconnect(scriptProcessorNode);\n      scriptProcessorNode.disconnect(nativeContext.destination);\n    };\n    return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n  };\n};\n", "export const createNativePeriodicWaveFactory = createIndexSizeError => {\n  return (nativeContext, {\n    disableNormalization,\n    imag,\n    real\n  }) => {\n    // Bug #180: Safari does not allow to use ordinary arrays.\n    const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);\n    const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);\n    const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, {\n      disableNormalization\n    });\n    // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.\n    if (Array.from(imag).length < 2) {\n      throw createIndexSizeError();\n    }\n    return nativePeriodicWave;\n  };\n};\n", "export const createNativeScriptProcessorNode = (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n  return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels); // tslint:disable-line deprecation\n};\n", "import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n  return (nativeContext, options) => {\n    const channelCountMode = options.channelCountMode;\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n    if (channelCountMode === 'clamped-max') {\n      throw createNotSupportedError();\n    }\n    // Bug #105: Safari does not support the StereoPannerNode.\n    if (nativeContext.createStereoPanner === undefined) {\n      return createNativeStereoPannerNodeFaker(nativeContext, options);\n    }\n    const nativeStereoPannerNode = nativeContext.createStereoPanner();\n    assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n    /*\n     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n     * which supports it and therefore it can't be supported at all.\n     */\n    Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n      get: () => channelCountMode,\n      set: value => {\n        if (value !== channelCountMode) {\n          throw createNotSupportedError();\n        }\n      }\n    });\n    return nativeStereoPannerNode;\n  };\n};\n", "import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  const CURVE_SIZE = 16385;\n  const DC_CURVE = new Float32Array([1, 1]);\n  const HALF_PI = Math.PI / 2;\n  const SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = {\n    ...SINGLE_CHANNEL_OPTIONS,\n    oversample: 'none'\n  };\n  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      const x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n    const leftGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftWaveShaperCurve\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    const centerIndex = Math.floor(CURVE_SIZE / 2);\n    for (let i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n      }\n    }\n    const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForLeftOutputWaveShaperCurve\n    });\n    const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: leftInputForRightOutputWaveShaperCurve\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: DC_CURVE\n    });\n    const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForLeftOutputWaveShaperCurve\n    });\n    const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, {\n      ...SINGLE_CHANNEL_OPTIONS,\n      gain: 0\n    });\n    // Bug #119: Safari does not fully support the WaveShaperNode.\n    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n      ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n      curve: rightInputForRightOutputWaveShaperCurve\n    });\n    return {\n      connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n    throw createNotSupportedError();\n  };\n  return (nativeContext, {\n    channelCount,\n    channelCountMode,\n    pan,\n    ...audioNodeOptions\n  }) => {\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n    const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      ...audioNodeOptions,\n      channelCount: 1,\n      channelCountMode,\n      numberOfInputs: 2\n    });\n    const inputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      channelCount,\n      channelCountMode,\n      gain: 1\n    });\n    const panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n    let {\n      connectGraph,\n      disconnectGraph\n    } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: () => 0\n    });\n    Object.defineProperty(panGainNode.gain, 'maxValue', {\n      get: () => 1\n    });\n    Object.defineProperty(panGainNode.gain, 'minValue', {\n      get: () => -1\n    });\n    const nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n          ({\n            connectGraph,\n            disconnectGraph\n          } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n        inputGainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n        inputGainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n      get context() {\n        return inputGainNode.context;\n      },\n      get inputs() {\n        return [inputGainNode];\n      },\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n      get pan() {\n        return panGainNode.gain;\n      },\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    let isConnected = false;\n    const whenConnected = () => {\n      connectGraph();\n      isConnected = true;\n    };\n    const whenDisconnected = () => {\n      disconnectGraph();\n      isConnected = false;\n    };\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};\n", "import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) => {\n  return (nativeContext, options) => {\n    const nativeWaveShaperNode = nativeContext.createWaveShaper();\n    /*\n     * Bug #119: Safari does not correctly map the values.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n     * isn't necessary anymore since v14.0.2 of Safari.\n     */\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    }\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n    // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    }\n    // Only values of type Float32Array can be assigned to the curve property.\n    assignNativeAudioNodeOption(nativeWaveShaperNode, {\n      curve\n    }, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {\n      set.call(nativeWaveShaperNode, value);\n      if (isConnected) {\n        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n          disconnectNativeAudioBufferSourceNode();\n          disconnectNativeAudioBufferSourceNode = null;\n        }\n      }\n      return value;\n    });\n    const whenConnected = () => {\n      isConnected = true;\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n    const whenDisconnected = () => {\n      isConnected = false;\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};\n", "import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) => {\n  return (nativeContext, {\n    curve,\n    oversample,\n    ...audioNodeOptions\n  }) => {\n    const negativeWaveShaperNode = nativeContext.createWaveShaper();\n    const positiveWaveShaperNode = nativeContext.createWaveShaper();\n    assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n    assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n    const inputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: 1\n    });\n    const invertGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: -1\n    });\n    const outputGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: 1\n    });\n    const revertGainNode = createNativeGainNode(nativeContext, {\n      ...audioNodeOptions,\n      gain: -1\n    });\n    let disconnectNativeAudioBufferSourceNode = null;\n    let isConnected = false;\n    let unmodifiedCurve = null;\n    const nativeWaveShaperNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n      get channelCount() {\n        return negativeWaveShaperNode.channelCount;\n      },\n      set channelCount(value) {\n        inputGainNode.channelCount = value;\n        invertGainNode.channelCount = value;\n        negativeWaveShaperNode.channelCount = value;\n        outputGainNode.channelCount = value;\n        positiveWaveShaperNode.channelCount = value;\n        revertGainNode.channelCount = value;\n      },\n      get channelCountMode() {\n        return negativeWaveShaperNode.channelCountMode;\n      },\n      set channelCountMode(value) {\n        inputGainNode.channelCountMode = value;\n        invertGainNode.channelCountMode = value;\n        negativeWaveShaperNode.channelCountMode = value;\n        outputGainNode.channelCountMode = value;\n        positiveWaveShaperNode.channelCountMode = value;\n        revertGainNode.channelCountMode = value;\n      },\n      get channelInterpretation() {\n        return negativeWaveShaperNode.channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        invertGainNode.channelInterpretation = value;\n        negativeWaveShaperNode.channelInterpretation = value;\n        outputGainNode.channelInterpretation = value;\n        positiveWaveShaperNode.channelInterpretation = value;\n        revertGainNode.channelInterpretation = value;\n      },\n      get context() {\n        return negativeWaveShaperNode.context;\n      },\n      get curve() {\n        return unmodifiedCurve;\n      },\n      set curve(value) {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        if (value !== null && value.length < 2) {\n          throw createInvalidStateError();\n        }\n        if (value === null) {\n          negativeWaveShaperNode.curve = value;\n          positiveWaveShaperNode.curve = value;\n        } else {\n          const curveLength = value.length;\n          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          negativeCurve[0] = value[0];\n          positiveCurve[0] = -value[curveLength - 1];\n          const length = Math.ceil((curveLength + 1) / 2);\n          const centerIndex = (curveLength + 1) / 2 - 1;\n          for (let i = 1; i < length; i += 1) {\n            const theoreticIndex = i / length * centerIndex;\n            const lowerIndex = Math.floor(theoreticIndex);\n            const upperIndex = Math.ceil(theoreticIndex);\n            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n          }\n          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n          negativeWaveShaperNode.curve = negativeCurve;\n          positiveWaveShaperNode.curve = positiveCurve;\n        }\n        unmodifiedCurve = value;\n        if (isConnected) {\n          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n          } else if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n      },\n      get inputs() {\n        return [inputGainNode];\n      },\n      get numberOfInputs() {\n        return negativeWaveShaperNode.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return negativeWaveShaperNode.numberOfOutputs;\n      },\n      get oversample() {\n        return negativeWaveShaperNode.oversample;\n      },\n      set oversample(value) {\n        negativeWaveShaperNode.oversample = value;\n        positiveWaveShaperNode.oversample = value;\n      },\n      addEventListener(...args) {\n        return inputGainNode.addEventListener(args[0], args[1], args[2]);\n      },\n      dispatchEvent(...args) {\n        return inputGainNode.dispatchEvent(args[0]);\n      },\n      removeEventListener(...args) {\n        return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n      }\n    };\n    if (curve !== null) {\n      // Only values of type Float32Array can be assigned to the curve property.\n      nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n    }\n    if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n      nativeWaveShaperNodeFaker.oversample = oversample;\n    }\n    const whenConnected = () => {\n      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n      isConnected = true;\n      if (isDCCurve(unmodifiedCurve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n      }\n    };\n    const whenDisconnected = () => {\n      inputGainNode.disconnect(negativeWaveShaperNode);\n      negativeWaveShaperNode.disconnect(outputGainNode);\n      inputGainNode.disconnect(invertGainNode);\n      invertGainNode.disconnect(positiveWaveShaperNode);\n      positiveWaveShaperNode.disconnect(revertGainNode);\n      revertGainNode.disconnect(outputGainNode);\n      isConnected = false;\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n    return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n  };\n};\n", "export const createNotSupportedError = () => new DOMException('', 'NotSupportedError');\n", "import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n  return class OfflineAudioContext extends baseAudioContextConstructor {\n    constructor(a, b, c) {\n      let options;\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n      const {\n        length,\n        numberOfChannels,\n        sampleRate\n      } = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n      // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n      if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n        nativeOfflineAudioContext.addEventListener('statechange', (() => {\n          let i = 0;\n          const delayStateChangeEvent = event => {\n            if (this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n                this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n          return delayStateChangeEvent;\n        })());\n      }\n      super(nativeOfflineAudioContext, numberOfChannels);\n      this._length = length;\n      this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      this._state = null;\n    }\n    get length() {\n      // Bug #17: Safari does not yet expose the length.\n      if (this._nativeOfflineAudioContext.length === undefined) {\n        return this._length;\n      }\n      return this._nativeOfflineAudioContext.length;\n    }\n    get state() {\n      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n    }\n    startRendering() {\n      /*\n       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n       * the state of the nativeOfflineAudioContext might no transition to running immediately.\n       */\n      if (this._state === 'running') {\n        return Promise.reject(createInvalidStateError());\n      }\n      this._state = 'running';\n      return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n        this._state = null;\n        deactivateAudioGraph(this);\n      });\n    }\n    _waitForThePromiseToSettle(event) {\n      if (this._state === null) {\n        this._nativeOfflineAudioContext.dispatchEvent(event);\n      } else {\n        setTimeout(() => this._waitForThePromiseToSettle(event));\n      }\n    }\n  };\n};\n", "import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  // This attribute has no effect for nodes with no inputs.\n  channelInterpretation: 'speakers',\n  // This attribute has no effect for nodes with no inputs.\n  detune: 0,\n  frequency: 440,\n  periodicWave: undefined,\n  type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n  return class OscillatorNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;\n      const nyquist = context.sampleRate / 2;\n      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n      // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n      // Bug #76: Safari does not export the correct values for maxValue and minValue.\n      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n      this._nativeOscillatorNode = nativeOscillatorNode;\n      this._onended = null;\n      this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;\n      }\n    }\n    get detune() {\n      return this._detune;\n    }\n    get frequency() {\n      return this._frequency;\n    }\n    get onended() {\n      return this._onended;\n    }\n    set onended(value) {\n      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n      this._nativeOscillatorNode.onended = wrappedListener;\n      const nativeOnEnded = this._nativeOscillatorNode.onended;\n      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n    }\n    get type() {\n      return this._nativeOscillatorNode.type;\n    }\n    set type(value) {\n      this._nativeOscillatorNode.type = value;\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = null;\n      }\n    }\n    setPeriodicWave(periodicWave) {\n      this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.periodicWave = periodicWave;\n      }\n    }\n    start(when = 0) {\n      this._nativeOscillatorNode.start(when);\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.start = when;\n      }\n      if (this.context.state !== 'closed') {\n        setInternalStateToActive(this);\n        const resetInternalStateToPassive = () => {\n          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n          if (isActiveAudioNode(this)) {\n            setInternalStateToPassive(this);\n          }\n        };\n        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n      }\n    }\n    stop(when = 0) {\n      this._nativeOscillatorNode.stop(when);\n      if (this._oscillatorNodeRenderer !== null) {\n        this._oscillatorNodeRenderer.stop = when;\n      }\n    }\n  };\n};\n", "import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeOscillatorNodes = new WeakMap();\n    let periodicWave = null;\n    let start = null;\n    let stop = null;\n    const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeOscillatorNode = getNativeAudioNode(proxy);\n      // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeOscillatorNode.channelCount,\n          channelCountMode: nativeOscillatorNode.channelCountMode,\n          channelInterpretation: nativeOscillatorNode.channelInterpretation,\n          detune: nativeOscillatorNode.detune.value,\n          frequency: nativeOscillatorNode.frequency.value,\n          periodicWave: periodicWave === null ? undefined : periodicWave,\n          type: nativeOscillatorNode.type\n        };\n        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n        if (start !== null) {\n          nativeOscillatorNode.start(start);\n        }\n        if (stop !== null) {\n          nativeOscillatorNode.stop(stop);\n        }\n      }\n      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n      if (!nativeOscillatorNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n      }\n      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n      return nativeOscillatorNode;\n    };\n    return {\n      set periodicWave(value) {\n        periodicWave = value;\n      },\n      set start(value) {\n        start = value;\n      },\n      set stop(value) {\n        stop = value;\n      },\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeOscillatorNode !== undefined) {\n          return Promise.resolve(renderedNativeOscillatorNode);\n        }\n        return createOscillatorNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class PannerNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      super(context, false, nativePannerNode, pannerNodeRenderer);\n      this._nativePannerNode = nativePannerNode;\n      // Bug #74: Safari does not export the correct values for maxValue and minValue.\n      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get coneInnerAngle() {\n      return this._nativePannerNode.coneInnerAngle;\n    }\n    set coneInnerAngle(value) {\n      this._nativePannerNode.coneInnerAngle = value;\n    }\n    get coneOuterAngle() {\n      return this._nativePannerNode.coneOuterAngle;\n    }\n    set coneOuterAngle(value) {\n      this._nativePannerNode.coneOuterAngle = value;\n    }\n    get coneOuterGain() {\n      return this._nativePannerNode.coneOuterGain;\n    }\n    set coneOuterGain(value) {\n      this._nativePannerNode.coneOuterGain = value;\n    }\n    get distanceModel() {\n      return this._nativePannerNode.distanceModel;\n    }\n    set distanceModel(value) {\n      this._nativePannerNode.distanceModel = value;\n    }\n    get maxDistance() {\n      return this._nativePannerNode.maxDistance;\n    }\n    set maxDistance(value) {\n      this._nativePannerNode.maxDistance = value;\n    }\n    get orientationX() {\n      return this._orientationX;\n    }\n    get orientationY() {\n      return this._orientationY;\n    }\n    get orientationZ() {\n      return this._orientationZ;\n    }\n    get panningModel() {\n      return this._nativePannerNode.panningModel;\n    }\n    set panningModel(value) {\n      this._nativePannerNode.panningModel = value;\n    }\n    get positionX() {\n      return this._positionX;\n    }\n    get positionY() {\n      return this._positionY;\n    }\n    get positionZ() {\n      return this._positionZ;\n    }\n    get refDistance() {\n      return this._nativePannerNode.refDistance;\n    }\n    set refDistance(value) {\n      this._nativePannerNode.refDistance = value;\n    }\n    get rolloffFactor() {\n      return this._nativePannerNode.rolloffFactor;\n    }\n    set rolloffFactor(value) {\n      this._nativePannerNode.rolloffFactor = value;\n    }\n  };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n  return () => {\n    const renderedNativeAudioNodes = new WeakMap();\n    let renderedBufferPromise = null;\n    const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeGainNode = null;\n      let nativePannerNode = getNativeAudioNode(proxy);\n      const commonAudioNodeOptions = {\n        channelCount: nativePannerNode.channelCount,\n        channelCountMode: nativePannerNode.channelCountMode,\n        channelInterpretation: nativePannerNode.channelInterpretation\n      };\n      const commonNativePannerNodeOptions = {\n        ...commonAudioNodeOptions,\n        coneInnerAngle: nativePannerNode.coneInnerAngle,\n        coneOuterAngle: nativePannerNode.coneOuterAngle,\n        coneOuterGain: nativePannerNode.coneOuterGain,\n        distanceModel: nativePannerNode.distanceModel,\n        maxDistance: nativePannerNode.maxDistance,\n        panningModel: nativePannerNode.panningModel,\n        refDistance: nativePannerNode.refDistance,\n        rolloffFactor: nativePannerNode.rolloffFactor\n      };\n      // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n      // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n      if ('bufferSize' in nativePannerNode) {\n        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          ...commonAudioNodeOptions,\n          gain: 1\n        });\n      } else if (!nativePannerNodeIsOwnedByContext) {\n        const options = {\n          ...commonNativePannerNodeOptions,\n          orientationX: nativePannerNode.orientationX.value,\n          orientationY: nativePannerNode.orientationY.value,\n          orientationZ: nativePannerNode.orientationZ.value,\n          positionX: nativePannerNode.positionX.value,\n          positionY: nativePannerNode.positionY.value,\n          positionZ: nativePannerNode.positionZ.value\n        };\n        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n      if (nativeGainNode !== null) {\n        if (renderedBufferPromise === null) {\n          if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n          }\n          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6,\n          // Bug #17: Safari does not yet expose the length.\n          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n          });\n          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n          renderedBufferPromise = (async () => {\n            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {\n              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                offset: index === 0 ? 1 : 0\n              });\n              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n              return nativeConstantSourceNode;\n            }));\n            for (let i = 0; i < 6; i += 1) {\n              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n              nativeConstantSourceNodes[i].start(0);\n            }\n            return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n          })();\n        }\n        const renderedBuffer = await renderedBufferPromise;\n        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          ...commonAudioNodeOptions,\n          gain: 1\n        });\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n        const channelDatas = [];\n        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n          channelDatas.push(renderedBuffer.getChannelData(i));\n        }\n        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n          ...commonAudioNodeOptions,\n          gain: 1\n        });\n        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n          ...commonNativePannerNodeOptions,\n          orientationX: lastOrientation[0],\n          orientationY: lastOrientation[1],\n          orientationZ: lastOrientation[2],\n          positionX: lastPosition[0],\n          positionY: lastPosition[1],\n          positionZ: lastPosition[2]\n        });\n        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n        partialPannerNode.connect(nativeGainNode);\n        for (let i = 128; i < renderedBuffer.length; i += 128) {\n          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {\n            lastOrientation = orientation;\n            lastPosition = positon;\n            const currentTime = i / nativeOfflineAudioContext.sampleRate;\n            gateGainNode.gain.setValueAtTime(0, currentTime);\n            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n              ...commonAudioNodeOptions,\n              gain: 0\n            });\n            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n              ...commonNativePannerNodeOptions,\n              orientationX: lastOrientation[0],\n              orientationY: lastOrientation[1],\n              orientationZ: lastOrientation[2],\n              positionX: lastPosition[0],\n              positionY: lastPosition[1],\n              positionZ: lastPosition[2]\n            });\n            gateGainNode.gain.setValueAtTime(1, currentTime);\n            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n            partialPannerNode.connect(nativeGainNode);\n          }\n        }\n        return nativeGainNode;\n      }\n      if (!nativePannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n      }\n      if (isNativeAudioNodeFaker(nativePannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n      }\n      return nativePannerNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "const DEFAULT_OPTIONS = {\n  disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions) => {\n  return class PeriodicWave {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = sanitizePeriodicWaveOptions({\n        ...DEFAULT_OPTIONS,\n        ...options\n      });\n      const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n      periodicWaveStore.add(periodicWave);\n      // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n      return periodicWave;\n    }\n    static [Symbol.hasInstance](instance) {\n      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);\n    }\n  };\n};\n", "export const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n  return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n    const audioParamRenderer = getAudioParamRenderer(audioParam);\n    audioParamRenderer.replay(nativeAudioParam);\n    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n  };\n};\n", "export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n    const audioNodeConnections = getAudioNodeConnections(audioNode);\n    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n      const destination = audioNode.context.destination;\n      if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n        renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n      }\n    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n  };\n};\n", "export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n    const audioParamConnections = getAudioParamConnections(audioParam);\n    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n      const audioNodeRenderer = getAudioNodeRenderer(source);\n      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n      if (!isPartOfACycle(source)) {\n        renderedNativeAudioNode.connect(nativeAudioParam, output);\n      }\n    }));\n  };\n};\n", "import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n  return nativeOfflineAudioContext => {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n      // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n          nativeOfflineAudioContext.oncomplete = () => {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n            scriptProcessorNode.disconnect();\n          };\n          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n    return new Promise(resolve => {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n      nativeOfflineAudioContext.oncomplete = event => {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};\n", "export const createSetActiveAudioWorkletNodeInputs = activeAudioWorkletNodeInputsStore => {\n  return (nativeAudioWorkletNode, activeInputs) => {\n    activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);\n  };\n};\n", "export const createSetAudioNodeTailTime = audioNodeTailTimeStore => {\n  return (audioNode, tailTime) => audioNodeTailTimeStore.set(audioNode, tailTime);\n};\n", "import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n  /*\n   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n   * destination.\n   */.then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n    if (typeof audioBuffer.copyFromChannel !== 'function') {\n      wrapAudioBufferCopyChannelMethods(audioBuffer);\n      wrapAudioBufferGetChannelDataMethod(audioBuffer);\n      // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n    }\n    audioBufferStore.add(audioBuffer);\n    return audioBuffer;\n  });\n};\n", "const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  /*\n   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n   * behavior.\n   */\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  pan: 0\n};\nexport const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n  return class StereoPannerNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;\n      super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n      this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);\n    }\n    get pan() {\n      return this._pan;\n    }\n  };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeStereoPannerNodes = new WeakMap();\n    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeStereoPannerNode = getNativeAudioNode(proxy);\n      /*\n       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n       * again.\n       */\n      const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeStereoPannerNode.channelCount,\n          channelCountMode: nativeStereoPannerNode.channelCountMode,\n          channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n          pan: nativeStereoPannerNode.pan.value\n        };\n        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n      if (!nativeStereoPannerNodeIsOwnedByContext) {\n        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n      } else {\n        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n      }\n      if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n      }\n      return nativeStereoPannerNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "// Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = nativeAudioBufferConstructor => {\n  return () => {\n    if (nativeAudioBufferConstructor === null) {\n      return false;\n    }\n    try {\n      new nativeAudioBufferConstructor({\n        length: 1,\n        sampleRate: 44100\n      }); // tslint:disable-line:no-unused-expression\n    } catch {\n      return false;\n    }\n    return true;\n  };\n};\n", "/*\n * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods\n * is enough to know if the other one is supported as well.\n */\nexport const createTestAudioBufferCopyChannelMethodsSubarraySupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100);\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    if (nativeAudioBuffer.copyToChannel === undefined) {\n      return true;\n    }\n    const source = new Float32Array(2);\n    try {\n      nativeAudioBuffer.copyFromChannel(source, 0, 0);\n    } catch {\n      return false;\n    }\n    return true;\n  };\n};\n", "export const createTestAudioContextCloseMethodSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n    // Try to check the prototype before constructing the AudioContext.\n    if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {\n      return true;\n    }\n    const audioContext = new nativeAudioContextConstructor();\n    const isAudioContextClosable = audioContext.close !== undefined;\n    try {\n      audioContext.close();\n    } catch {\n      // Ignore errors.\n    }\n    return isAudioContextClosable;\n  };\n};\n", "/**\n * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers\n * did not refuse to decode invalid parameters with a TypeError.\n */\nexport const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    // Bug #21: Safari does not support promises yet.\n    return new Promise(resolve => {\n      let isPending = true;\n      const resolvePromise = err => {\n        if (isPending) {\n          isPending = false;\n          offlineAudioContext.startRendering();\n          resolve(err instanceof TypeError);\n        }\n      };\n      let promise;\n      // Bug #26: Safari throws a synchronous error.\n      try {\n        promise = offlineAudioContext\n        // Bug #1: Safari requires a successCallback.\n        .decodeAudioData(null, () => {\n          // Ignore the success callback.\n        }, resolvePromise);\n      } catch (err) {\n        resolvePromise(err);\n      }\n      // Bug #21: Safari does not support promises yet.\n      if (promise !== undefined) {\n        // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.\n        promise.catch(resolvePromise);\n      }\n    });\n  };\n};\n", "export const createTestAudioContextOptionsSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n    let audioContext;\n    try {\n      audioContext = new nativeAudioContextConstructor({\n        latencyHint: 'balanced'\n      });\n    } catch {\n      return false;\n    }\n    audioContext.close();\n    return true;\n  };\n};\n", "// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.\nexport const createTestAudioNodeConnectMethodSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeGainNode = nativeOfflineAudioContext.createGain();\n    const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;\n    nativeGainNode.disconnect(nativeGainNode);\n    return isSupported;\n  };\n};\n", "/**\n * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was\n * enabled by default in version 66.\n */\nexport const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const blob = new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    const messageChannel = new MessageChannel();\n    // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isCallingProcess = false;\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      await new Promise(resolve => {\n        audioWorkletNode.port.onmessage = () => resolve();\n        audioWorkletNode.port.postMessage(messageChannel.port2, [messageChannel.port2]);\n      });\n      audioWorkletNode.port.onmessage = () => isCallingProcess = true;\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      isCallingProcess = await new Promise(resolve => {\n        messageChannel.port1.onmessage = ({\n          data\n        }) => resolve(data === 1);\n        messageChannel.port1.postMessage(0);\n      });\n    } catch {\n      // Ignore errors.\n    } finally {\n      messageChannel.port1.close();\n      URL.revokeObjectURL(url);\n    }\n    return isCallingProcess;\n  };\n};\n", "// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n  return async () => {\n    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n    if (nativeAudioWorkletNodeConstructor === null) {\n      return true;\n    }\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n      type: 'application/javascript; charset=utf-8'\n    });\n    // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n    const url = URL.createObjectURL(blob);\n    let isEmittingMessageEvents = false;\n    let isEmittingProcessorErrorEvents = false;\n    try {\n      await offlineAudioContext.audioWorklet.addModule(url);\n      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n        numberOfOutputs: 0\n      });\n      const oscillator = offlineAudioContext.createOscillator();\n      audioWorkletNode.port.onmessage = () => isEmittingMessageEvents = true;\n      audioWorkletNode.onprocessorerror = () => isEmittingProcessorErrorEvents = true;\n      oscillator.connect(audioWorkletNode);\n      oscillator.start(0);\n      await offlineAudioContext.startRendering();\n      // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n      await new Promise(resolve => setTimeout(resolve));\n    } catch {\n      // Ignore errors.\n    } finally {\n      URL.revokeObjectURL(url);\n    }\n    return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n  };\n};\n", "/**\n * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.\n */\nexport const createTestChannelMergerNodeChannelCountSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeChannelMergerNode = offlineAudioContext.createChannelMerger();\n    /**\n     * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support\n     * in other browsers.\n     */\n    if (nativeChannelMergerNode.channelCountMode === 'max') {\n      return true;\n    }\n    try {\n      nativeChannelMergerNode.channelCount = 2;\n    } catch {\n      return true;\n    }\n    return false;\n  };\n};\n", "export const createTestConstantSourceNodeAccurateSchedulingSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    // Bug #62: Safari does not support ConstantSourceNodes.\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return true;\n    }\n    const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();\n    /*\n     * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to\n     * the implementation of Firefox right now, but it could probably be done in a better way.\n     */\n    return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;\n  };\n};\n", "// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.\nexport const createTestConvolverNodeBufferReassignabilitySupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeConvolverNode = offlineAudioContext.createConvolver();\n    nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n    try {\n      nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);\n    } catch {\n      return false;\n    }\n    return true;\n  };\n};\n", "// Chrome up to version v80, Edge up to version v80 and Opera up to version v67 did not allow to set the channelCount property of a ConvolverNode to 1. They also did not allow to set the channelCountMode to 'explicit'.\nexport const createTestConvolverNodeChannelCountSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return false;\n    }\n    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    const nativeConvolverNode = offlineAudioContext.createConvolver();\n    try {\n      nativeConvolverNode.channelCount = 1;\n    } catch {\n      return false;\n    }\n    return true;\n  };\n};\n", "export const createTestIsSecureContextSupport = window => {\n  return () => window !== null && window.hasOwnProperty('isSecureContext');\n};\n", "// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.\nexport const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = nativeAudioContextConstructor => {\n  return () => {\n    if (nativeAudioContextConstructor === null) {\n      return false;\n    }\n    const audioContext = new nativeAudioContextConstructor();\n    try {\n      audioContext.createMediaStreamSource(new MediaStream());\n      return false;\n    } catch (err) {\n      return true;\n    } finally {\n      audioContext.close();\n    }\n  };\n};\n", "export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n    const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    // Bug #21: Safari does not support promises yet.\n    return new Promise(resolve => {\n      nativeOfflineAudioContext.oncomplete = () => {\n        gainNode.disconnect();\n        resolve(nativeOfflineAudioContext.currentTime !== 0);\n      };\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};\n", "/**\n * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.\n */\nexport const createTestStereoPannerNodeDefaultValueSupport = nativeOfflineAudioContextConstructor => {\n  return () => {\n    if (nativeOfflineAudioContextConstructor === null) {\n      return Promise.resolve(false);\n    }\n    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n    /*\n     * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does\n     * support the tested behaviour.\n     */\n    if (nativeOfflineAudioContext.createStereoPanner === undefined) {\n      return Promise.resolve(true);\n    }\n    // Bug #62: Safari does not support ConstantSourceNodes.\n    if (nativeOfflineAudioContext.createConstantSource === undefined) {\n      return Promise.resolve(true);\n    }\n    const constantSourceNode = nativeOfflineAudioContext.createConstantSource();\n    const stereoPanner = nativeOfflineAudioContext.createStereoPanner();\n    constantSourceNode.channelCount = 1;\n    constantSourceNode.offset.value = 1;\n    stereoPanner.channelCount = 1;\n    constantSourceNode.start();\n    constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);\n    return nativeOfflineAudioContext.startRendering().then(buffer => buffer.getChannelData(0)[0] !== 1);\n  };\n};\n", "export const createUnknownError = () => new DOMException('', 'UnknownError');\n", "const DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n  return class WaveShaperNode extends audioNodeConstructor {\n    constructor(context, options) {\n      const nativeContext = getNativeContext(context);\n      const mergedOptions = {\n        ...DEFAULT_OPTIONS,\n        ...options\n      };\n      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      const isOffline = isNativeOfflineAudioContext(nativeContext);\n      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null;\n      // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      this._isCurveNullified = false;\n      this._nativeWaveShaperNode = nativeWaveShaperNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(this, 1);\n    }\n    get curve() {\n      if (this._isCurveNullified) {\n        return null;\n      }\n      return this._nativeWaveShaperNode.curve;\n    }\n    set curve(value) {\n      // Bug #103: Safari does not allow to set the curve to null.\n      if (value === null) {\n        this._isCurveNullified = true;\n        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n      } else {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (value.length < 2) {\n          throw createInvalidStateError();\n        }\n        this._isCurveNullified = false;\n        this._nativeWaveShaperNode.curve = value;\n      }\n    }\n    get oversample() {\n      return this._nativeWaveShaperNode.oversample;\n    }\n    set oversample(value) {\n      this._nativeWaveShaperNode.oversample = value;\n    }\n  };\n};\n", "import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n  return () => {\n    const renderedNativeWaveShaperNodes = new WeakMap();\n    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n      let nativeWaveShaperNode = getNativeAudioNode(proxy);\n      // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n      const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n      if (!nativeWaveShaperNodeIsOwnedByContext) {\n        const options = {\n          channelCount: nativeWaveShaperNode.channelCount,\n          channelCountMode: nativeWaveShaperNode.channelCountMode,\n          channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n          curve: nativeWaveShaperNode.curve,\n          oversample: nativeWaveShaperNode.oversample\n        };\n        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n      }\n      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n      if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n      } else {\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n      }\n      return nativeWaveShaperNode;\n    };\n    return {\n      render(proxy, nativeOfflineAudioContext) {\n        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};\n", "export const createWindow = () => typeof window === 'undefined' ? null : window;\n", "export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n      const audioBufferLength = audioBuffer.length;\n      const channelData = audioBuffer.getChannelData(channelNumber);\n      const destinationLength = destination.length;\n      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n    audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n      const audioBufferLength = audioBuffer.length;\n      const channelData = audioBuffer.getChannelData(channelNumber);\n      const sourceLength = source.length;\n      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};\n", "export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {\n  return audioBuffer => {\n    audioBuffer.copyFromChannel = (copyFromChannel => {\n      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyFromChannel);\n    audioBuffer.copyToChannel = (copyToChannel => {\n      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n        if (bufferOffset < audioBuffer.length) {\n          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n        }\n      };\n    })(audioBuffer.copyToChannel);\n  };\n};\n", "export const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = overwriteAccessors => {\n  return (nativeAudioBufferSourceNode, nativeContext) => {\n    const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);\n    if (nativeAudioBufferSourceNode.buffer === null) {\n      nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n    }\n    overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', get => () => {\n      const value = get.call(nativeAudioBufferSourceNode);\n      return value === nullifiedBuffer ? null : value;\n    }, set => value => {\n      return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);\n    });\n  };\n};\n", "export const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {\n  return (nativeContext, channelMergerNode) => {\n    // Bug #15: Safari does not return the default properties.\n    channelMergerNode.channelCount = 1;\n    channelMergerNode.channelCountMode = 'explicit';\n    // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n    Object.defineProperty(channelMergerNode, 'channelCount', {\n      get: () => 1,\n      set: () => {\n        throw createInvalidStateError();\n      }\n    });\n    Object.defineProperty(channelMergerNode, 'channelCountMode', {\n      get: () => 'explicit',\n      set: () => {\n        throw createInvalidStateError();\n      }\n    });\n    // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n    const audioBufferSourceNode = nativeContext.createBufferSource();\n    const whenConnected = () => {\n      const length = channelMergerNode.numberOfInputs;\n      for (let i = 0; i < length; i += 1) {\n        audioBufferSourceNode.connect(channelMergerNode, 0, i);\n      }\n    };\n    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n    monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n  };\n};\n", "export const getFirstSample = (audioBuffer, buffer, channelNumber) => {\n  // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n  if (audioBuffer.copyFromChannel === undefined) {\n    return audioBuffer.getChannelData(channelNumber)[0];\n  }\n  audioBuffer.copyFromChannel(buffer, channelNumber);\n  return buffer[0];\n};\n", "export const isDCCurve = curve => {\n  if (curve === null) {\n    return false;\n  }\n  const length = curve.length;\n  if (length % 2 !== 0) {\n    return curve[Math.floor(length / 2)] !== 0;\n  }\n  return curve[length / 2 - 1] + curve[length / 2] !== 0;\n};\n", "export const overwriteAccessors = (object, property, createGetter, createSetter) => {\n  let prototype = object;\n  while (!prototype.hasOwnProperty(property)) {\n    prototype = Object.getPrototypeOf(prototype);\n  }\n  const {\n    get,\n    set\n  } = Object.getOwnPropertyDescriptor(prototype, property);\n  Object.defineProperty(object, property, {\n    get: createGetter(get),\n    set: createSetter(set)\n  });\n};\n", "export const sanitizeAudioWorkletNodeOptions = options => {\n  return {\n    ...options,\n    outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ?\n    /*\n     * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n     * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n     * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n     */\n    [options.channelCount] : Array.from({\n      length: options.numberOfOutputs\n    }, () => 1)\n  };\n};\n", "export const sanitizeChannelSplitterOptions = options => {\n  return {\n    ...options,\n    channelCount: options.numberOfOutputs\n  };\n};\n", "export const sanitizePeriodicWaveOptions = options => {\n  const {\n    imag,\n    real\n  } = options;\n  if (imag === undefined) {\n    if (real === undefined) {\n      return {\n        ...options,\n        imag: [0, 0],\n        real: [0, 0]\n      };\n    }\n    return {\n      ...options,\n      imag: Array.from(real, () => 0),\n      real\n    };\n  }\n  if (real === undefined) {\n    return {\n      ...options,\n      imag,\n      real: Array.from(imag, () => 0)\n    };\n  }\n  return {\n    ...options,\n    imag,\n    real\n  };\n};\n", "export const setValueAtTimeUntilPossible = (audioParam, value, startTime) => {\n  try {\n    audioParam.setValueAtTime(value, startTime);\n  } catch (err) {\n    if (err.code !== 9) {\n      throw err;\n    }\n    setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);\n  }\n};\n", "export const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = nativeContext => {\n  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n  nativeAudioBufferSourceNode.start();\n  try {\n    nativeAudioBufferSourceNode.start();\n  } catch {\n    return true;\n  }\n  return false;\n};\n", "export const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = nativeContext => {\n  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n  try {\n    nativeAudioBufferSourceNode.start(0, 1);\n  } catch {\n    return false;\n  }\n  return true;\n};\n", "export const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = nativeContext => {\n  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n  nativeAudioBufferSourceNode.start();\n  try {\n    nativeAudioBufferSourceNode.stop();\n  } catch {\n    return false;\n  }\n  return true;\n};\n", "export const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = nativeContext => {\n  const nativeAudioBufferSourceNode = nativeContext.createOscillator();\n  try {\n    nativeAudioBufferSourceNode.start(-1);\n  } catch (err) {\n    return err instanceof RangeError;\n  }\n  return false;\n};\n", "export const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = nativeContext => {\n  const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n  const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n  nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n  nativeAudioBufferSourceNode.start();\n  nativeAudioBufferSourceNode.stop();\n  try {\n    nativeAudioBufferSourceNode.stop();\n    return true;\n  } catch {\n    return false;\n  }\n};\n", "export const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = nativeContext => {\n  const nativeAudioBufferSourceNode = nativeContext.createOscillator();\n  try {\n    nativeAudioBufferSourceNode.stop(-1);\n  } catch (err) {\n    return err instanceof RangeError;\n  }\n  return false;\n};\n", "export const testAudioWorkletNodeOptionsClonability = audioWorkletNodeOptions => {\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n  try {\n    // This will throw an error if the audioWorkletNodeOptions are not clonable.\n    port1.postMessage(audioWorkletNodeOptions);\n  } finally {\n    port1.close();\n    port2.close();\n  }\n};\n", "/*\n * Bug #122: Edge up to version v18 did not allow to construct a DOMException'. It also had a couple more bugs but since this is easy to\n * test it's used here as a placeholder.\n *\n * Bug #27: Edge up to version v18 did reject an invalid arrayBuffer passed to decodeAudioData() with a DOMException.\n *\n * Bug #50: Edge up to version v18 did not allow to create AudioNodes on a closed context.\n *\n * Bug #57: Edge up to version v18 did not throw an error when assigning the type of an OscillatorNode to 'custom'.\n *\n * Bug #63: Edge up to version v18 did not expose the mediaElement property of a MediaElementAudioSourceNode.\n *\n * Bug #64: Edge up to version v18 did not support the MediaStreamAudioDestinationNode.\n *\n * Bug #71: Edge up to version v18 did not allow to set the buffer of an AudioBufferSourceNode to null.\n *\n * Bug #93: Edge up to version v18 did set the sampleRate of an AudioContext to zero when it was closed.\n *\n * Bug #101: Edge up to version v18 refused to execute decodeAudioData() on a closed context.\n *\n * Bug #106: Edge up to version v18 did not expose the maxValue and minValue properties of the pan AudioParam of a StereoPannerNode.\n *\n * Bug #110: Edge up to version v18 did not expose the maxValue and minValue properties of the attack, knee, ratio, release and threshold AudioParams of a DynamicsCompressorNode.\n *\n * Bug #123: Edge up to version v18 did not support HRTF as the panningModel for a PannerNode.\n *\n * Bug #145: Edge up to version v18 did throw an IndexSizeError when an OfflineAudioContext was created with a sampleRate of zero.\n *\n * Bug #161: Edge up to version v18 did not expose the maxValue and minValue properties of the delayTime AudioParam of a DelayNode.\n */\nexport const testDomExceptionConstructorSupport = () => {\n  try {\n    new DOMException(); // tslint:disable-line:no-unused-expression\n  } catch {\n    return false;\n  }\n  return true;\n};\n", "// Safari at version 11 did not support transferables.\nexport const testTransferablesSupport = () => new Promise(resolve => {\n  const arrayBuffer = new ArrayBuffer(0);\n  const {\n    port1,\n    port2\n  } = new MessageChannel();\n  port1.onmessage = ({\n    data\n  }) => resolve(data !== null);\n  port2.postMessage(arrayBuffer, [arrayBuffer]);\n});\n", "export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {\n  nativeAudioBufferSourceNode.start = (start => {\n    return (when = 0, offset = 0, duration) => {\n      const buffer = nativeAudioBufferSourceNode.buffer;\n      // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n      // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n        start.call(nativeAudioBufferSourceNode, when, 0, 0);\n      } else {\n        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n      }\n    };\n  })(nativeAudioBufferSourceNode.start);\n};\n", "import { interceptConnections } from './intercept-connections';\nexport const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {\n  const nativeGainNode = nativeContext.createGain();\n  nativeAudioScheduledSourceNode.connect(nativeGainNode);\n  const disconnectGainNode = (disconnect => {\n    return () => {\n      // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n      disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n    };\n  })(nativeAudioScheduledSourceNode.disconnect);\n  nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n  interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n  nativeAudioScheduledSourceNode.stop = (stop => {\n    let isStopped = false;\n    return (when = 0) => {\n      if (isStopped) {\n        try {\n          stop.call(nativeAudioScheduledSourceNode, when);\n        } catch {\n          nativeGainNode.gain.setValueAtTime(0, when);\n        }\n      } else {\n        stop.call(nativeAudioScheduledSourceNode, when);\n        isStopped = true;\n      }\n    };\n  })(nativeAudioScheduledSourceNode.stop);\n};\n", "export const wrapEventListener = (target, eventListener) => {\n  return event => {\n    const descriptor = {\n      value: target\n    };\n    Object.defineProperties(event, {\n      currentTarget: descriptor,\n      target: descriptor\n    });\n    if (typeof eventListener === 'function') {\n      return eventListener.call(target, event);\n    }\n    return eventListener.handleEvent.call(target, event);\n  };\n};\n", "import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = isSecureContext ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor),\n// @todo window is guaranteed to be defined because isSecureContext checks that as well.\nwindow) : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = isSecureContext ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n", "import { isUndef } from \"./TypeCheck.js\";\n/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value, gte, lte = Infinity) {\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n  }\n}\n/**\n * Warn if the context is not running.\n */\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn('The AudioContext is \"suspended\". Invoke Tone.start() from a user action to start the audio.');\n  }\n}\n/**\n * If it is currently inside a scheduled callback\n */\nlet isInsideScheduledCallback = false;\nlet printedScheduledWarning = false;\n/**\n * Notify that the following block of code is occurring inside a Transport callback.\n */\nexport function enterScheduledCallback(insideCallback) {\n  isInsideScheduledCallback = insideCallback;\n}\n/**\n * Make sure that a time was passed into\n */\nexport function assertUsedScheduleTime(time) {\n  if (isUndef(time) && isInsideScheduledCallback && !printedScheduledWarning) {\n    printedScheduledWarning = true;\n    warn(\"Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing\");\n  }\n}\n/**\n * The default logger is the console\n */\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\nexport function log(...args) {\n  defaultLogger.log(...args);\n}\n/**\n * Warn anything\n */\nexport function warn(...args) {\n  defaultLogger.warn(...args);\n}\n", "/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg) {\n  return arg === undefined;\n}\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined(arg) {\n  return arg !== undefined;\n}\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg) {\n  return typeof arg === \"number\";\n}\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg) {\n  return Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object;\n}\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg) {\n  return typeof arg === \"boolean\";\n}\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg) {\n  return Array.isArray(arg);\n}\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg) {\n  return typeof arg === \"string\";\n}\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg) {\n  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n", "import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options) {\n  return new stdAudioContext(options);\n}\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n  return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow && (theWindow.hasOwnProperty(\"AudioContext\") || theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n  assert(isDefined(stdAudioWorkletNode), \"AudioWorkletNode only works in a secure context (https or localhost)\");\n  return new (context instanceof (theWindow === null || theWindow === void 0 ? void 0 : theWindow.BaseAudioContext) ? theWindow === null || theWindow === void 0 ? void 0 : theWindow.AudioWorkletNode : stdAudioWorkletNode)(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n", "/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n  constructor(callback, type, updateInterval, contextSampleRate) {\n    this._callback = callback;\n    this._type = type;\n    this._minimumUpdateInterval = Math.max(128 / (contextSampleRate || 44100), 0.001);\n    this.updateInterval = updateInterval;\n    // create the clock source for the first time\n    this._createClock();\n  }\n  /**\n   * Generate a web worker\n   */\n  _createWorker() {\n    const blob = new Blob([/* javascript */`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`], {\n      type: \"text/javascript\"\n    });\n    const blobUrl = URL.createObjectURL(blob);\n    const worker = new Worker(blobUrl);\n    worker.onmessage = this._callback.bind(this);\n    this._worker = worker;\n  }\n  /**\n   * Create a timeout loop\n   */\n  _createTimeout() {\n    this._timeout = setTimeout(() => {\n      this._createTimeout();\n      this._callback();\n    }, this._updateInterval * 1000);\n  }\n  /**\n   * Create the clock source.\n   */\n  _createClock() {\n    if (this._type === \"worker\") {\n      try {\n        this._createWorker();\n      } catch (e) {\n        // workers not supported, fallback to timeout\n        this._type = \"timeout\";\n        this._createClock();\n      }\n    } else if (this._type === \"timeout\") {\n      this._createTimeout();\n    }\n  }\n  /**\n   * Clean up the current clock source\n   */\n  _disposeClock() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n    if (this._worker) {\n      this._worker.terminate();\n      this._worker.onmessage = null;\n    }\n  }\n  /**\n   * The rate in seconds the ticker will update\n   */\n  get updateInterval() {\n    return this._updateInterval;\n  }\n  set updateInterval(interval) {\n    var _a;\n    this._updateInterval = Math.max(interval, this._minimumUpdateInterval);\n    if (this._type === \"worker\") {\n      (_a = this._worker) === null || _a === void 0 ? void 0 : _a.postMessage(this._updateInterval * 1000);\n    }\n  }\n  /**\n   * The type of the ticker, either a worker or a timeout\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    this._disposeClock();\n    this._type = type;\n    this._createClock();\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    this._disposeClock();\n  }\n}\n", "import { AudioBuffer, isAnyAudioContext, isAnyAudioNode, isAnyAudioParam, isAnyOfflineAudioContext } from \"standardized-audio-context\";\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg) {\n  return isAnyAudioParam(arg);\n}\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg) {\n  return isAnyAudioNode(arg);\n}\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg) {\n  return isAnyOfflineAudioContext(arg);\n}\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg) {\n  return isAnyAudioContext(arg);\n}\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg) {\n  return arg instanceof AudioBuffer;\n}\n", "import { isAudioBuffer, isAudioNode, isAudioParam } from \"./AdvancedTypeCheck.js\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck.js\";\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key, arg) {\n  return key === \"value\" || isAudioParam(arg) || isAudioNode(arg) || isAudioBuffer(arg);\n}\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (noCopy(key, source[key])) {\n        target[key] = source[key];\n      } else if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {\n            [key]: {}\n          });\n        }\n        deepMerge(target[key], source[key]);\n      } else {\n        Object.assign(target, {\n          [key]: source[key]\n        });\n      }\n    }\n  }\n  // @ts-ignore\n  return deepMerge(target, ...sources);\n}\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA, arrayB) {\n  return arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);\n}\n/**\n * Convert an args array into an object.\n * @internal\n */\nexport function optionsFromArguments(defaults, argsArray, keys = [], objKey) {\n  const opts = {};\n  const args = Array.from(argsArray);\n  // if the first argument is an object and has an object key\n  if (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n    // if it's not part of the defaults\n    const partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));\n    if (!partOfDefaults) {\n      // merge that key\n      deepMerge(opts, {\n        [objKey]: args[0]\n      });\n      // remove the obj key from the keys\n      keys.splice(keys.indexOf(objKey), 1);\n      // shift the first argument off\n      args.shift();\n    }\n  }\n  if (args.length === 1 && isObject(args[0])) {\n    deepMerge(opts, args[0]);\n  } else {\n    for (let i = 0; i < keys.length; i++) {\n      if (isDefined(args[i])) {\n        opts[keys[i]] = args[i];\n      }\n    }\n  }\n  return deepMerge(defaults, opts);\n}\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance(instance) {\n  return instance.constructor.getDefaults();\n}\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n * @internal\n */\nexport function defaultArg(given, fallback) {\n  if (isUndef(given)) {\n    return fallback;\n  } else {\n    return given;\n  }\n}\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject(obj, omit) {\n  omit.forEach(prop => {\n    if (Reflect.has(obj, prop)) {\n      delete obj[prop];\n    }\n  });\n  return obj;\n}\n", "/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2024 Yotam Mann\n */\nimport { version } from \"../version.js\";\nimport { theWindow } from \"./context/AudioContext.js\";\nimport { log } from \"./util/Debug.js\";\n/**\n * Tone is the base class of all other classes.\n *\n * @category Core\n * @constructor\n */\nexport class Tone {\n  constructor() {\n    //-------------------------------------\n    // \tDEBUGGING\n    //-------------------------------------\n    /**\n     * Set this debug flag to log all events that happen in this class.\n     */\n    this.debug = false;\n    //-------------------------------------\n    // \tDISPOSING\n    //-------------------------------------\n    /**\n     * Indicates if the instance was disposed\n     */\n    this._wasDisposed = false;\n  }\n  /**\n   * Returns all of the default options belonging to the class.\n   */\n  static getDefaults() {\n    return {};\n  }\n  /**\n   * Prints the outputs to the console log for debugging purposes.\n   * Prints the contents only if either the object has a property\n   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n   * is set to the name of the class.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * // prints all logs originating from this oscillator\n   * osc.debug = true;\n   * // calls to start/stop will print in the console\n   * osc.start();\n   */\n  log(...args) {\n    // if the object is either set to debug = true\n    // or if there is a string on the Tone.global.with the class name\n    if (this.debug || theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS) {\n      log(this, ...args);\n    }\n  }\n  /**\n   * disconnect and dispose.\n   */\n  dispose() {\n    this._wasDisposed = true;\n    return this;\n  }\n  /**\n   * Indicates if the instance was disposed. 'Disposing' an\n   * instance means that all of the Web Audio nodes that were\n   * created for the instance are disconnected and freed for garbage collection.\n   */\n  get disposed() {\n    return this._wasDisposed;\n  }\n  /**\n   * Convert the class to a string\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.toString());\n   */\n  toString() {\n    return this.name;\n  }\n}\n/**\n * The version number semver\n */\nTone.version = version;\n", "/**\n * The threshold for correctness for operators. Less than one sample even\n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n/**\n * Test if A is greater than B\n */\nexport function GT(a, b) {\n  return a > b + EPSILON;\n}\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a, b) {\n  return GT(a, b) || EQ(a, b);\n}\n/**\n * Test if A is less than B\n */\nexport function LT(a, b) {\n  return a + EPSILON < b;\n}\n/**\n * Test if A is less than B\n */\nexport function EQ(a, b) {\n  return Math.abs(a - b) < EPSILON;\n}\n/**\n * Clamp the value within the given range\n */\nexport function clamp(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n", "import { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"./Defaults.js\";\nimport { assert } from \"./Debug.js\";\nimport { EQ, GT, GTE, LT } from \"./Math.js\";\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n * @internal\n */\nexport class Timeline extends Tone {\n  constructor() {\n    super();\n    this.name = \"Timeline\";\n    /**\n     * The array of scheduled timeline events\n     */\n    this._timeline = [];\n    const options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n    this.memory = options.memory;\n    this.increasing = options.increasing;\n  }\n  static getDefaults() {\n    return {\n      memory: Infinity,\n      increasing: false\n    };\n  }\n  /**\n   * The number of items in the timeline.\n   */\n  get length() {\n    return this._timeline.length;\n  }\n  /**\n   * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n   * @param event  The event object to insert into the timeline.\n   */\n  add(event) {\n    // the event needs to have a time attribute\n    assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n    event.time = event.time.valueOf();\n    if (this.increasing && this.length) {\n      const lastValue = this._timeline[this.length - 1];\n      assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n      this._timeline.push(event);\n    } else {\n      const index = this._search(event.time);\n      this._timeline.splice(index + 1, 0, event);\n    }\n    // if the length is more than the memory, remove the previous ones\n    if (this.length > this.memory) {\n      const diff = this.length - this.memory;\n      this._timeline.splice(0, diff);\n    }\n    return this;\n  }\n  /**\n   * Remove an event from the timeline.\n   * @param  {Object}  event  The event object to remove from the list.\n   * @returns {Timeline} this\n   */\n  remove(event) {\n    const index = this._timeline.indexOf(event);\n    if (index !== -1) {\n      this._timeline.splice(index, 1);\n    }\n    return this;\n  }\n  /**\n   * Get the nearest event whose time is less than or equal to the given time.\n   * @param  time  The time to query.\n   */\n  get(time, param = \"time\") {\n    const index = this._search(time, param);\n    if (index !== -1) {\n      return this._timeline[index];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Return the first event in the timeline without removing it\n   * @returns {Object} The first event object\n   */\n  peek() {\n    return this._timeline[0];\n  }\n  /**\n   * Return the first event in the timeline and remove it\n   */\n  shift() {\n    return this._timeline.shift();\n  }\n  /**\n   * Get the event which is scheduled after the given time.\n   * @param  time  The time to query.\n   */\n  getAfter(time, param = \"time\") {\n    const index = this._search(time, param);\n    if (index + 1 < this._timeline.length) {\n      return this._timeline[index + 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Get the event before the event at the given time.\n   * @param  time  The time to query.\n   */\n  getBefore(time) {\n    const len = this._timeline.length;\n    // if it's after the last item, return the last item\n    if (len > 0 && this._timeline[len - 1].time < time) {\n      return this._timeline[len - 1];\n    }\n    const index = this._search(time);\n    if (index - 1 >= 0) {\n      return this._timeline[index - 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Cancel events at and after the given time\n   * @param  after  The time to query.\n   */\n  cancel(after) {\n    if (this._timeline.length > 1) {\n      let index = this._search(after);\n      if (index >= 0) {\n        if (EQ(this._timeline[index].time, after)) {\n          // get the first item with that time\n          for (let i = index; i >= 0; i--) {\n            if (EQ(this._timeline[i].time, after)) {\n              index = i;\n            } else {\n              break;\n            }\n          }\n          this._timeline = this._timeline.slice(0, index);\n        } else {\n          this._timeline = this._timeline.slice(0, index + 1);\n        }\n      } else {\n        this._timeline = [];\n      }\n    } else if (this._timeline.length === 1) {\n      // the first item's time\n      if (GTE(this._timeline[0].time, after)) {\n        this._timeline = [];\n      }\n    }\n    return this;\n  }\n  /**\n   * Cancel events before or equal to the given time.\n   * @param  time  The time to cancel before.\n   */\n  cancelBefore(time) {\n    const index = this._search(time);\n    if (index >= 0) {\n      this._timeline = this._timeline.slice(index + 1);\n    }\n    return this;\n  }\n  /**\n   * Returns the previous event if there is one. null otherwise\n   * @param  event The event to find the previous one of\n   * @return The event right before the given event\n   */\n  previousEvent(event) {\n    const index = this._timeline.indexOf(event);\n    if (index > 0) {\n      return this._timeline[index - 1];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Does a binary search on the timeline array and returns the\n   * nearest event index whose time is after or equal to the given time.\n   * If a time is searched before the first index in the timeline, -1 is returned.\n   * If the time is after the end, the index of the last item is returned.\n   */\n  _search(time, param = \"time\") {\n    if (this._timeline.length === 0) {\n      return -1;\n    }\n    let beginning = 0;\n    const len = this._timeline.length;\n    let end = len;\n    if (len > 0 && this._timeline[len - 1][param] <= time) {\n      return len - 1;\n    }\n    while (beginning < end) {\n      // calculate the midpoint for roughly equal partition\n      let midPoint = Math.floor(beginning + (end - beginning) / 2);\n      const event = this._timeline[midPoint];\n      const nextEvent = this._timeline[midPoint + 1];\n      if (EQ(event[param], time)) {\n        // choose the last one that has the same time\n        for (let i = midPoint; i < this._timeline.length; i++) {\n          const testEvent = this._timeline[i];\n          if (EQ(testEvent[param], time)) {\n            midPoint = i;\n          } else {\n            break;\n          }\n        }\n        return midPoint;\n      } else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n        return midPoint;\n      } else if (GT(event[param], time)) {\n        // search lower\n        end = midPoint;\n      } else {\n        // search upper\n        beginning = midPoint + 1;\n      }\n    }\n    return -1;\n  }\n  /**\n   * Internal iterator. Applies extra safety checks for\n   * removing items from the array.\n   */\n  _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {\n    this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n  }\n  /**\n   * Iterate over everything in the array\n   * @param  callback The callback to invoke with every item\n   */\n  forEach(callback) {\n    this._iterate(callback);\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at or before the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n  forEachBefore(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const upperBound = this._search(time);\n    if (upperBound !== -1) {\n      this._iterate(callback, 0, upperBound);\n    }\n    return this;\n  }\n  /**\n   * Iterate over everything in the array after the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n  forEachAfter(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const lowerBound = this._search(time);\n    this._iterate(callback, lowerBound + 1);\n    return this;\n  }\n  /**\n   * Iterate over everything in the array between the startTime and endTime.\n   * The timerange is inclusive of the startTime, but exclusive of the endTime.\n   * range = [startTime, endTime).\n   * @param  startTime The time to check if items are before\n   * @param  endTime The end of the test interval.\n   * @param  callback The callback to invoke with every item\n   */\n  forEachBetween(startTime, endTime, callback) {\n    let lowerBound = this._search(startTime);\n    let upperBound = this._search(endTime);\n    if (lowerBound !== -1 && upperBound !== -1) {\n      if (this._timeline[lowerBound].time !== startTime) {\n        lowerBound += 1;\n      }\n      // exclusive of the end time\n      if (this._timeline[upperBound].time === endTime) {\n        upperBound -= 1;\n      }\n      this._iterate(callback, lowerBound, upperBound);\n    } else if (lowerBound === -1) {\n      this._iterate(callback, 0, upperBound);\n    }\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at or after the given time. Similar to\n   * forEachAfter, but includes the item(s) at the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n  forEachFrom(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    let lowerBound = this._search(time);\n    // work backwards until the event time is less than time\n    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n      lowerBound--;\n    }\n    this._iterate(callback, lowerBound + 1);\n    return this;\n  }\n  /**\n   * Iterate over everything in the array at the given time\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n  forEachAtTime(time, callback) {\n    // iterate over the items in reverse so that removing an item doesn't break things\n    const upperBound = this._search(time);\n    if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n      let lowerBound = upperBound;\n      for (let i = upperBound; i >= 0; i--) {\n        if (EQ(this._timeline[i].time, time)) {\n          lowerBound = i;\n        } else {\n          break;\n        }\n      }\n      this._iterate(event => {\n        callback(event);\n      }, lowerBound, upperBound);\n    }\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._timeline = [];\n    return this;\n  }\n}\n", "/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb) {\n  notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx) {\n  // add any additional modules\n  notifyNewContext.forEach(cb => cb(ctx));\n}\n/**\n * Array of callbacks to invoke when a new context is closed\n */\nconst notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb) {\n  notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n  // remove any additional modules\n  notifyCloseContext.forEach(cb => cb(ctx));\n}\n", "import { Tone } from \"../Tone.js\";\nimport { isUndef } from \"./TypeCheck.js\";\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n * @category Core\n */\nexport class Emitter extends Tone {\n  constructor() {\n    super(...arguments);\n    this.name = \"Emitter\";\n  }\n  /**\n   * Bind a callback to a specific event.\n   * @param  event     The name of the event to listen for.\n   * @param  callback  The callback to invoke when the event is emitted\n   */\n  on(event, callback) {\n    // split the event\n    const events = event.split(/\\W+/);\n    events.forEach(eventName => {\n      if (isUndef(this._events)) {\n        this._events = {};\n      }\n      if (!this._events.hasOwnProperty(eventName)) {\n        this._events[eventName] = [];\n      }\n      this._events[eventName].push(callback);\n    });\n    return this;\n  }\n  /**\n   * Bind a callback which is only invoked once\n   * @param  event     The name of the event to listen for.\n   * @param  callback  The callback to invoke when the event is emitted\n   */\n  once(event, callback) {\n    const boundCallback = (...args) => {\n      // invoke the callback\n      callback(...args);\n      // remove the event\n      this.off(event, boundCallback);\n    };\n    this.on(event, boundCallback);\n    return this;\n  }\n  /**\n   * Remove the event listener.\n   * @param  event     The event to stop listening to.\n   * @param  callback  The callback which was bound to the event with Emitter.on.\n   *                   If no callback is given, all callbacks events are removed.\n   */\n  off(event, callback) {\n    const events = event.split(/\\W+/);\n    events.forEach(eventName => {\n      if (isUndef(this._events)) {\n        this._events = {};\n      }\n      if (this._events.hasOwnProperty(eventName)) {\n        if (isUndef(callback)) {\n          this._events[eventName] = [];\n        } else {\n          const eventList = this._events[eventName];\n          for (let i = eventList.length - 1; i >= 0; i--) {\n            if (eventList[i] === callback) {\n              eventList.splice(i, 1);\n            }\n          }\n        }\n      }\n    });\n    return this;\n  }\n  /**\n   * Invoke all of the callbacks bound to the event\n   * with any arguments passed in.\n   * @param  event  The name of the event.\n   * @param args The arguments to pass to the functions listening.\n   */\n  emit(event, ...args) {\n    if (this._events) {\n      if (this._events.hasOwnProperty(event)) {\n        const eventList = this._events[event].slice(0);\n        for (let i = 0, len = eventList.length; i < len; i++) {\n          eventList[i].apply(this, args);\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * Add Emitter functions (on/off/emit) to the object\n   */\n  static mixin(constr) {\n    // instance._events = {};\n    [\"on\", \"once\", \"off\", \"emit\"].forEach(name => {\n      const property = Object.getOwnPropertyDescriptor(Emitter.prototype, name);\n      Object.defineProperty(constr.prototype, name, property);\n    });\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._events = undefined;\n    return this;\n  }\n}\n", "import { Emitter } from \"../util/Emitter.js\";\nexport class BaseContext extends Emitter {\n  constructor() {\n    super(...arguments);\n    this.isOffline = false;\n  }\n  /*\n   * This is a placeholder so that JSON.stringify does not throw an error\n   * This matches what JSON.stringify(audioContext) returns on a native\n   * audioContext instance.\n   */\n  toJSON() {\n    return {};\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker.js\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { createAudioContext, createAudioWorkletNode } from \"./AudioContext.js\";\nimport { closeContext, initializeContext } from \"./ContextInitialization.js\";\nimport { BaseContext } from \"./BaseContext.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n  constructor() {\n    var _a, _b;\n    super();\n    this.name = \"Context\";\n    /**\n     * An object containing all of the constants AudioBufferSourceNodes\n     */\n    this._constants = new Map();\n    /**\n     * All of the setTimeout events.\n     */\n    this._timeouts = new Timeline();\n    /**\n     * The timeout id counter\n     */\n    this._timeoutIds = 0;\n    /**\n     * Private indicator if the context has been initialized\n     */\n    this._initialized = false;\n    /**\n     * Private indicator if a close() has been called on the context, since close is async\n     */\n    this._closeStarted = false;\n    /**\n     * Indicates if the context is an OfflineAudioContext or an AudioContext\n     */\n    this.isOffline = false;\n    //--------------------------------------------\n    // AUDIO WORKLET\n    //--------------------------------------------\n    /**\n     * Maps a module name to promise of the addModule method\n     */\n    this._workletPromise = null;\n    const options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n    if (options.context) {\n      this._context = options.context;\n      // custom context provided, latencyHint unknown (unless explicitly provided in options)\n      this._latencyHint = ((_a = arguments[0]) === null || _a === void 0 ? void 0 : _a.latencyHint) || \"\";\n    } else {\n      this._context = createAudioContext({\n        latencyHint: options.latencyHint\n      });\n      this._latencyHint = options.latencyHint;\n    }\n    this._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval, this._context.sampleRate);\n    this.on(\"tick\", this._timeoutLoop.bind(this));\n    // fwd events from the context\n    this._context.onstatechange = () => {\n      this.emit(\"statechange\", this.state);\n    };\n    // if no custom updateInterval provided, updateInterval will be derived by lookAhead setter\n    this[((_b = arguments[0]) === null || _b === void 0 ? void 0 : _b.hasOwnProperty(\"updateInterval\")) ? \"_lookAhead\" : \"lookAhead\"] = options.lookAhead;\n  }\n  static getDefaults() {\n    return {\n      clockSource: \"worker\",\n      latencyHint: \"interactive\",\n      lookAhead: 0.1,\n      updateInterval: 0.05\n    };\n  }\n  /**\n   * Finish setting up the context. **You usually do not need to do this manually.**\n   */\n  initialize() {\n    if (!this._initialized) {\n      // add any additional modules\n      initializeContext(this);\n      this._initialized = true;\n    }\n    return this;\n  }\n  //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n  createAnalyser() {\n    return this._context.createAnalyser();\n  }\n  createOscillator() {\n    return this._context.createOscillator();\n  }\n  createBufferSource() {\n    return this._context.createBufferSource();\n  }\n  createBiquadFilter() {\n    return this._context.createBiquadFilter();\n  }\n  createBuffer(numberOfChannels, length, sampleRate) {\n    return this._context.createBuffer(numberOfChannels, length, sampleRate);\n  }\n  createChannelMerger(numberOfInputs) {\n    return this._context.createChannelMerger(numberOfInputs);\n  }\n  createChannelSplitter(numberOfOutputs) {\n    return this._context.createChannelSplitter(numberOfOutputs);\n  }\n  createConstantSource() {\n    return this._context.createConstantSource();\n  }\n  createConvolver() {\n    return this._context.createConvolver();\n  }\n  createDelay(maxDelayTime) {\n    return this._context.createDelay(maxDelayTime);\n  }\n  createDynamicsCompressor() {\n    return this._context.createDynamicsCompressor();\n  }\n  createGain() {\n    return this._context.createGain();\n  }\n  createIIRFilter(feedForward, feedback) {\n    // @ts-ignore\n    return this._context.createIIRFilter(feedForward, feedback);\n  }\n  createPanner() {\n    return this._context.createPanner();\n  }\n  createPeriodicWave(real, imag, constraints) {\n    return this._context.createPeriodicWave(real, imag, constraints);\n  }\n  createStereoPanner() {\n    return this._context.createStereoPanner();\n  }\n  createWaveShaper() {\n    return this._context.createWaveShaper();\n  }\n  createMediaStreamSource(stream) {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamSource(stream);\n  }\n  createMediaElementSource(element) {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaElementSource(element);\n  }\n  createMediaStreamDestination() {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamDestination();\n  }\n  decodeAudioData(audioData) {\n    return this._context.decodeAudioData(audioData);\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n  get currentTime() {\n    return this._context.currentTime;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n  get state() {\n    return this._context.state;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n  get sampleRate() {\n    return this._context.sampleRate;\n  }\n  /**\n   * The listener\n   */\n  get listener() {\n    this.initialize();\n    return this._listener;\n  }\n  set listener(l) {\n    assert(!this._initialized, \"The listener cannot be set after initialization.\");\n    this._listener = l;\n  }\n  /**\n   * There is only one Transport per Context. It is created on initialization.\n   */\n  get transport() {\n    this.initialize();\n    return this._transport;\n  }\n  set transport(t) {\n    assert(!this._initialized, \"The transport cannot be set after initialization.\");\n    this._transport = t;\n  }\n  /**\n   * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n   */\n  get draw() {\n    this.initialize();\n    return this._draw;\n  }\n  set draw(d) {\n    assert(!this._initialized, \"Draw cannot be set after initialization.\");\n    this._draw = d;\n  }\n  /**\n   * A reference to the Context's destination node.\n   */\n  get destination() {\n    this.initialize();\n    return this._destination;\n  }\n  set destination(d) {\n    assert(!this._initialized, \"The destination cannot be set after initialization.\");\n    this._destination = d;\n  }\n  /**\n   * Create an audio worklet node from a name and options. The module\n   * must first be loaded using {@link addAudioWorkletModule}.\n   */\n  createAudioWorkletNode(name, options) {\n    return createAudioWorkletNode(this.rawContext, name, options);\n  }\n  /**\n   * Add an AudioWorkletProcessor module\n   * @param url The url of the module\n   */\n  addAudioWorkletModule(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n      if (!this._workletPromise) {\n        this._workletPromise = this.rawContext.audioWorklet.addModule(url);\n      }\n      yield this._workletPromise;\n    });\n  }\n  /**\n   * Returns a promise which resolves when all of the worklets have been loaded on this context\n   */\n  workletsAreReady() {\n    return __awaiter(this, void 0, void 0, function* () {\n      (yield this._workletPromise) ? this._workletPromise : Promise.resolve();\n    });\n  }\n  //---------------------------\n  // TICKER\n  //---------------------------\n  /**\n   * How often the interval callback is invoked.\n   * This number corresponds to how responsive the scheduling\n   * can be. Setting to 0 will result in the lowest practial interval\n   * based on context properties. context.updateInterval + context.lookAhead\n   * gives you the total latency between scheduling an event and hearing it.\n   */\n  get updateInterval() {\n    return this._ticker.updateInterval;\n  }\n  set updateInterval(interval) {\n    this._ticker.updateInterval = interval;\n  }\n  /**\n   * What the source of the clock is, either \"worker\" (default),\n   * \"timeout\", or \"offline\" (none).\n   */\n  get clockSource() {\n    return this._ticker.type;\n  }\n  set clockSource(type) {\n    this._ticker.type = type;\n  }\n  /**\n   * The amount of time into the future events are scheduled. Giving Web Audio\n   * a short amount of time into the future to schedule events can reduce clicks and\n   * improve performance. This value can be set to 0 to get the lowest latency.\n   * Adjusting this value also affects the {@link updateInterval}.\n   */\n  get lookAhead() {\n    return this._lookAhead;\n  }\n  set lookAhead(time) {\n    this._lookAhead = time;\n    // if lookAhead is 0, default to .01 updateInterval\n    this.updateInterval = time ? time / 2 : 0.01;\n  }\n  /**\n   * The type of playback, which affects tradeoffs between audio\n   * output latency and responsiveness.\n   * In addition to setting the value in seconds, the latencyHint also\n   * accepts the strings \"interactive\" (prioritizes low latency),\n   * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n   * latency and performance).\n   * @example\n   * // prioritize sustained playback\n   * const context = new Tone.Context({ latencyHint: \"playback\" });\n   * // set this context as the global Context\n   * Tone.setContext(context);\n   * // the global context is gettable with Tone.getContext()\n   * console.log(Tone.getContext().latencyHint);\n   */\n  get latencyHint() {\n    return this._latencyHint;\n  }\n  /**\n   * The unwrapped AudioContext or OfflineAudioContext\n   */\n  get rawContext() {\n    return this._context;\n  }\n  /**\n   * The current audio context time plus a short {@link lookAhead}.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(\"now\", Tone.now());\n   * }, 100);\n   */\n  now() {\n    return this._context.currentTime + this._lookAhead;\n  }\n  /**\n   * The current audio context time without the {@link lookAhead}.\n   * In most cases it is better to use {@link now} instead of {@link immediate} since\n   * with {@link now} the {@link lookAhead} is applied equally to _all_ components including internal components,\n   * to making sure that everything is scheduled in sync. Mixing {@link now} and {@link immediate}\n   * can cause some timing issues. If no lookAhead is desired, you can set the {@link lookAhead} to `0`.\n   */\n  immediate() {\n    return this._context.currentTime;\n  }\n  /**\n   * Starts the audio context from a suspended state. This is required\n   * to initially start the AudioContext.\n   * @see {@link start}\n   */\n  resume() {\n    if (isAudioContext(this._context)) {\n      return this._context.resume();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Close the context. Once closed, the context can no longer be used and\n   * any AudioNodes created from the context will be silent.\n   */\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isAudioContext(this._context) && this.state !== \"closed\" && !this._closeStarted) {\n        this._closeStarted = true;\n        yield this._context.close();\n      }\n      if (this._initialized) {\n        closeContext(this);\n      }\n    });\n  }\n  /**\n   * **Internal** Generate a looped buffer at some constant value.\n   */\n  getConstant(val) {\n    if (this._constants.has(val)) {\n      return this._constants.get(val);\n    } else {\n      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n      const arr = buffer.getChannelData(0);\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = val;\n      }\n      const constant = this._context.createBufferSource();\n      constant.channelCount = 1;\n      constant.channelCountMode = \"explicit\";\n      constant.buffer = buffer;\n      constant.loop = true;\n      constant.start(0);\n      this._constants.set(val, constant);\n      return constant;\n    }\n  }\n  /**\n   * Clean up. Also closes the audio context.\n   */\n  dispose() {\n    super.dispose();\n    this._ticker.dispose();\n    this._timeouts.dispose();\n    Object.keys(this._constants).map(val => this._constants[val].disconnect());\n    this.close();\n    return this;\n  }\n  //---------------------------\n  // TIMEOUTS\n  //---------------------------\n  /**\n   * The private loop which keeps track of the context scheduled timeouts\n   * Is invoked from the clock source\n   */\n  _timeoutLoop() {\n    const now = this.now();\n    let firstEvent = this._timeouts.peek();\n    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n      // invoke the callback\n      firstEvent.callback();\n      // shift the first event off\n      this._timeouts.shift();\n      // get the next one\n      firstEvent = this._timeouts.peek();\n    }\n  }\n  /**\n   * A setTimeout which is guaranteed by the clock source.\n   * Also runs in the offline context.\n   * @param  fn       The callback to invoke\n   * @param  timeout  The timeout in seconds\n   * @returns ID to use when invoking Context.clearTimeout\n   */\n  setTimeout(fn, timeout) {\n    this._timeoutIds++;\n    const now = this.now();\n    this._timeouts.add({\n      callback: fn,\n      id: this._timeoutIds,\n      time: now + timeout\n    });\n    return this._timeoutIds;\n  }\n  /**\n   * Clears a previously scheduled timeout with Tone.context.setTimeout\n   * @param  id  The ID returned from setTimeout\n   */\n  clearTimeout(id) {\n    this._timeouts.forEach(event => {\n      if (event.id === id) {\n        this._timeouts.remove(event);\n      }\n    });\n    return this;\n  }\n  /**\n   * Clear the function scheduled by {@link setInterval}\n   */\n  clearInterval(id) {\n    return this.clearTimeout(id);\n  }\n  /**\n   * Adds a repeating event to the context's callback clock\n   */\n  setInterval(fn, interval) {\n    const id = ++this._timeoutIds;\n    const intervalFn = () => {\n      const now = this.now();\n      this._timeouts.add({\n        callback: () => {\n          // invoke the callback\n          fn();\n          // invoke the event to repeat it\n          intervalFn();\n        },\n        id,\n        time: now + interval\n      });\n    };\n    // kick it off\n    intervalFn();\n    return id;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext.js\";\nexport class DummyContext extends BaseContext {\n  constructor() {\n    super(...arguments);\n    this.lookAhead = 0;\n    this.latencyHint = 0;\n    this.isOffline = false;\n  }\n  //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n  createAnalyser() {\n    return {};\n  }\n  createOscillator() {\n    return {};\n  }\n  createBufferSource() {\n    return {};\n  }\n  createBiquadFilter() {\n    return {};\n  }\n  createBuffer(_numberOfChannels, _length, _sampleRate) {\n    return {};\n  }\n  createChannelMerger(_numberOfInputs) {\n    return {};\n  }\n  createChannelSplitter(_numberOfOutputs) {\n    return {};\n  }\n  createConstantSource() {\n    return {};\n  }\n  createConvolver() {\n    return {};\n  }\n  createDelay(_maxDelayTime) {\n    return {};\n  }\n  createDynamicsCompressor() {\n    return {};\n  }\n  createGain() {\n    return {};\n  }\n  createIIRFilter(_feedForward, _feedback) {\n    return {};\n  }\n  createPanner() {\n    return {};\n  }\n  createPeriodicWave(_real, _imag, _constraints) {\n    return {};\n  }\n  createStereoPanner() {\n    return {};\n  }\n  createWaveShaper() {\n    return {};\n  }\n  createMediaStreamSource(_stream) {\n    return {};\n  }\n  createMediaElementSource(_element) {\n    return {};\n  }\n  createMediaStreamDestination() {\n    return {};\n  }\n  decodeAudioData(_audioData) {\n    return Promise.resolve({});\n  }\n  //---------------------------\n  // TONE AUDIO CONTEXT METHODS\n  //---------------------------\n  createAudioWorkletNode(_name, _options) {\n    return {};\n  }\n  get rawContext() {\n    return {};\n  }\n  addAudioWorkletModule(_url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve();\n    });\n  }\n  resume() {\n    return Promise.resolve();\n  }\n  setTimeout(_fn, _timeout) {\n    return 0;\n  }\n  clearTimeout(_id) {\n    return this;\n  }\n  setInterval(_fn, _interval) {\n    return 0;\n  }\n  clearInterval(_id) {\n    return this;\n  }\n  getConstant(_val) {\n    return {};\n  }\n  get currentTime() {\n    return 0;\n  }\n  get state() {\n    return {};\n  }\n  get sampleRate() {\n    return 0;\n  }\n  get listener() {\n    return {};\n  }\n  get transport() {\n    return {};\n  }\n  get draw() {\n    return {};\n  }\n  set draw(_d) {}\n  get destination() {\n    return {};\n  }\n  set destination(_d) {}\n  now() {\n    return 0;\n  }\n  immediate() {\n    return 0;\n  }\n}\n", "import { isArray } from \"./TypeCheck.js\";\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => readOnly(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      enumerable: true,\n      writable: false\n    });\n  }\n}\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => writable(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      writable: true\n    });\n  }\n}\nexport const noOp = () => {\n  // no operation here!\n};\n", "import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global.js\";\nimport { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffer\";\n    /**\n     * Callback when the buffer is loaded.\n     */\n    this.onload = noOp;\n    const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n    this.reverse = options.reverse;\n    this.onload = options.onload;\n    if (isString(options.url)) {\n      // initiate the download\n      this.load(options.url).catch(options.onerror);\n    } else if (options.url) {\n      this.set(options.url);\n    }\n  }\n  static getDefaults() {\n    return {\n      onerror: noOp,\n      onload: noOp,\n      reverse: false\n    };\n  }\n  /**\n   * The sample rate of the AudioBuffer\n   */\n  get sampleRate() {\n    if (this._buffer) {\n      return this._buffer.sampleRate;\n    } else {\n      return getContext().sampleRate;\n    }\n  }\n  /**\n   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n   */\n  set(buffer) {\n    if (buffer instanceof ToneAudioBuffer) {\n      // if it's loaded, set it\n      if (buffer.loaded) {\n        this._buffer = buffer.get();\n      } else {\n        // otherwise when it's loaded, invoke it's callback\n        buffer.onload = () => {\n          this.set(buffer);\n          this.onload(this);\n        };\n      }\n    } else {\n      this._buffer = buffer;\n    }\n    // reverse it initially\n    if (this._reversed) {\n      this._reverse();\n    }\n    return this;\n  }\n  /**\n   * The audio buffer stored in the object.\n   */\n  get() {\n    return this._buffer;\n  }\n  /**\n   * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n   * Invokes the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   * @returns A Promise which resolves with this ToneAudioBuffer\n   */\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {\n        this.set(audioBuffer);\n        // invoke the onload method\n        this.onload(this);\n      });\n      ToneAudioBuffer.downloads.push(doneLoading);\n      try {\n        yield doneLoading;\n      } finally {\n        // remove the downloaded file\n        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n        ToneAudioBuffer.downloads.splice(index, 1);\n      }\n      return this;\n    });\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this._buffer = undefined;\n    return this;\n  }\n  /**\n   * Set the audio buffer from the array.\n   * To create a multichannel AudioBuffer, pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   */\n  fromArray(array) {\n    const isMultidimensional = isArray(array) && array[0].length > 0;\n    const channels = isMultidimensional ? array.length : 1;\n    const len = isMultidimensional ? array[0].length : array.length;\n    const context = getContext();\n    const buffer = context.createBuffer(channels, len, context.sampleRate);\n    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;\n    for (let c = 0; c < channels; c++) {\n      buffer.copyToChannel(multiChannelArray[c], c);\n    }\n    this._buffer = buffer;\n    return this;\n  }\n  /**\n   * Sums multiple channels into 1 channel\n   * @param chanNum Optionally only copy a single channel from the array.\n   */\n  toMono(chanNum) {\n    if (isNumber(chanNum)) {\n      this.fromArray(this.toArray(chanNum));\n    } else {\n      let outputArray = new Float32Array(this.length);\n      const numChannels = this.numberOfChannels;\n      for (let channel = 0; channel < numChannels; channel++) {\n        const channelArray = this.toArray(channel);\n        for (let i = 0; i < channelArray.length; i++) {\n          outputArray[i] += channelArray[i];\n        }\n      }\n      // divide by the number of channels\n      outputArray = outputArray.map(sample => sample / numChannels);\n      this.fromArray(outputArray);\n    }\n    return this;\n  }\n  /**\n   * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n   * Float32Array, and multichannel buffers will return multidimensional arrays.\n   * @param channel Optionally only copy a single channel from the array.\n   */\n  toArray(channel) {\n    if (isNumber(channel)) {\n      return this.getChannelData(channel);\n    } else if (this.numberOfChannels === 1) {\n      return this.toArray(0);\n    } else {\n      const ret = [];\n      for (let c = 0; c < this.numberOfChannels; c++) {\n        ret[c] = this.getChannelData(c);\n      }\n      return ret;\n    }\n  }\n  /**\n   * Returns the Float32Array representing the PCM audio data for the specific channel.\n   * @param  channel  The channel number to return\n   * @return The audio as a TypedArray\n   */\n  getChannelData(channel) {\n    if (this._buffer) {\n      return this._buffer.getChannelData(channel);\n    } else {\n      return new Float32Array(0);\n    }\n  }\n  /**\n   * Cut a subsection of the array and return a buffer of the\n   * subsection. Does not modify the original buffer\n   * @param start The time to start the slice\n   * @param end The end time to slice. If none is given will default to the end of the buffer\n   */\n  slice(start, end = this.duration) {\n    assert(this.loaded, \"Buffer is not loaded\");\n    const startSamples = Math.floor(start * this.sampleRate);\n    const endSamples = Math.floor(end * this.sampleRate);\n    assert(startSamples < endSamples, \"The start time must be less than the end time\");\n    const length = endSamples - startSamples;\n    const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n    for (let channel = 0; channel < this.numberOfChannels; channel++) {\n      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n    }\n    return new ToneAudioBuffer(retBuffer);\n  }\n  /**\n   * Reverse the buffer.\n   */\n  _reverse() {\n    if (this.loaded) {\n      for (let i = 0; i < this.numberOfChannels; i++) {\n        this.getChannelData(i).reverse();\n      }\n    }\n    return this;\n  }\n  /**\n   * If the buffer is loaded or not\n   */\n  get loaded() {\n    return this.length > 0;\n  }\n  /**\n   * The duration of the buffer in seconds.\n   */\n  get duration() {\n    if (this._buffer) {\n      return this._buffer.duration;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The length of the buffer in samples\n   */\n  get length() {\n    if (this._buffer) {\n      return this._buffer.length;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n   */\n  get numberOfChannels() {\n    if (this._buffer) {\n      return this._buffer.numberOfChannels;\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Reverse the buffer.\n   */\n  get reverse() {\n    return this._reversed;\n  }\n  set reverse(rev) {\n    if (this._reversed !== rev) {\n      this._reversed = rev;\n      this._reverse();\n    }\n  }\n  /**\n   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n   * pass in a multidimensional array.\n   * @param array The array to fill the audio buffer\n   * @return A ToneAudioBuffer created from the array\n   */\n  static fromArray(array) {\n    return new ToneAudioBuffer().fromArray(array);\n  }\n  /**\n   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n   * @param  url The url to load.\n   * @return A promise which resolves to a ToneAudioBuffer\n   */\n  static fromUrl(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const buffer = new ToneAudioBuffer();\n      return yield buffer.load(url);\n    });\n  }\n  /**\n   * Loads a url using fetch and returns the AudioBuffer.\n   */\n  static load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // make sure there is a slash between the baseUrl and the url\n      const baseUrl = ToneAudioBuffer.baseUrl === \"\" || ToneAudioBuffer.baseUrl.endsWith(\"/\") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + \"/\";\n      const response = yield fetch(baseUrl + url);\n      if (!response.ok) {\n        throw new Error(`could not load url: ${url}`);\n      }\n      const arrayBuffer = yield response.arrayBuffer();\n      const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n      return audioBuffer;\n    });\n  }\n  /**\n   * Checks a url's extension to see if the current browser can play that file type.\n   * @param url The url/extension to test\n   * @return If the file extension can be played\n   * @static\n   * @example\n   * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n   * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n   */\n  static supportsType(url) {\n    const extensions = url.split(\".\");\n    const extension = extensions[extensions.length - 1];\n    const response = document.createElement(\"audio\").canPlayType(\"audio/\" + extension);\n    return response !== \"\";\n  }\n  /**\n   * Returns a Promise which resolves when all of the buffers have loaded\n   */\n  static loaded() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // this makes sure that the function is always async\n      yield Promise.resolve();\n      while (ToneAudioBuffer.downloads.length) {\n        yield ToneAudioBuffer.downloads[0];\n      }\n    });\n  }\n}\n//-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n/**\n * A path which is prefixed before every url.\n */\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\nToneAudioBuffer.downloads = [];\n", "import { __awaiter } from \"tslib\";\nimport { createOfflineAudioContext } from \"../context/AudioContext.js\";\nimport { Context } from \"../context/Context.js\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck.js\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer.js\";\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n * @example\n * // generate a single channel, 0.5 second buffer\n * const context = new Tone.OfflineContext(1, 0.5, 44100);\n * const osc = new Tone.Oscillator({ context });\n * context.render().then(buffer => {\n * \tconsole.log(buffer.numberOfChannels, buffer.duration);\n * });\n */\nexport class OfflineContext extends Context {\n  constructor() {\n    super({\n      clockSource: \"offline\",\n      context: isOfflineAudioContext(arguments[0]) ? arguments[0] : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n      lookAhead: 0,\n      updateInterval: isOfflineAudioContext(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]\n    });\n    this.name = \"OfflineContext\";\n    /**\n     * An artificial clock source\n     */\n    this._currentTime = 0;\n    this.isOffline = true;\n    this._duration = isOfflineAudioContext(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];\n  }\n  /**\n   * Override the now method to point to the internal clock time\n   */\n  now() {\n    return this._currentTime;\n  }\n  /**\n   * Same as this.now()\n   */\n  get currentTime() {\n    return this._currentTime;\n  }\n  /**\n   * Render just the clock portion of the audio context.\n   */\n  _renderClock(asynchronous) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n      while (this._duration - this._currentTime >= 0) {\n        // invoke all the callbacks on that time\n        this.emit(\"tick\");\n        // increment the clock in block-sized chunks\n        this._currentTime += 128 / this.sampleRate;\n        // yield once a second of audio\n        index++;\n        const yieldEvery = Math.floor(this.sampleRate / 128);\n        if (asynchronous && index % yieldEvery === 0) {\n          yield new Promise(done => setTimeout(done, 1));\n        }\n      }\n    });\n  }\n  /**\n   * Render the output of the OfflineContext\n   * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n   */\n  render() {\n    return __awaiter(this, arguments, void 0, function* (asynchronous = true) {\n      yield this.workletsAreReady();\n      yield this._renderClock(asynchronous);\n      const buffer = yield this._context.startRendering();\n      return new ToneAudioBuffer(buffer);\n    });\n  }\n  /**\n   * Close the context\n   */\n  close() {\n    return Promise.resolve();\n  }\n}\n", "import { version } from \"../version.js\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext.js\";\nimport { Context } from \"./context/Context.js\";\nimport { DummyContext } from \"./context/DummyContext.js\";\nimport { OfflineContext } from \"./context/OfflineContext.js\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck.js\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide {@link Context}\n * @category Core\n */\nexport function getContext() {\n  if (globalContext === dummyContext && hasAudioContext) {\n    setContext(new Context());\n  }\n  return globalContext;\n}\n/**\n * Set the default audio context\n * @param context\n * @param disposeOld Pass `true` if you don't need the old context to dispose it.\n * @category Core\n */\nexport function setContext(context, disposeOld = false) {\n  if (disposeOld) {\n    globalContext.dispose();\n  }\n  if (isAudioContext(context)) {\n    globalContext = new Context(context);\n  } else if (isOfflineAudioContext(context)) {\n    globalContext = new OfflineContext(context);\n  } else {\n    globalContext = context;\n  }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start() {\n  return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n  let prefix = \"v\";\n  if (version === \"dev\") {\n    prefix = \"\";\n  }\n  const printString = ` * Tone.js ${prefix}${version} * `;\n  // eslint-disable-next-line no-console\n  console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n", "/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n  const piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db) {\n  return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval) {\n  return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4 = 440;\nexport function getA4() {\n  return A4;\n}\nexport function setA4(freq) {\n  A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency) {\n  return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency) {\n  return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi) {\n  return A4 * Math.pow(2, (midi - 69) / 12);\n}\n", "import { Tone } from \"../Tone.js\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck.js\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport class TimeBaseClass extends Tone {\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  constructor(context, value, units) {\n    super();\n    /**\n     * The default units\n     */\n    this.defaultUnits = \"s\";\n    this._val = value;\n    this._units = units;\n    this.context = context;\n    this._expressions = this._getExpressions();\n  }\n  /**\n   * All of the time encoding expressions\n   */\n  _getExpressions() {\n    return {\n      hz: {\n        method: value => {\n          return this._frequencyToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n      },\n      i: {\n        method: value => {\n          return this._ticksToUnits(parseInt(value, 10));\n        },\n        regexp: /^(\\d+)i$/i\n      },\n      m: {\n        method: value => {\n          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n        },\n        regexp: /^(\\d+)m$/i\n      },\n      n: {\n        method: (value, dot) => {\n          const numericValue = parseInt(value, 10);\n          const scalar = dot === \".\" ? 1.5 : 1;\n          if (numericValue === 1) {\n            return this._beatsToUnits(this._getTimeSignature()) * scalar;\n          } else {\n            return this._beatsToUnits(4 / numericValue) * scalar;\n          }\n        },\n        regexp: /^(\\d+)n(\\.?)$/i\n      },\n      number: {\n        method: value => {\n          return this._expressions[this.defaultUnits].method.call(this, value);\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)$/\n      },\n      s: {\n        method: value => {\n          return this._secondsToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)s$/\n      },\n      samples: {\n        method: value => {\n          return parseInt(value, 10) / this.context.sampleRate;\n        },\n        regexp: /^(\\d+)samples$/\n      },\n      t: {\n        method: value => {\n          const numericValue = parseInt(value, 10);\n          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n        },\n        regexp: /^(\\d+)t$/i\n      },\n      tr: {\n        method: (m, q, s) => {\n          let total = 0;\n          if (m && m !== \"0\") {\n            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n          if (q && q !== \"0\") {\n            total += this._beatsToUnits(parseFloat(q));\n          }\n          if (s && s !== \"0\") {\n            total += this._beatsToUnits(parseFloat(s) / 4);\n          }\n          return total;\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n      }\n    };\n  }\n  //-------------------------------------\n  // \tVALUE OF\n  //-------------------------------------\n  /**\n   * Evaluate the time value. Returns the time in seconds.\n   */\n  valueOf() {\n    if (this._val instanceof TimeBaseClass) {\n      this.fromType(this._val);\n    }\n    if (isUndef(this._val)) {\n      return this._noArg();\n    } else if (isString(this._val) && isUndef(this._units)) {\n      for (const units in this._expressions) {\n        if (this._expressions[units].regexp.test(this._val.trim())) {\n          this._units = units;\n          break;\n        }\n      }\n    } else if (isObject(this._val)) {\n      let total = 0;\n      for (const typeName in this._val) {\n        if (isDefined(this._val[typeName])) {\n          const quantity = this._val[typeName];\n          const time =\n          // @ts-ignore\n          new this.constructor(this.context, typeName).valueOf() * quantity;\n          total += time;\n        }\n      }\n      return total;\n    }\n    if (isDefined(this._units)) {\n      const expr = this._expressions[this._units];\n      const matching = this._val.toString().trim().match(expr.regexp);\n      if (matching) {\n        return expr.method.apply(this, matching.slice(1));\n      } else {\n        return expr.method.call(this, this._val);\n      }\n    } else if (isString(this._val)) {\n      return parseFloat(this._val);\n    } else {\n      return this._val;\n    }\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return 1 / freq;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return 60 / this._getBpm() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return seconds;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return ticks * this._beatsToUnits(1) / this._getPPQ();\n  }\n  /**\n   * With no arguments, return 'now'\n   */\n  _noArg() {\n    return this._now();\n  }\n  //-------------------------------------\n  // \tTEMPO CONVERSIONS\n  //-------------------------------------\n  /**\n   * Return the bpm\n   */\n  _getBpm() {\n    return this.context.transport.bpm.value;\n  }\n  /**\n   * Return the timeSignature\n   */\n  _getTimeSignature() {\n    return this.context.transport.timeSignature;\n  }\n  /**\n   * Return the PPQ or 192 if Transport is not available\n   */\n  _getPPQ() {\n    return this.context.transport.PPQ;\n  }\n  //-------------------------------------\n  // \tCONVERSION INTERFACE\n  //-------------------------------------\n  /**\n   * Coerce a time type into this units type.\n   * @param type Any time type units\n   */\n  fromType(type) {\n    this._units = undefined;\n    switch (this.defaultUnits) {\n      case \"s\":\n        this._val = type.toSeconds();\n        break;\n      case \"i\":\n        this._val = type.toTicks();\n        break;\n      case \"hz\":\n        this._val = type.toFrequency();\n        break;\n      case \"midi\":\n        this._val = type.toMidi();\n        break;\n    }\n    return this;\n  }\n  /**\n   * Return the value in hertz\n   */\n  toFrequency() {\n    return 1 / this.toSeconds();\n  }\n  /**\n   * Return the time in samples\n   */\n  toSamples() {\n    return this.toSeconds() * this.context.sampleRate;\n  }\n  /**\n   * Return the time in milliseconds.\n   */\n  toMilliseconds() {\n    return this.toSeconds() * 1000;\n  }\n}\n", "import { getContext } from \"../Global.js\";\nimport { ftom } from \"./Conversions.js\";\nimport { TimeBaseClass } from \"./TimeBase.js\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass extends TimeBaseClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TimeClass\";\n  }\n  _getExpressions() {\n    return Object.assign(super._getExpressions(), {\n      now: {\n        method: capture => {\n          return this._now() + new this.constructor(this.context, capture).valueOf();\n        },\n        regexp: /^\\+(.+)/\n      },\n      quantize: {\n        method: capture => {\n          const quantTo = new TimeClass(this.context, capture).valueOf();\n          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n        },\n        regexp: /^@(.+)/\n      }\n    });\n  }\n  /**\n   * Quantize the time by the given subdivision. Optionally add a\n   * percentage which will move the time value towards the ideal\n   * quantized value by that percentage.\n   * @param  subdiv    The subdivision to quantize to\n   * @param  percent  Move the time value towards the quantized value by a percentage.\n   * @example\n   * Tone.Time(21).quantize(2); // returns 22\n   * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n   */\n  quantize(subdiv, percent = 1) {\n    const subdivision = new this.constructor(this.context, subdiv).valueOf();\n    const value = this.valueOf();\n    const multiple = Math.round(value / subdivision);\n    const ideal = multiple * subdivision;\n    const diff = ideal - value;\n    return value + diff * percent;\n  }\n  //-------------------------------------\n  // CONVERSIONS\n  //-------------------------------------\n  /**\n   * Convert a Time to Notation. The notation values are will be the\n   * closest representation between 1m to 128th note.\n   * @return {Notation}\n   * @example\n   * // if the Transport is at 120bpm:\n   * Tone.Time(2).toNotation(); // returns \"1m\"\n   */\n  toNotation() {\n    const time = this.toSeconds();\n    const testNotations = [\"1m\"];\n    for (let power = 1; power < 9; power++) {\n      const subdiv = Math.pow(2, power);\n      testNotations.push(subdiv + \"n.\");\n      testNotations.push(subdiv + \"n\");\n      testNotations.push(subdiv + \"t\");\n    }\n    testNotations.push(\"0\");\n    // find the closets notation representation\n    let closest = testNotations[0];\n    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n    testNotations.forEach(notation => {\n      const notationSeconds = new TimeClass(this.context, notation).toSeconds();\n      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n        closest = notation;\n        closestSeconds = notationSeconds;\n      }\n    });\n    return closest;\n  }\n  /**\n   * Return the time encoded as Bars:Beats:Sixteenths.\n   */\n  toBarsBeatsSixteenths() {\n    const quarterTime = this._beatsToUnits(1);\n    let quarters = this.valueOf() / quarterTime;\n    quarters = parseFloat(quarters.toFixed(4));\n    const measures = Math.floor(quarters / this._getTimeSignature());\n    let sixteenths = quarters % 1 * 4;\n    quarters = Math.floor(quarters) % this._getTimeSignature();\n    const sixteenthString = sixteenths.toString();\n    if (sixteenthString.length > 3) {\n      // the additional parseFloat removes insignificant trailing zeroes\n      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n    }\n    const progress = [measures, quarters, sixteenths];\n    return progress.join(\":\");\n  }\n  /**\n   * Return the time in ticks.\n   */\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n    const quarters = this.valueOf() / quarterTime;\n    return quarters * this._getPPQ();\n  }\n  /**\n   * Return the time in seconds.\n   */\n  toSeconds() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value as a midi note.\n   */\n  toMidi() {\n    return ftom(this.toFrequency());\n  }\n  _now() {\n    return this.context.now();\n  }\n}\n/**\n * Create a TimeClass from a time string or number. The time is computed against the\n * global Tone.Context. To use a specific context, use {@link TimeClass}\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\nexport function Time(value, units) {\n  return new TimeClass(getContext(), value, units);\n}\n", "/* eslint-disable key-spacing */\nimport { getContext } from \"../Global.js\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions.js\";\nimport { ftom, getA4, setA4 } from \"./Conversions.js\";\nimport { TimeClass } from \"./Time.js\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Frequency\";\n    this.defaultUnits = \"hz\";\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n  static get A4() {\n    return getA4();\n  }\n  static set A4(freq) {\n    setA4(freq);\n  }\n  //-------------------------------------\n  // \tAUGMENT BASE EXPRESSIONS\n  //-------------------------------------\n  _getExpressions() {\n    return Object.assign({}, super._getExpressions(), {\n      midi: {\n        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n        method(value) {\n          if (this.defaultUnits === \"midi\") {\n            return value;\n          } else {\n            return FrequencyClass.mtof(value);\n          }\n        }\n      },\n      note: {\n        regexp: /^([a-g]{1}(?:b|#|##|x|bb|###|#x|x#|bbb)?)(-?[0-9]+)/i,\n        method(pitch, octave) {\n          const index = noteToScaleIndex[pitch.toLowerCase()];\n          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n          if (this.defaultUnits === \"midi\") {\n            return noteNumber;\n          } else {\n            return FrequencyClass.mtof(noteNumber);\n          }\n        }\n      },\n      tr: {\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n        method(m, q, s) {\n          let total = 1;\n          if (m && m !== \"0\") {\n            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n          if (q && q !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(q));\n          }\n          if (s && s !== \"0\") {\n            total *= this._beatsToUnits(parseFloat(s) / 4);\n          }\n          return total;\n        }\n      }\n    });\n  }\n  //-------------------------------------\n  // \tEXPRESSIONS\n  //-------------------------------------\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return  A new transposed frequency\n   * @example\n   * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n   */\n  transpose(interval) {\n    return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n  }\n  /**\n   * Takes an array of semitone intervals and returns\n   * an array of frequencies transposed by those intervals.\n   * @return  Returns an array of Frequencies\n   * @example\n   * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n   */\n  harmonize(intervals) {\n    return intervals.map(interval => {\n      return this.transpose(interval);\n    });\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Frequency(\"C4\").toMidi(); // 60\n   */\n  toMidi() {\n    return ftom(this.valueOf());\n  }\n  /**\n   * Return the value of the frequency in Scientific Pitch Notation\n   * @example\n   * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n   */\n  toNote() {\n    const freq = this.toFrequency();\n    const log = Math.log2(freq / FrequencyClass.A4);\n    let noteNumber = Math.round(12 * log) + 57;\n    const octave = Math.floor(noteNumber / 12);\n    if (octave < 0) {\n      noteNumber += -12 * octave;\n    }\n    const noteName = scaleIndexToNote[noteNumber % 12];\n    return noteName + octave.toString();\n  }\n  /**\n   * Return the duration of one cycle in seconds.\n   */\n  toSeconds() {\n    return 1 / super.toSeconds();\n  }\n  /**\n   * Return the duration of one cycle in ticks\n   */\n  toTicks() {\n    const quarterTime = this._beatsToUnits(1);\n    const quarters = this.valueOf() / quarterTime;\n    return Math.floor(quarters * this._getPPQ());\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS HELPERS\n  //-------------------------------------\n  /**\n   * With no arguments, return 0\n   */\n  _noArg() {\n    return 0;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return freq;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return 1 / super._beatsToUnits(beats);\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return 1 / seconds;\n  }\n  /**\n   * Convert a MIDI note to frequency value.\n   * @param  midi The midi number to convert.\n   * @return The corresponding frequency value\n   */\n  static mtof(midi) {\n    return mtof(midi);\n  }\n  /**\n   * Convert a frequency value to a MIDI note.\n   * @param frequency The value to frequency value to convert.\n   */\n  static ftom(frequency) {\n    return ftom(frequency);\n  }\n}\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n/**\n * Note to scale index.\n * @hidden\n */\nconst noteToScaleIndex = {\n  cbbb: -3,\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  \"c##\": 2,\n  \"c###\": 3,\n  \"cx#\": 3,\n  \"c#x\": 3,\n  dbbb: -1,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  \"d##\": 4,\n  \"d###\": 5,\n  \"dx#\": 5,\n  \"d#x\": 5,\n  ebbb: 1,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  \"e##\": 6,\n  \"e###\": 7,\n  \"ex#\": 7,\n  \"e#x\": 7,\n  fbbb: 2,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  \"f##\": 7,\n  \"f###\": 8,\n  \"fx#\": 8,\n  \"f#x\": 8,\n  gbbb: 4,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  \"g##\": 9,\n  \"g###\": 10,\n  \"gx#\": 10,\n  \"g#x\": 10,\n  abbb: 6,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  \"a##\": 11,\n  \"a###\": 12,\n  \"ax#\": 12,\n  \"a#x\": 12,\n  bbbb: 8,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13,\n  \"b##\": 13,\n  \"b###\": 14,\n  \"bx#\": 14,\n  \"b#x\": 14\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global.js\";\nimport { TimeClass } from \"./Time.js\";\n/**\n * TransportTime is a time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass extends TimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"TransportTime\";\n  }\n  /**\n   * Return the current time in whichever context is relevant\n   */\n  _now() {\n    return this.context.transport.seconds;\n  }\n}\n/**\n * TransportTime is a time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value, units) {\n  return new TransportTimeClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global.js\";\nimport { Tone } from \"../Tone.js\";\nimport { FrequencyClass } from \"../type/Frequency.js\";\nimport { TimeClass } from \"../type/Time.js\";\nimport { TransportTimeClass } from \"../type/TransportTime.js\";\nimport { assertUsedScheduleTime } from \"../util/Debug.js\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults.js\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck.js\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport class ToneWithContext extends Tone {\n  constructor() {\n    super();\n    const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n    if (this.defaultContext) {\n      this.context = this.defaultContext;\n    } else {\n      this.context = options.context;\n    }\n  }\n  static getDefaults() {\n    return {\n      context: getContext()\n    };\n  }\n  /**\n   * Return the current time of the Context clock plus the lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.now());\n   * }, 100);\n   */\n  now() {\n    return this.context.currentTime + this.context.lookAhead;\n  }\n  /**\n   * Return the current time of the Context clock without any lookAhead.\n   * @example\n   * setInterval(() => {\n   * \tconsole.log(Tone.immediate());\n   * }, 100);\n   */\n  immediate() {\n    return this.context.currentTime;\n  }\n  /**\n   * The duration in seconds of one sample.\n   */\n  get sampleTime() {\n    return 1 / this.context.sampleRate;\n  }\n  /**\n   * The number of seconds of 1 processing block (128 samples)\n   * @example\n   * console.log(Tone.Destination.blockTime);\n   */\n  get blockTime() {\n    return 128 / this.context.sampleRate;\n  }\n  /**\n   * Convert the incoming time to seconds.\n   * This is calculated against the current {@link TransportClass} bpm\n   * @example\n   * const gain = new Tone.Gain();\n   * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n   * // ramp the tempo to 60 bpm over 30 seconds\n   * Tone.getTransport().bpm.rampTo(60, 30);\n   */\n  toSeconds(time) {\n    assertUsedScheduleTime(time);\n    return new TimeClass(this.context, time).toSeconds();\n  }\n  /**\n   * Convert the input to a frequency number\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toFrequency(\"4n\"));\n   */\n  toFrequency(freq) {\n    return new FrequencyClass(this.context, freq).toFrequency();\n  }\n  /**\n   * Convert the input time into ticks\n   * @example\n   * const gain = new Tone.Gain();\n   * console.log(gain.toTicks(\"4n\"));\n   */\n  toTicks(time) {\n    return new TransportTimeClass(this.context, time).toTicks();\n  }\n  //-------------------------------------\n  // \tGET/SET\n  //-------------------------------------\n  /**\n   * Get a subset of the properties which are in the partial props\n   */\n  _getPartialProperties(props) {\n    const options = this.get();\n    // remove attributes from the prop that are not in the partial\n    Object.keys(options).forEach(name => {\n      if (isUndef(props[name])) {\n        delete options[name];\n      }\n    });\n    return options;\n  }\n  /**\n   * Get the object's attributes.\n   * @example\n   * const osc = new Tone.Oscillator();\n   * console.log(osc.get());\n   */\n  get() {\n    const defaults = getDefaultsFromInstance(this);\n    Object.keys(defaults).forEach(attribute => {\n      if (Reflect.has(this, attribute)) {\n        const member = this[attribute];\n        if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n          defaults[attribute] = member.value;\n        } else if (member instanceof ToneWithContext) {\n          defaults[attribute] = member._getPartialProperties(defaults[attribute]);\n          // otherwise make sure it's a serializable type\n        } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n          defaults[attribute] = member;\n        } else {\n          // remove all undefined and unserializable attributes\n          delete defaults[attribute];\n        }\n      }\n    });\n    return defaults;\n  }\n  /**\n   * Set multiple properties at once with an object.\n   * @example\n   * const filter = new Tone.Filter().toDestination();\n   * // set values using an object\n   * filter.set({\n   * \tfrequency: \"C6\",\n   * \ttype: \"highpass\"\n   * });\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n   * player.autostart = true;\n   */\n  set(props) {\n    Object.keys(props).forEach(attribute => {\n      if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n        if (this[attribute] && isDefined(this[attribute].value) && isDefined(this[attribute].setValueAtTime)) {\n          // small optimization\n          if (this[attribute].value !== props[attribute]) {\n            this[attribute].value = props[attribute];\n          }\n        } else if (this[attribute] instanceof ToneWithContext) {\n          this[attribute].set(props[attribute]);\n        } else {\n          this[attribute] = props[attribute];\n        }\n      }\n    });\n    return this;\n  }\n}\n", "import { Timeline } from \"./Timeline.js\";\nimport { assertRange } from \"./Debug.js\";\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n * @internal\n */\nexport class StateTimeline extends Timeline {\n  constructor(initial = \"stopped\") {\n    super();\n    this.name = \"StateTimeline\";\n    this._initial = initial;\n    this.setStateAtTime(this._initial, 0);\n  }\n  /**\n   * Returns the scheduled state scheduled before or at\n   * the given time.\n   * @param  time  The time to query.\n   * @return  The name of the state input in setStateAtTime.\n   */\n  getValueAtTime(time) {\n    const event = this.get(time);\n    if (event !== null) {\n      return event.state;\n    } else {\n      return this._initial;\n    }\n  }\n  /**\n   * Add a state to the timeline.\n   * @param  state The name of the state to set.\n   * @param  time  The time to query.\n   * @param options Any additional options that are needed in the timeline.\n   */\n  setStateAtTime(state, time, options) {\n    assertRange(time, 0);\n    this.add(Object.assign({}, options, {\n      state,\n      time\n    }));\n    return this;\n  }\n  /**\n   * Return the event before the time with the given state\n   * @param  state The state to look for\n   * @param  time  When to check before\n   * @return  The event with the given state before the time\n   */\n  getLastState(state, time) {\n    // time = this.toSeconds(time);\n    const index = this._search(time);\n    for (let i = index; i >= 0; i--) {\n      const event = this._timeline[i];\n      if (event.state === state) {\n        return event;\n      }\n    }\n  }\n  /**\n   * Return the event after the time with the given state\n   * @param  state The state to look for\n   * @param  time  When to check from\n   * @return  The event with the given state after the time\n   */\n  getNextState(state, time) {\n    // time = this.toSeconds(time);\n    const index = this._search(time);\n    if (index !== -1) {\n      for (let i = index; i < this._timeline.length; i++) {\n        const event = this._timeline[i];\n        if (event.state === state) {\n          return event;\n        }\n      }\n    }\n  }\n}\n", "import { dbToGain, gainToDb } from \"../type/Conversions.js\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { ToneWithContext } from \"./ToneWithContext.js\";\nimport { EQ } from \"../util/Math.js\";\nimport { assert, assertRange } from \"../util/Debug.js\";\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n * @category Core\n */\nexport class Param extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(Param.getDefaults(), arguments, [\"param\", \"units\", \"convert\"]);\n    super(options);\n    this.name = \"Param\";\n    this.overridden = false;\n    /**\n     * The minimum output value\n     */\n    this._minOutput = 1e-7;\n    assert(isDefined(options.param) && (isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n    while (!isAudioParam(options.param)) {\n      options.param = options.param._param;\n    }\n    this._swappable = isDefined(options.swappable) ? options.swappable : false;\n    if (this._swappable) {\n      this.input = this.context.createGain();\n      // initialize\n      this._param = options.param;\n      this.input.connect(this._param);\n    } else {\n      this._param = this.input = options.param;\n    }\n    this._events = new Timeline(1000);\n    this._initialValue = this._param.defaultValue;\n    this.units = options.units;\n    this.convert = options.convert;\n    this._minValue = options.minValue;\n    this._maxValue = options.maxValue;\n    // if the value is defined, set it immediately\n    if (isDefined(options.value) && options.value !== this._toType(this._initialValue)) {\n      this.setValueAtTime(options.value, 0);\n    }\n  }\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      convert: true,\n      units: \"number\"\n    });\n  }\n  get value() {\n    const now = this.now();\n    return this.getValueAtTime(now);\n  }\n  set value(value) {\n    this.cancelScheduledValues(this.now());\n    this.setValueAtTime(value, this.now());\n  }\n  get minValue() {\n    // if it's not the default minValue, return it\n    if (isDefined(this._minValue)) {\n      return this._minValue;\n    } else if (this.units === \"time\" || this.units === \"frequency\" || this.units === \"normalRange\" || this.units === \"positive\" || this.units === \"transportTime\" || this.units === \"ticks\" || this.units === \"bpm\" || this.units === \"hertz\" || this.units === \"samples\") {\n      return 0;\n    } else if (this.units === \"audioRange\") {\n      return -1;\n    } else if (this.units === \"decibels\") {\n      return -Infinity;\n    } else {\n      return this._param.minValue;\n    }\n  }\n  get maxValue() {\n    if (isDefined(this._maxValue)) {\n      return this._maxValue;\n    } else if (this.units === \"normalRange\" || this.units === \"audioRange\") {\n      return 1;\n    } else {\n      return this._param.maxValue;\n    }\n  }\n  /**\n   * Type guard based on the unit name\n   */\n  _is(arg, type) {\n    return this.units === type;\n  }\n  /**\n   * Make sure the value is always in the defined range\n   */\n  _assertRange(value) {\n    if (isDefined(this.maxValue) && isDefined(this.minValue)) {\n      assertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n    }\n    return value;\n  }\n  /**\n   * Convert the given value from the type specified by Param.units\n   * into the destination value (such as Gain or Frequency).\n   */\n  _fromType(val) {\n    if (this.convert && !this.overridden) {\n      if (this._is(val, \"time\")) {\n        return this.toSeconds(val);\n      } else if (this._is(val, \"decibels\")) {\n        return dbToGain(val);\n      } else if (this._is(val, \"frequency\")) {\n        return this.toFrequency(val);\n      } else {\n        return val;\n      }\n    } else if (this.overridden) {\n      // if it's overridden, should only schedule 0s\n      return 0;\n    } else {\n      return val;\n    }\n  }\n  /**\n   * Convert the parameters value into the units specified by Param.units.\n   */\n  _toType(val) {\n    if (this.convert && this.units === \"decibels\") {\n      return gainToDb(val);\n    } else {\n      return val;\n    }\n  }\n  //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // all docs are generated from ParamInterface.ts\n  //-------------------------------------\n  setValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    const numericValue = this._fromType(value);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n    this._assertRange(numericValue);\n    this.log(this.units, \"setValueAtTime\", value, computedTime);\n    this._events.add({\n      time: computedTime,\n      type: \"setValueAtTime\",\n      value: numericValue\n    });\n    this._param.setValueAtTime(numericValue, computedTime);\n    return this;\n  }\n  getValueAtTime(time) {\n    const computedTime = Math.max(this.toSeconds(time), 0);\n    const after = this._events.getAfter(computedTime);\n    const before = this._events.get(computedTime);\n    let value = this._initialValue;\n    // if it was set by\n    if (before === null) {\n      value = this._initialValue;\n    } else if (before.type === \"setTargetAtTime\" && (after === null || after.type === \"setValueAtTime\")) {\n      const previous = this._events.getBefore(before.time);\n      let previousVal;\n      if (previous === null) {\n        previousVal = this._initialValue;\n      } else {\n        previousVal = previous.value;\n      }\n      if (before.type === \"setTargetAtTime\") {\n        value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n      }\n    } else if (after === null) {\n      value = before.value;\n    } else if (after.type === \"linearRampToValueAtTime\" || after.type === \"exponentialRampToValueAtTime\") {\n      let beforeValue = before.value;\n      if (before.type === \"setTargetAtTime\") {\n        const previous = this._events.getBefore(before.time);\n        if (previous === null) {\n          beforeValue = this._initialValue;\n        } else {\n          beforeValue = previous.value;\n        }\n      }\n      if (after.type === \"linearRampToValueAtTime\") {\n        value = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n      } else {\n        value = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n      }\n    } else {\n      value = before.value;\n    }\n    return this._toType(value);\n  }\n  setRampPoint(time) {\n    time = this.toSeconds(time);\n    let currentVal = this.getValueAtTime(time);\n    this.cancelAndHoldAtTime(time);\n    if (this._fromType(currentVal) === 0) {\n      currentVal = this._toType(this._minOutput);\n    }\n    this.setValueAtTime(currentVal, time);\n    return this;\n  }\n  linearRampToValueAtTime(value, endTime) {\n    const numericValue = this._fromType(value);\n    const computedTime = this.toSeconds(endTime);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n    this._assertRange(numericValue);\n    this._events.add({\n      time: computedTime,\n      type: \"linearRampToValueAtTime\",\n      value: numericValue\n    });\n    this.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n    this._param.linearRampToValueAtTime(numericValue, computedTime);\n    return this;\n  }\n  exponentialRampToValueAtTime(value, endTime) {\n    let numericValue = this._fromType(value);\n    // the value can't be 0\n    numericValue = EQ(numericValue, 0) ? this._minOutput : numericValue;\n    this._assertRange(numericValue);\n    const computedTime = this.toSeconds(endTime);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n    // store the event\n    this._events.add({\n      time: computedTime,\n      type: \"exponentialRampToValueAtTime\",\n      value: numericValue\n    });\n    this.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n    this._param.exponentialRampToValueAtTime(numericValue, computedTime);\n    return this;\n  }\n  exponentialRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n    return this;\n  }\n  linearRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n    return this;\n  }\n  targetRampTo(value, rampTime, startTime) {\n    startTime = this.toSeconds(startTime);\n    this.setRampPoint(startTime);\n    this.exponentialApproachValueAtTime(value, startTime, rampTime);\n    return this;\n  }\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    time = this.toSeconds(time);\n    rampTime = this.toSeconds(rampTime);\n    const timeConstant = Math.log(rampTime + 1) / Math.log(200);\n    this.setTargetAtTime(value, time, timeConstant);\n    // at 90% start a linear ramp to the final value\n    this.cancelAndHoldAtTime(time + rampTime * 0.9);\n    this.linearRampToValueAtTime(value, time + rampTime);\n    return this;\n  }\n  setTargetAtTime(value, startTime, timeConstant) {\n    const numericValue = this._fromType(value);\n    // The value will never be able to approach without timeConstant > 0.\n    assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n    const computedTime = this.toSeconds(startTime);\n    this._assertRange(numericValue);\n    assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n    this._events.add({\n      constant: timeConstant,\n      time: computedTime,\n      type: \"setTargetAtTime\",\n      value: numericValue\n    });\n    this.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n    this._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n    return this;\n  }\n  setValueCurveAtTime(values, startTime, duration, scaling = 1) {\n    duration = this.toSeconds(duration);\n    startTime = this.toSeconds(startTime);\n    const startingValue = this._fromType(values[0]) * scaling;\n    this.setValueAtTime(this._toType(startingValue), startTime);\n    const segTime = duration / (values.length - 1);\n    for (let i = 1; i < values.length; i++) {\n      const numericValue = this._fromType(values[i]) * scaling;\n      this.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n    }\n    return this;\n  }\n  cancelScheduledValues(time) {\n    const computedTime = this.toSeconds(time);\n    assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n    this._events.cancel(computedTime);\n    this._param.cancelScheduledValues(computedTime);\n    this.log(this.units, \"cancelScheduledValues\", computedTime);\n    return this;\n  }\n  cancelAndHoldAtTime(time) {\n    const computedTime = this.toSeconds(time);\n    const valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n    // remove the schedule events\n    assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n    this.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n    // if there is an event at the given computedTime\n    // and that even is not a \"set\"\n    const before = this._events.get(computedTime);\n    const after = this._events.getAfter(computedTime);\n    if (before && EQ(before.time, computedTime)) {\n      // remove everything after\n      if (after) {\n        this._param.cancelScheduledValues(after.time);\n        this._events.cancel(after.time);\n      } else {\n        this._param.cancelAndHoldAtTime(computedTime);\n        this._events.cancel(computedTime + this.sampleTime);\n      }\n    } else if (after) {\n      this._param.cancelScheduledValues(after.time);\n      // cancel the next event(s)\n      this._events.cancel(after.time);\n      if (after.type === \"linearRampToValueAtTime\") {\n        this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n      } else if (after.type === \"exponentialRampToValueAtTime\") {\n        this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n      }\n    }\n    // set the value at the given time\n    this._events.add({\n      time: computedTime,\n      type: \"setValueAtTime\",\n      value: valueAtTime\n    });\n    this._param.setValueAtTime(valueAtTime, computedTime);\n    return this;\n  }\n  rampTo(value, rampTime = 0.1, startTime) {\n    if (this.units === \"frequency\" || this.units === \"bpm\" || this.units === \"decibels\") {\n      this.exponentialRampTo(value, rampTime, startTime);\n    } else {\n      this.linearRampTo(value, rampTime, startTime);\n    }\n    return this;\n  }\n  /**\n   * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n   * The applied values will start at the context's current time and schedule\n   * all of the events which are scheduled on this Param onto the passed in param.\n   */\n  apply(param) {\n    const now = this.context.currentTime;\n    // set the param's value at the current time and schedule everything else\n    param.setValueAtTime(this.getValueAtTime(now), now);\n    // if the previous event was a curve, then set the rest of it\n    const previousEvent = this._events.get(now);\n    if (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n      // approx it until the next event with linear ramps\n      const nextEvent = this._events.getAfter(previousEvent.time);\n      // or for 2 seconds if there is no event\n      const endTime = nextEvent ? nextEvent.time : now + 2;\n      const subdivisions = (endTime - now) / 10;\n      for (let i = now; i < endTime; i += subdivisions) {\n        param.linearRampToValueAtTime(this.getValueAtTime(i), i);\n      }\n    }\n    this._events.forEachAfter(this.context.currentTime, event => {\n      if (event.type === \"cancelScheduledValues\") {\n        param.cancelScheduledValues(event.time);\n      } else if (event.type === \"setTargetAtTime\") {\n        param.setTargetAtTime(event.value, event.time, event.constant);\n      } else {\n        param[event.type](event.value, event.time);\n      }\n    });\n    return this;\n  }\n  /**\n   * Replace the Param's internal AudioParam. Will apply scheduled curves\n   * onto the parameter and replace the connections.\n   */\n  setParam(param) {\n    assert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n    const input = this.input;\n    input.disconnect(this._param);\n    this.apply(param);\n    this._param = param;\n    input.connect(this._param);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._events.dispose();\n    return this;\n  }\n  get defaultValue() {\n    return this._toType(this._param.defaultValue);\n  }\n  //-------------------------------------\n  // \tAUTOMATION CURVE CALCULATIONS\n  // \tMIT License, copyright (c) 2014 Jordan Santell\n  //-------------------------------------\n  // Calculates the the value along the curve produced by setTargetAtTime\n  _exponentialApproach(t0, v0, v1, timeConstant, t) {\n    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n  }\n  // Calculates the the value along the curve produced by linearRampToValueAtTime\n  _linearInterpolate(t0, v0, t1, v1, t) {\n    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n  }\n  // Calculates the the value along the curve produced by exponentialRampToValueAtTime\n  _exponentialInterpolate(t0, v0, t1, v1, t) {\n    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n  }\n}\n", "import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { Param } from \"./Param.js\";\nimport { ToneWithContext } from \"./ToneWithContext.js\";\nimport { assert, warn } from \"../util/Debug.js\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n * @category Core\n */\nexport class ToneAudioNode extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    /**\n     * List all of the node that must be set to match the ChannelProperties\n     */\n    this._internalChannels = [];\n  }\n  /**\n   * The number of inputs feeding into the AudioNode.\n   * For source nodes, this will be 0.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfInputs);\n   */\n  get numberOfInputs() {\n    if (isDefined(this.input)) {\n      if (isAudioParam(this.input) || this.input instanceof Param) {\n        return 1;\n      } else {\n        return this.input.numberOfInputs;\n      }\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The number of outputs of the AudioNode.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfOutputs);\n   */\n  get numberOfOutputs() {\n    if (isDefined(this.output)) {\n      return this.output.numberOfOutputs;\n    } else {\n      return 0;\n    }\n  }\n  //-------------------------------------\n  // AUDIO PROPERTIES\n  //-------------------------------------\n  /**\n   * Used to decide which nodes to get/set properties on\n   */\n  _isAudioNode(node) {\n    return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n  }\n  /**\n   * Get all of the audio nodes (either internal or input/output) which together\n   * make up how the class node responds to channel input/output\n   */\n  _getInternalNodes() {\n    const nodeList = this._internalChannels.slice(0);\n    if (this._isAudioNode(this.input)) {\n      nodeList.push(this.input);\n    }\n    if (this._isAudioNode(this.output)) {\n      if (this.input !== this.output) {\n        nodeList.push(this.output);\n      }\n    }\n    return nodeList;\n  }\n  /**\n   * Set the audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   * @param options\n   */\n  _setChannelProperties(options) {\n    const nodeList = this._getInternalNodes();\n    nodeList.forEach(node => {\n      node.channelCount = options.channelCount;\n      node.channelCountMode = options.channelCountMode;\n      node.channelInterpretation = options.channelInterpretation;\n    });\n  }\n  /**\n   * Get the current audio options for this node such as channelInterpretation\n   * channelCount, etc.\n   */\n  _getChannelProperties() {\n    const nodeList = this._getInternalNodes();\n    assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n    // use the first node to get properties\n    // they should all be the same\n    const node = nodeList[0];\n    return {\n      channelCount: node.channelCount,\n      channelCountMode: node.channelCountMode,\n      channelInterpretation: node.channelInterpretation\n    };\n  }\n  /**\n   * channelCount is the number of channels used when up-mixing and down-mixing\n   * connections to any inputs to the node. The default value is 2 except for\n   * specific nodes where its value is specially determined.\n   */\n  get channelCount() {\n    return this._getChannelProperties().channelCount;\n  }\n  set channelCount(channelCount) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelCount\n    }));\n  }\n  /**\n   * channelCountMode determines how channels will be counted when up-mixing and\n   * down-mixing connections to any inputs to the node.\n   * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n   * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n   * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n   * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n   */\n  get channelCountMode() {\n    return this._getChannelProperties().channelCountMode;\n  }\n  set channelCountMode(channelCountMode) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelCountMode\n    }));\n  }\n  /**\n   * channelInterpretation determines how individual channels will be treated\n   * when up-mixing and down-mixing connections to any inputs to the node.\n   * The default value is \"speakers\".\n   */\n  get channelInterpretation() {\n    return this._getChannelProperties().channelInterpretation;\n  }\n  set channelInterpretation(channelInterpretation) {\n    const props = this._getChannelProperties();\n    // merge it with the other properties\n    this._setChannelProperties(Object.assign(props, {\n      channelInterpretation\n    }));\n  }\n  //-------------------------------------\n  // CONNECTIONS\n  //-------------------------------------\n  /**\n   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n   * @param destination The output to connect to\n   * @param outputNum The output to connect from\n   * @param inputNum The input to connect to\n   */\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @example\n   * const osc = new Tone.Oscillator(\"C2\").start();\n   * osc.toDestination();\n   */\n  toDestination() {\n    this.connect(this.context.destination);\n    return this;\n  }\n  /**\n   * Connect the output to the context's destination node.\n   * @see {@link toDestination}\n   * @deprecated\n   */\n  toMaster() {\n    warn(\"toMaster() has been renamed toDestination()\");\n    return this.toDestination();\n  }\n  /**\n   * disconnect the output\n   */\n  disconnect(destination, outputNum = 0, inputNum = 0) {\n    disconnect(this, destination, outputNum, inputNum);\n    return this;\n  }\n  /**\n   * Connect the output of this node to the rest of the nodes in series.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n   * player.autostart = true;\n   * const filter = new Tone.AutoFilter(4).start();\n   * const distortion = new Tone.Distortion(0.5);\n   * // connect the player to the filter, distortion and then to the master output\n   * player.chain(filter, distortion, Tone.Destination);\n   */\n  chain(...nodes) {\n    connectSeries(this, ...nodes);\n    return this;\n  }\n  /**\n   * connect the output of this node to the rest of the nodes in parallel.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n   * player.autostart = true;\n   * const pitchShift = new Tone.PitchShift(4).toDestination();\n   * const filter = new Tone.Filter(\"G5\").toDestination();\n   * // connect a node to the pitch shift and filter in parallel\n   * player.fan(pitchShift, filter);\n   */\n  fan(...nodes) {\n    nodes.forEach(node => this.connect(node));\n    return this;\n  }\n  /**\n   * Dispose and disconnect\n   */\n  dispose() {\n    super.dispose();\n    if (isDefined(this.input)) {\n      if (this.input instanceof ToneAudioNode) {\n        this.input.dispose();\n      } else if (isAudioNode(this.input)) {\n        this.input.disconnect();\n      }\n    }\n    if (isDefined(this.output)) {\n      if (this.output instanceof ToneAudioNode) {\n        this.output.dispose();\n      } else if (isAudioNode(this.output)) {\n        this.output.disconnect();\n      }\n    }\n    this._internalChannels = [];\n    return this;\n  }\n}\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes) {\n  const first = nodes.shift();\n  nodes.reduce((prev, current) => {\n    if (prev instanceof ToneAudioNode) {\n      prev.connect(current);\n    } else if (isAudioNode(prev)) {\n      connect(prev, current);\n    }\n    return current;\n  }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n  assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n    assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n  }\n  assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n  // resolve the input of the dstNode\n  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n    if (isDefined(dstNode.input)) {\n      dstNode = dstNode.input;\n    }\n  }\n  while (srcNode instanceof ToneAudioNode) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  // make the connection\n  if (isAudioParam(dstNode)) {\n    srcNode.connect(dstNode, outputNumber);\n  } else {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n  // resolve the destination node\n  if (isDefined(dstNode)) {\n    while (dstNode instanceof ToneAudioNode) {\n      dstNode = dstNode.input;\n    }\n  }\n  // resolve the src node\n  while (!isAudioNode(srcNode)) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  if (isAudioParam(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber);\n  } else if (isAudioNode(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber, inputNumber);\n  } else {\n    srcNode.disconnect();\n  }\n}\n/**\n * Connect the output of one or more source nodes to a single destination node\n * @param nodes One or more source nodes followed by one destination node\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const player1 = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const filter = new Tone.Filter(\"G5\").toDestination();\n * // connect nodes to a common destination\n * Tone.fanIn(player, player1, filter);\n */\nexport function fanIn(...nodes) {\n  const dstNode = nodes.pop();\n  if (isDefined(dstNode)) {\n    nodes.forEach(node => connect(node, dstNode));\n  }\n}\n", "import { Param } from \"../context/Param.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { ToneAudioNode } from \"./ToneAudioNode.js\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    super(options);\n    this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n    this._gainNode = this.context.createGain();\n    // input = output\n    this.input = this._gainNode;\n    this.output = this._gainNode;\n    this.gain = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(this, \"gain\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      gain: 1,\n      units: \"gain\"\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._gainNode.disconnect();\n    this.gain.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { assert } from \"../core/util/Debug.js\";\n/**\n * Base class for fire-and-forget nodes\n */\nexport class OneShotSource extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n    this.onended = noOp;\n    /**\n     * The start time\n     */\n    this._startTime = -1;\n    /**\n     * The stop time\n     */\n    this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n    this._timeout = -1;\n    /**\n     * The public output node\n     */\n    this.output = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n    this._gainNode = this.output;\n    /**\n     * Get the playback state at the given time\n     */\n    this.getStateAtTime = function (time) {\n      const computedTime = this.toSeconds(time);\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n    this._curve = options.curve;\n    this.onended = options.onended;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  }\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n  _startGain(time, gain = 1) {\n    assert(this._startTime === -1, \"Source cannot be started more than once\");\n    // apply a fade in envelope\n    const fadeInTime = this.toSeconds(this._fadeIn);\n    // record the start time\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime);\n    // schedule the envelope\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n    return this;\n  }\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n  stop(time) {\n    this.log(\"stop\", time);\n    this._stopGain(this.toSeconds(time));\n    return this;\n  }\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n  _stopGain(time) {\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n    // cancel the previous stop\n    this.cancelStop();\n    // the fadeOut time\n    const fadeOutTime = this.toSeconds(this._fadeOut);\n    // schedule the stop callback\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.now());\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(() => {\n      // allow additional time for the exponential curve to fully decay\n      const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n      this._stopSource(this.now() + additionalTail);\n      this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  }\n  /**\n   * Invoke the onended callback\n   */\n  _onended() {\n    if (this.onended !== noOp) {\n      this.onended(this);\n      // overwrite onended to make sure it only is called once\n      this.onended = noOp;\n      // dispose when it's ended to free up for garbage collection only in the online context\n      if (!this.context.isOffline) {\n        const disposeCallback = () => this.dispose();\n        // @ts-ignore\n        if (typeof window.requestIdleCallback !== \"undefined\") {\n          // @ts-ignore\n          window.requestIdleCallback(disposeCallback);\n        } else {\n          setTimeout(disposeCallback, 1000);\n        }\n      }\n    }\n  }\n  /**\n   * Get the playback state at the current time\n   */\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Cancel a scheduled stop event\n   */\n  cancelStop() {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\");\n    // cancel the stop envelope\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._gainNode.dispose();\n    this.onended = noOp;\n    return this;\n  }\n}\n", "import { connect } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { OneShotSource } from \"../source/OneShotSource.js\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource extends OneShotSource {\n  constructor() {\n    const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n    super(options);\n    this.name = \"ToneConstantSource\";\n    /**\n     * The signal generator\n     */\n    this._source = this.context.createConstantSource();\n    connect(this._source, this._gainNode);\n    this.offset = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._source.offset,\n      units: options.units,\n      value: options.offset,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      convert: true,\n      offset: 1,\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the source node at the given time\n   * @param  time When to start the source\n   */\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    this._startGain(computedTime);\n    this._source.start(computedTime);\n    return this;\n  }\n  _stopSource(time) {\n    this._source.stop(time);\n  }\n  dispose() {\n    super.dispose();\n    if (this.state === \"started\") {\n      this.stop();\n    }\n    this._source.disconnect();\n    this.offset.dispose();\n    return this;\n  }\n}\n", "import { Param } from \"../core/context/Param.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { connect } from \"../core/context/ToneAudioNode.js\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ToneConstantSource } from \"./ToneConstantSource.js\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    super(options);\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n    this.override = true;\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this._constantSource.start(0);\n    this.input = this._param = this._constantSource.offset;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n  connect(destination, outputNum = 0, inputNum = 0) {\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._param.dispose();\n    this._constantSource.dispose();\n    return this;\n  }\n  //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n    return this;\n  }\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n    return this;\n  }\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n    return this;\n  }\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n    return this;\n  }\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n    return this;\n  }\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n    return this;\n  }\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n    return this;\n  }\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n    return this;\n  }\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n    return this;\n  }\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n    return this;\n  }\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n    return this;\n  }\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n    return this;\n  }\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n    return this;\n  }\n  get value() {\n    return this._param.value;\n  }\n  set value(value) {\n    this._param.value = value;\n  }\n  get convert() {\n    return this._param.convert;\n  }\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n  get units() {\n    return this._param.units;\n  }\n  get overridden() {\n    return this._param.overridden;\n  }\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n  get maxValue() {\n    return this._param.maxValue;\n  }\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * @see {@link Param.apply}.\n   */\n  apply(param) {\n    this._param.apply(param);\n    return this;\n  }\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0);\n    // reset the value\n    destination.setValueAtTime(0, 0);\n    // mark the value as overridden\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n  connect(signal, destination, outputNum, inputNum);\n}\n", "import { Param } from \"../context/Param.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isUndef } from \"../util/TypeCheck.js\";\n/**\n * A Param class just for computing ticks. Similar to the {@link Param} class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam extends Param {\n  constructor() {\n    const options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"TickParam\";\n    /**\n     * The timeline which tracks all of the automations.\n     */\n    this._events = new Timeline(Infinity);\n    /**\n     * The internal holder for the multiplier value\n     */\n    this._multiplier = 1;\n    // set the multiplier\n    this._multiplier = options.multiplier;\n    // clear the ticks from the beginning\n    this._events.cancel(0);\n    // set an initial event\n    this._events.add({\n      ticks: 0,\n      time: 0,\n      type: \"setValueAtTime\",\n      value: this._fromType(options.value)\n    });\n    this.setValueAtTime(options.value, 0);\n  }\n  static getDefaults() {\n    return Object.assign(Param.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n  setTargetAtTime(value, time, constant) {\n    // approximate it with multiple linear ramps\n    time = this.toSeconds(time);\n    this.setRampPoint(time);\n    const computedValue = this._fromType(value);\n    // start from previously scheduled value\n    const prevEvent = this._events.get(time);\n    const segments = Math.round(Math.max(1 / constant, 1));\n    for (let i = 0; i <= segments; i++) {\n      const segTime = constant * i + time;\n      const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n      this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n    }\n    return this;\n  }\n  setValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    super.setValueAtTime(value, time);\n    const event = this._events.get(computedTime);\n    const previousEvent = this._events.previousEvent(event);\n    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  }\n  linearRampToValueAtTime(value, time) {\n    const computedTime = this.toSeconds(time);\n    super.linearRampToValueAtTime(value, time);\n    const event = this._events.get(computedTime);\n    const previousEvent = this._events.previousEvent(event);\n    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n    event.ticks = Math.max(ticksUntilTime, 0);\n    return this;\n  }\n  exponentialRampToValueAtTime(value, time) {\n    // aproximate it with multiple linear ramps\n    time = this.toSeconds(time);\n    const computedVal = this._fromType(value);\n    // start from previously scheduled value\n    const prevEvent = this._events.get(time);\n    // approx 10 segments per second\n    const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n    const segmentDur = (time - prevEvent.time) / segments;\n    for (let i = 0; i <= segments; i++) {\n      const segTime = segmentDur * i + prevEvent.time;\n      const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n      this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n    }\n    return this;\n  }\n  /**\n   * Returns the tick value at the time. Takes into account\n   * any automation curves scheduled on the signal.\n   * @param  event The time to get the tick count at\n   * @return The number of ticks which have elapsed at the time given any automations.\n   */\n  _getTicksUntilEvent(event, time) {\n    if (event === null) {\n      event = {\n        ticks: 0,\n        time: 0,\n        type: \"setValueAtTime\",\n        value: 0\n      };\n    } else if (isUndef(event.ticks)) {\n      const previousEvent = this._events.previousEvent(event);\n      event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n    }\n    const val0 = this._fromType(this.getValueAtTime(event.time));\n    let val1 = this._fromType(this.getValueAtTime(time));\n    // if it's right on the line, take the previous value\n    const onTheLineEvent = this._events.get(time);\n    if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === \"setValueAtTime\") {\n      val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n    }\n    return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n  }\n  /**\n   * Returns the tick value at the time. Takes into account\n   * any automation curves scheduled on the signal.\n   * @param  time The time to get the tick count at\n   * @return The number of ticks which have elapsed at the time given any automations.\n   */\n  getTicksAtTime(time) {\n    const computedTime = this.toSeconds(time);\n    const event = this._events.get(computedTime);\n    return Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n  }\n  /**\n   * Return the elapsed time of the number of ticks from the given time\n   * @param ticks The number of ticks to calculate\n   * @param  time The time to get the next tick from\n   * @return The duration of the number of ticks from the given time in seconds\n   */\n  getDurationOfTicks(ticks, time) {\n    const computedTime = this.toSeconds(time);\n    const currentTick = this.getTicksAtTime(time);\n    return this.getTimeOfTick(currentTick + ticks) - computedTime;\n  }\n  /**\n   * Given a tick, returns the time that tick occurs at.\n   * @return The time that the tick occurs.\n   */\n  getTimeOfTick(tick) {\n    const before = this._events.get(tick, \"ticks\");\n    const after = this._events.getAfter(tick, \"ticks\");\n    if (before && before.ticks === tick) {\n      return before.time;\n    } else if (before && after && after.type === \"linearRampToValueAtTime\" && before.value !== after.value) {\n      const val0 = this._fromType(this.getValueAtTime(before.time));\n      const val1 = this._fromType(this.getValueAtTime(after.time));\n      const delta = (val1 - val0) / (after.time - before.time);\n      const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n      const sol1 = (-val0 + k) / delta;\n      const sol2 = (-val0 - k) / delta;\n      return (sol1 > 0 ? sol1 : sol2) + before.time;\n    } else if (before) {\n      if (before.value === 0) {\n        return Infinity;\n      } else {\n        return before.time + (tick - before.ticks) / before.value;\n      }\n    } else {\n      return tick / this._initialValue;\n    }\n  }\n  /**\n   * Convert some number of ticks their the duration in seconds accounting\n   * for any automation curves starting at the given time.\n   * @param  ticks The number of ticks to convert to seconds.\n   * @param  when  When along the automation timeline to convert the ticks.\n   * @return The duration in seconds of the ticks.\n   */\n  ticksToTime(ticks, when) {\n    return this.getDurationOfTicks(ticks, when);\n  }\n  /**\n   * The inverse of {@link ticksToTime}. Convert a duration in\n   * seconds to the corresponding number of ticks accounting for any\n   * automation curves starting at the given time.\n   * @param  duration The time interval to convert to ticks.\n   * @param  when When along the automation timeline to convert the ticks.\n   * @return The duration in ticks.\n   */\n  timeToTicks(duration, when) {\n    const computedTime = this.toSeconds(when);\n    const computedDuration = this.toSeconds(duration);\n    const startTicks = this.getTicksAtTime(computedTime);\n    const endTicks = this.getTicksAtTime(computedTime + computedDuration);\n    return endTicks - startTicks;\n  }\n  /**\n   * Convert from the type when the unit value is BPM\n   */\n  _fromType(val) {\n    if (this.units === \"bpm\" && this.multiplier) {\n      return 1 / (60 / val / this.multiplier);\n    } else {\n      return super._fromType(val);\n    }\n  }\n  /**\n   * Special case of type conversion where the units === \"bpm\"\n   */\n  _toType(val) {\n    if (this.units === \"bpm\" && this.multiplier) {\n      return val / this.multiplier * 60;\n    } else {\n      return super._toType(val);\n    }\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n  get multiplier() {\n    return this._multiplier;\n  }\n  set multiplier(m) {\n    // get and reset the current value with the new multiplier\n    // might be necessary to clear all the previous values\n    const currentVal = this.value;\n    this._multiplier = m;\n    this.cancelScheduledValues(0);\n    this.setValueAtTime(currentVal, 0);\n  }\n}\n", "import { Signal } from \"../../signal/Signal.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { TickParam } from \"./TickParam.js\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal extends Signal {\n  constructor() {\n    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"TickSignal\";\n    this.input = this._param = new TickParam({\n      context: this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n  ticksToTime(ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  }\n  timeToTicks(duration, when) {\n    return this._param.timeToTicks(duration, when);\n  }\n  getTimeOfTick(tick) {\n    return this._param.getTimeOfTick(tick);\n  }\n  getDurationOfTicks(ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  }\n  getTicksAtTime(time) {\n    return this._param.getTicksAtTime(time);\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n  get multiplier() {\n    return this._param.multiplier;\n  }\n  set multiplier(m) {\n    this._param.multiplier = m;\n  }\n  dispose() {\n    super.dispose();\n    this._param.dispose();\n    return this;\n  }\n}\n", "import { ToneWithContext } from \"../context/ToneWithContext.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { StateTimeline } from \"../util/StateTimeline.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { TickSignal } from \"./TickSignal.js\";\nimport { EQ } from \"../util/Math.js\";\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n    super(options);\n    this.name = \"TickSource\";\n    /**\n     * The state timeline\n     */\n    this._state = new StateTimeline();\n    /**\n     * The offset values of the ticks\n     */\n    this._tickOffset = new Timeline();\n    /**\n     * Memoized values of getTicksAtTime at events with state other than \"started\"\n     */\n    this._ticksAtTime = new Timeline();\n    /**\n     * Memoized values of getSecondsAtTime at events with state other than \"started\"\n     */\n    this._secondsAtTime = new Timeline();\n    this.frequency = new TickSignal({\n      context: this.context,\n      units: options.units,\n      value: options.frequency\n    });\n    readOnly(this, \"frequency\");\n    // set the initial state\n    this._state.setStateAtTime(\"stopped\", 0);\n    // add the first event\n    this.setTicksAtTime(0, 0);\n  }\n  static getDefaults() {\n    return Object.assign({\n      frequency: 1,\n      units: \"hertz\"\n    }, ToneWithContext.getDefaults());\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n   */\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Start the clock at the given time. Optionally pass in an offset\n   * of where to start the tick counter from.\n   * @param  time    The time the clock should start\n   * @param offset The number of ticks to start the source at\n   */\n  start(time, offset) {\n    const computedTime = this.toSeconds(time);\n    if (this._state.getValueAtTime(computedTime) !== \"started\") {\n      this._state.setStateAtTime(\"started\", computedTime);\n      if (isDefined(offset)) {\n        this.setTicksAtTime(offset, computedTime);\n      }\n      this._ticksAtTime.cancel(computedTime);\n      this._secondsAtTime.cancel(computedTime);\n    }\n    return this;\n  }\n  /**\n   * Stop the clock. Stopping the clock resets the tick counter to 0.\n   * @param time The time when the clock should stop.\n   */\n  stop(time) {\n    const computedTime = this.toSeconds(time);\n    // cancel the previous stop\n    if (this._state.getValueAtTime(computedTime) === \"stopped\") {\n      const event = this._state.get(computedTime);\n      if (event && event.time > 0) {\n        this._tickOffset.cancel(event.time);\n        this._state.cancel(event.time);\n      }\n    }\n    this._state.cancel(computedTime);\n    this._state.setStateAtTime(\"stopped\", computedTime);\n    this.setTicksAtTime(0, computedTime);\n    this._ticksAtTime.cancel(computedTime);\n    this._secondsAtTime.cancel(computedTime);\n    return this;\n  }\n  /**\n   * Pause the clock. Pausing does not reset the tick counter.\n   * @param time The time when the clock should stop.\n   */\n  pause(time) {\n    const computedTime = this.toSeconds(time);\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      this._state.setStateAtTime(\"paused\", computedTime);\n      this._ticksAtTime.cancel(computedTime);\n      this._secondsAtTime.cancel(computedTime);\n    }\n    return this;\n  }\n  /**\n   * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n   * @param time When to clear the events after\n   */\n  cancel(time) {\n    time = this.toSeconds(time);\n    this._state.cancel(time);\n    this._tickOffset.cancel(time);\n    this._ticksAtTime.cancel(time);\n    this._secondsAtTime.cancel(time);\n    return this;\n  }\n  /**\n   * Get the elapsed ticks at the given time\n   * @param  time  When to get the tick value\n   * @return The number of ticks\n   */\n  getTicksAtTime(time) {\n    const computedTime = this.toSeconds(time);\n    const stopEvent = this._state.getLastState(\"stopped\", computedTime);\n    // get previously memoized ticks if available\n    const memoizedEvent = this._ticksAtTime.get(computedTime);\n    // this event allows forEachBetween to iterate until the current time\n    const tmpEvent = {\n      state: \"paused\",\n      time: computedTime\n    };\n    this._state.add(tmpEvent);\n    // keep track of the previous offset event\n    let lastState = memoizedEvent ? memoizedEvent : stopEvent;\n    let elapsedTicks = memoizedEvent ? memoizedEvent.ticks : 0;\n    let eventToMemoize = null;\n    // iterate through all the events since the last stop\n    this._state.forEachBetween(lastState.time, computedTime + this.sampleTime, e => {\n      let periodStartTime = lastState.time;\n      // if there is an offset event in this period use that\n      const offsetEvent = this._tickOffset.get(e.time);\n      if (offsetEvent && offsetEvent.time >= lastState.time) {\n        elapsedTicks = offsetEvent.ticks;\n        periodStartTime = offsetEvent.time;\n      }\n      if (lastState.state === \"started\" && e.state !== \"started\") {\n        elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);\n        // do not memoize the temporary event\n        if (e.time !== tmpEvent.time) {\n          eventToMemoize = {\n            state: e.state,\n            time: e.time,\n            ticks: elapsedTicks\n          };\n        }\n      }\n      lastState = e;\n    });\n    // remove the temporary event\n    this._state.remove(tmpEvent);\n    // memoize the ticks at the most recent event with state other than \"started\"\n    if (eventToMemoize) {\n      this._ticksAtTime.add(eventToMemoize);\n    }\n    // return the ticks\n    return elapsedTicks;\n  }\n  /**\n   * The number of times the callback was invoked. Starts counting at 0\n   * and increments after the callback was invoked. Returns -1 when stopped.\n   */\n  get ticks() {\n    return this.getTicksAtTime(this.now());\n  }\n  set ticks(t) {\n    this.setTicksAtTime(t, this.now());\n  }\n  /**\n   * The time since ticks=0 that the TickSource has been running. Accounts\n   * for tempo curves\n   */\n  get seconds() {\n    return this.getSecondsAtTime(this.now());\n  }\n  set seconds(s) {\n    const now = this.now();\n    const ticks = this.frequency.timeToTicks(s, now);\n    this.setTicksAtTime(ticks, now);\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n  getSecondsAtTime(time) {\n    time = this.toSeconds(time);\n    const stopEvent = this._state.getLastState(\"stopped\", time);\n    // this event allows forEachBetween to iterate until the current time\n    const tmpEvent = {\n      state: \"paused\",\n      time\n    };\n    this._state.add(tmpEvent);\n    // get previously memoized seconds if available\n    const memoizedEvent = this._secondsAtTime.get(time);\n    // keep track of the previous offset event\n    let lastState = memoizedEvent ? memoizedEvent : stopEvent;\n    let elapsedSeconds = memoizedEvent ? memoizedEvent.seconds : 0;\n    let eventToMemoize = null;\n    // iterate through all the events since the last stop\n    this._state.forEachBetween(lastState.time, time + this.sampleTime, e => {\n      let periodStartTime = lastState.time;\n      // if there is an offset event in this period use that\n      const offsetEvent = this._tickOffset.get(e.time);\n      if (offsetEvent && offsetEvent.time >= lastState.time) {\n        elapsedSeconds = offsetEvent.seconds;\n        periodStartTime = offsetEvent.time;\n      }\n      if (lastState.state === \"started\" && e.state !== \"started\") {\n        elapsedSeconds += e.time - periodStartTime;\n        // do not memoize the temporary event\n        if (e.time !== tmpEvent.time) {\n          eventToMemoize = {\n            state: e.state,\n            time: e.time,\n            seconds: elapsedSeconds\n          };\n        }\n      }\n      lastState = e;\n    });\n    // remove the temporary event\n    this._state.remove(tmpEvent);\n    // memoize the seconds at the most recent event with state other than \"started\"\n    if (eventToMemoize) {\n      this._secondsAtTime.add(eventToMemoize);\n    }\n    // return the seconds\n    return elapsedSeconds;\n  }\n  /**\n   * Set the clock's ticks at the given time.\n   * @param  ticks The tick value to set\n   * @param  time  When to set the tick value\n   */\n  setTicksAtTime(ticks, time) {\n    time = this.toSeconds(time);\n    this._tickOffset.cancel(time);\n    this._tickOffset.add({\n      seconds: this.frequency.getDurationOfTicks(ticks, time),\n      ticks,\n      time\n    });\n    this._ticksAtTime.cancel(time);\n    this._secondsAtTime.cancel(time);\n    return this;\n  }\n  /**\n   * Returns the scheduled state at the given time.\n   * @param  time  The time to query.\n   */\n  getStateAtTime(time) {\n    time = this.toSeconds(time);\n    return this._state.getValueAtTime(time);\n  }\n  /**\n   * Get the time of the given tick. The second argument\n   * is when to test before. Since ticks can be set (with setTicksAtTime)\n   * there may be multiple times for a given tick value.\n   * @param  tick The tick number.\n   * @param  before When to measure the tick value from.\n   * @return The time of the tick\n   */\n  getTimeOfTick(tick, before = this.now()) {\n    const offset = this._tickOffset.get(before);\n    const event = this._state.get(before);\n    const startTime = Math.max(offset.time, event.time);\n    const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n    return this.frequency.getTimeOfTick(absoluteTicks);\n  }\n  /**\n   * Invoke the callback event at all scheduled ticks between the\n   * start time and the end time\n   * @param  startTime  The beginning of the search range\n   * @param  endTime    The end of the search range\n   * @param  callback   The callback to invoke with each tick\n   */\n  forEachTickBetween(startTime, endTime, callback) {\n    // only iterate through the sections where it is \"started\"\n    let lastStateEvent = this._state.get(startTime);\n    this._state.forEachBetween(startTime, endTime, event => {\n      if (lastStateEvent && lastStateEvent.state === \"started\" && event.state !== \"started\") {\n        this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n      }\n      lastStateEvent = event;\n    });\n    let error = null;\n    if (lastStateEvent && lastStateEvent.state === \"started\") {\n      const maxStartTime = Math.max(lastStateEvent.time, startTime);\n      // figure out the difference between the frequency ticks and the\n      const startTicks = this.frequency.getTicksAtTime(maxStartTime);\n      const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n      const diff = startTicks - ticksAtStart;\n      let offset = Math.ceil(diff) - diff;\n      // guard against floating point issues\n      offset = EQ(offset, 1) ? 0 : offset;\n      let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n      while (nextTickTime < endTime) {\n        try {\n          callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n        } catch (e) {\n          error = e;\n          break;\n        }\n        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n      }\n    }\n    if (error) {\n      throw error;\n    }\n    return this;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._state.dispose();\n    this._tickOffset.dispose();\n    this._ticksAtTime.dispose();\n    this._secondsAtTime.dispose();\n    this.frequency.dispose();\n    return this;\n  }\n}\n", "import { ToneWithContext } from \"../context/ToneWithContext.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Emitter } from \"../util/Emitter.js\";\nimport { noOp, readOnly } from \"../util/Interface.js\";\nimport { StateTimeline } from \"../util/StateTimeline.js\";\nimport { TickSource } from \"./TickSource.js\";\nimport { assertContextRunning } from \"../util/Debug.js\";\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Tone.Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(Clock.getDefaults(), arguments, [\"callback\", \"frequency\"]);\n    super(options);\n    this.name = \"Clock\";\n    /**\n     * The callback function to invoke at the scheduled tick.\n     */\n    this.callback = noOp;\n    /**\n     * The last time the loop callback was invoked\n     */\n    this._lastUpdate = 0;\n    /**\n     * Keep track of the playback state\n     */\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * Context bound reference to the _loop method\n     * This is necessary to remove the event in the end.\n     */\n    this._boundLoop = this._loop.bind(this);\n    this.callback = options.callback;\n    this._tickSource = new TickSource({\n      context: this.context,\n      frequency: options.frequency,\n      units: options.units\n    });\n    this._lastUpdate = 0;\n    this.frequency = this._tickSource.frequency;\n    readOnly(this, \"frequency\");\n    // add an initial state\n    this._state.setStateAtTime(\"stopped\", 0);\n    // bind a callback to the worker thread\n    this.context.on(\"tick\", this._boundLoop);\n  }\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      frequency: 1,\n      units: \"hertz\"\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n   */\n  get state() {\n    return this._state.getValueAtTime(this.now());\n  }\n  /**\n   * Start the clock at the given time. Optionally pass in an offset\n   * of where to start the tick counter from.\n   * @param  time    The time the clock should start\n   * @param offset  Where the tick counter starts counting from.\n   */\n  start(time, offset) {\n    // make sure the context is running\n    assertContextRunning(this.context);\n    // start the loop\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    if (this._state.getValueAtTime(computedTime) !== \"started\") {\n      this._state.setStateAtTime(\"started\", computedTime);\n      this._tickSource.start(computedTime, offset);\n      if (computedTime < this._lastUpdate) {\n        this.emit(\"start\", computedTime, offset);\n      }\n    }\n    return this;\n  }\n  /**\n   * Stop the clock. Stopping the clock resets the tick counter to 0.\n   * @param time The time when the clock should stop.\n   * @example\n   * const clock = new Tone.Clock(time => {\n   * \tconsole.log(time);\n   * }, 1);\n   * clock.start();\n   * // stop the clock after 10 seconds\n   * clock.stop(\"+10\");\n   */\n  stop(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"stop\", computedTime);\n    this._state.cancel(computedTime);\n    this._state.setStateAtTime(\"stopped\", computedTime);\n    this._tickSource.stop(computedTime);\n    if (computedTime < this._lastUpdate) {\n      this.emit(\"stop\", computedTime);\n    }\n    return this;\n  }\n  /**\n   * Pause the clock. Pausing does not reset the tick counter.\n   * @param time The time when the clock should stop.\n   */\n  pause(time) {\n    const computedTime = this.toSeconds(time);\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      this._state.setStateAtTime(\"paused\", computedTime);\n      this._tickSource.pause(computedTime);\n      if (computedTime < this._lastUpdate) {\n        this.emit(\"pause\", computedTime);\n      }\n    }\n    return this;\n  }\n  /**\n   * The number of times the callback was invoked. Starts counting at 0\n   * and increments after the callback was invoked.\n   */\n  get ticks() {\n    return Math.ceil(this.getTicksAtTime(this.now()));\n  }\n  set ticks(t) {\n    this._tickSource.ticks = t;\n  }\n  /**\n   * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n   */\n  get seconds() {\n    return this._tickSource.seconds;\n  }\n  set seconds(s) {\n    this._tickSource.seconds = s;\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n  getSecondsAtTime(time) {\n    return this._tickSource.getSecondsAtTime(time);\n  }\n  /**\n   * Set the clock's ticks at the given time.\n   * @param  ticks The tick value to set\n   * @param  time  When to set the tick value\n   */\n  setTicksAtTime(ticks, time) {\n    this._tickSource.setTicksAtTime(ticks, time);\n    return this;\n  }\n  /**\n   * Get the time of the given tick. The second argument\n   * is when to test before. Since ticks can be set (with setTicksAtTime)\n   * there may be multiple times for a given tick value.\n   * @param  tick The tick number.\n   * @param  before When to measure the tick value from.\n   * @return The time of the tick\n   */\n  getTimeOfTick(tick, before = this.now()) {\n    return this._tickSource.getTimeOfTick(tick, before);\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n  getTicksAtTime(time) {\n    return this._tickSource.getTicksAtTime(time);\n  }\n  /**\n   * Get the time of the next tick\n   * @param  offset The tick number.\n   */\n  nextTickTime(offset, when) {\n    const computedTime = this.toSeconds(when);\n    const currentTick = this.getTicksAtTime(computedTime);\n    return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n  }\n  /**\n   * The scheduling loop.\n   */\n  _loop() {\n    const startTime = this._lastUpdate;\n    const endTime = this.now();\n    this._lastUpdate = endTime;\n    this.log(\"loop\", startTime, endTime);\n    if (startTime !== endTime) {\n      // the state change events\n      this._state.forEachBetween(startTime, endTime, e => {\n        switch (e.state) {\n          case \"started\":\n            const offset = this._tickSource.getTicksAtTime(e.time);\n            this.emit(\"start\", e.time, offset);\n            break;\n          case \"stopped\":\n            if (e.time !== 0) {\n              this.emit(\"stop\", e.time);\n            }\n            break;\n          case \"paused\":\n            this.emit(\"pause\", e.time);\n            break;\n        }\n      });\n      // the tick callbacks\n      this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n        this.callback(time, ticks);\n      });\n    }\n  }\n  /**\n   * Returns the scheduled state at the given time.\n   * @param  time  The time to query.\n   * @return  The name of the state input in setStateAtTime.\n   * @example\n   * const clock = new Tone.Clock();\n   * clock.start(\"+0.1\");\n   * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n   */\n  getStateAtTime(time) {\n    const computedTime = this.toSeconds(time);\n    return this._state.getValueAtTime(computedTime);\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this.context.off(\"tick\", this._boundLoop);\n    this._tickSource.dispose();\n    this._state.dispose();\n    return this;\n  }\n}\nEmitter.mixin(Clock);\n", "import { Param } from \"../context/Param.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { ToneAudioNode } from \"./ToneAudioNode.js\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\nexport class Delay extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n    super(options);\n    this.name = \"Delay\";\n    const maxDelayInSeconds = this.toSeconds(options.maxDelay);\n    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n    this.delayTime = new Param({\n      context: this.context,\n      param: this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: this.maxDelay\n    });\n    readOnly(this, \"delayTime\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  }\n  /**\n   * The maximum delay time. This cannot be changed after\n   * the value is passed into the constructor.\n   */\n  get maxDelay() {\n    return this._maxDelay;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._delayNode.disconnect();\n    this.delayTime.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    super(options);\n    this.name = \"Volume\";\n    this.input = this.output = new Gain({\n      context: this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    this.volume = this.output.gain;\n    readOnly(this, \"volume\");\n    this._unmutedVolume = options.volume;\n    // set the mute initially\n    this.mute = options.mute;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const vol = new Tone.Volume(-12).toDestination();\n   * const osc = new Tone.Oscillator().connect(vol).start();\n   * // mute the output\n   * vol.mute = true;\n   */\n  get mute() {\n    return this.volume.value === -Infinity;\n  }\n  set mute(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value;\n      // maybe it should ramp here?\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}\n", "import { Volume } from \"../../component/channel/Volume.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization.js\";\nimport { Gain } from \"./Gain.js\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode.js\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class DestinationClass extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(DestinationClass.getDefaults(), arguments);\n    super(options);\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n    this.volume = this.input.volume;\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n  get mute() {\n    return this.input.mute;\n  }\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n  chain(...args) {\n    this.input.disconnect();\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.destination = new DestinationClass({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});\n", "import { ToneAudioNode } from \"./ToneAudioNode.js\";\nimport { Param } from \"./Param.js\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization.js\";\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with {@link Panner3D} makes up the Web Audio API's 3D panning system. Panner3D allows you\n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context.\n */\nexport class ListenerClass extends ToneAudioNode {\n  constructor() {\n    super(...arguments);\n    this.name = \"Listener\";\n    this.positionX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.positionZ\n    });\n    this.forwardX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardX\n    });\n    this.forwardY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardY\n    });\n    this.forwardZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.forwardZ\n    });\n    this.upX = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upX\n    });\n    this.upY = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upY\n    });\n    this.upZ = new Param({\n      context: this.context,\n      param: this.context.rawContext.listener.upZ\n    });\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      forwardX: 0,\n      forwardY: 0,\n      forwardZ: -1,\n      upX: 0,\n      upY: 1,\n      upZ: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    this.forwardX.dispose();\n    this.forwardY.dispose();\n    this.forwardZ.dispose();\n    this.upX.dispose();\n    this.upY.dispose();\n    this.upZ.dispose();\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.listener = new ListenerClass({\n    context\n  });\n});\nonContextClose(context => {\n  context.listener.dispose();\n});\n", "import { __awaiter } from \"tslib\";\nimport { getContext, setContext } from \"../Global.js\";\nimport { OfflineContext } from \"./OfflineContext.js\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer.js\";\nimport \"./Destination.js\";\nimport \"./Listener.js\";\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of {@link Context} which can be used\n * to schedule events along the Transport.\n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * // render 2 seconds of the oscillator\n * Tone.Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Tone.Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Tone.Offline(({ transport }) => {\n * \tconst osc = new Tone.Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\nexport function Offline(callback_1, duration_1) {\n  return __awaiter(this, arguments, void 0, function* (callback, duration, channels = 2, sampleRate = getContext().sampleRate) {\n    // set the OfflineAudioContext based on the current context\n    const originalContext = getContext();\n    const context = new OfflineContext(channels, duration, sampleRate);\n    setContext(context);\n    // invoke the callback/scheduling\n    yield callback(context);\n    // then render the audio\n    const bufferPromise = context.render();\n    // return the original AudioContext\n    setContext(originalContext);\n    // await the rendering\n    const buffer = yield bufferPromise;\n    // return the audio\n    return new ToneAudioBuffer(buffer);\n  });\n}\n", "import { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { isString } from \"../util/TypeCheck.js\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n    this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n    this._loadingCount = 0;\n    const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    this.baseUrl = options.baseUrl;\n    // add each one\n    Object.keys(options.urls).forEach(name => {\n      this._loadingCount++;\n      const url = options.urls[name];\n      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n    });\n  }\n  static getDefaults() {\n    return {\n      baseUrl: \"\",\n      onerror: noOp,\n      onload: noOp,\n      urls: {}\n    };\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param  name  The key or index of the buffer.\n   */\n  has(name) {\n    return this._buffers.has(name.toString());\n  }\n  /**\n   * Get a buffer by name. If an array was loaded,\n   * then use the array index.\n   * @param  name  The key or index of the buffer.\n   */\n  get(name) {\n    assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n    return this._buffers.get(name.toString());\n  }\n  /**\n   * A buffer was loaded. decrement the counter.\n   */\n  _bufferLoaded(callback) {\n    this._loadingCount--;\n    if (this._loadingCount === 0 && callback) {\n      callback();\n    }\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n  get loaded() {\n    return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n  }\n  /**\n   * Add a buffer by name and url to the Buffers\n   * @param  name      A unique name to give the buffer\n   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   * @param  onerror  Invoked if the buffer can't be loaded\n   */\n  add(name, url, callback = noOp, onerror = noOp) {\n    if (isString(url)) {\n      // don't include the baseUrl if the url is a base64 encoded sound\n      if (this.baseUrl && url.trim().substring(0, 11).toLowerCase() === \"data:audio/\") {\n        this.baseUrl = \"\";\n      }\n      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n    } else {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n    }\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._buffers.forEach(buffer => buffer.dispose());\n    this._buffers.clear();\n    return this;\n  }\n}\n", "import { getContext } from \"../Global.js\";\nimport { ftom, mtof } from \"./Conversions.js\";\nimport { FrequencyClass } from \"./Frequency.js\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\nexport class MidiClass extends FrequencyClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"MidiClass\";\n    this.defaultUnits = \"midi\";\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return ftom(super._frequencyToUnits(freq));\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return ftom(super._ticksToUnits(ticks));\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return ftom(super._beatsToUnits(beats));\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return ftom(super._secondsToUnits(seconds));\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toMidi(); // 60\n   */\n  toMidi() {\n    return this.valueOf();\n  }\n  /**\n   * Return the value of the frequency as a MIDI note\n   * @example\n   * Tone.Midi(60).toFrequency(); // 261.6255653005986\n   */\n  toFrequency() {\n    return mtof(this.toMidi());\n  }\n  /**\n   * Transposes the frequency by the given number of semitones.\n   * @return A new transposed MidiClass\n   * @example\n   * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n   */\n  transpose(interval) {\n    return new MidiClass(this.context, this.toMidi() + interval);\n  }\n}\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}\n", "import { getContext } from \"../Global.js\";\nimport { TransportTimeClass } from \"./TransportTime.js\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass {\n  constructor() {\n    super(...arguments);\n    this.name = \"Ticks\";\n    this.defaultUnits = \"i\";\n  }\n  /**\n   * Get the current time in the given units\n   */\n  _now() {\n    return this.context.transport.ticks;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return this._getPPQ() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return ticks;\n  }\n  /**\n   * Return the time in ticks\n   */\n  toTicks() {\n    return this.valueOf();\n  }\n  /**\n   * Return the time in seconds\n   */\n  toSeconds() {\n    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());\n  }\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value, units) {\n  return new TicksClass(getContext(), value, units);\n}\n", "import { ToneWithContext } from \"../context/ToneWithContext.js\";\nimport { Timeline } from \"./Timeline.js\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization.js\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\nexport class DrawClass extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    this.name = \"Draw\";\n    /**\n     * The duration after which events are not invoked.\n     */\n    this.expiration = 0.25;\n    /**\n     * The amount of time before the scheduled time\n     * that the callback can be invoked. Default is\n     * half the time of an animation frame (0.008 seconds).\n     */\n    this.anticipation = 0.008;\n    /**\n     * All of the events.\n     */\n    this._events = new Timeline();\n    /**\n     * The draw loop\n     */\n    this._boundDrawLoop = this._drawLoop.bind(this);\n    /**\n     * The animation frame id\n     */\n    this._animationFrame = -1;\n  }\n  /**\n   * Schedule a function at the given time to be invoked\n   * on the nearest animation frame.\n   * @param  callback  Callback is invoked at the given time.\n   * @param  time      The time relative to the AudioContext time to invoke the callback.\n   * @example\n   * Tone.Transport.scheduleRepeat(time => {\n   * \tTone.Draw.schedule(() => console.log(time), time);\n   * }, 1);\n   * Tone.Transport.start();\n   */\n  schedule(callback, time) {\n    this._events.add({\n      callback,\n      time: this.toSeconds(time)\n    });\n    // start the draw loop on the first event\n    if (this._events.length === 1) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n    return this;\n  }\n  /**\n   * Cancel events scheduled after the given time\n   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n   */\n  cancel(after) {\n    this._events.cancel(this.toSeconds(after));\n    return this;\n  }\n  /**\n   * The draw loop\n   */\n  _drawLoop() {\n    const now = this.context.currentTime;\n    while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n      const event = this._events.shift();\n      if (event && now - event.time <= this.expiration) {\n        event.callback();\n      }\n    }\n    if (this._events.length > 0) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n  }\n  dispose() {\n    super.dispose();\n    this._events.dispose();\n    cancelAnimationFrame(this._animationFrame);\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.draw = new DrawClass({\n    context\n  });\n});\nonContextClose(context => {\n  context.draw.dispose();\n});\n", "import { Tone } from \"../Tone.js\";\nimport { isDefined } from \"./TypeCheck.js\";\nimport { assert } from \"./Debug.js\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n * @internal\n */\nexport class IntervalTimeline extends Tone {\n  constructor() {\n    super(...arguments);\n    this.name = \"IntervalTimeline\";\n    /**\n     * The root node of the inteval tree\n     */\n    this._root = null;\n    /**\n     * Keep track of the length of the timeline.\n     */\n    this._length = 0;\n  }\n  /**\n   * The event to add to the timeline. All events must\n   * have a time and duration value\n   * @param  event  The event to add to the timeline\n   */\n  add(event) {\n    assert(isDefined(event.time), \"Events must have a time property\");\n    assert(isDefined(event.duration), \"Events must have a duration parameter\");\n    event.time = event.time.valueOf();\n    let node = new IntervalNode(event.time, event.time + event.duration, event);\n    if (this._root === null) {\n      this._root = node;\n    } else {\n      this._root.insert(node);\n    }\n    this._length++;\n    // Restructure tree to be balanced\n    while (node !== null) {\n      node.updateHeight();\n      node.updateMax();\n      this._rebalance(node);\n      node = node.parent;\n    }\n    return this;\n  }\n  /**\n   * Remove an event from the timeline.\n   * @param  event  The event to remove from the timeline\n   */\n  remove(event) {\n    if (this._root !== null) {\n      const results = [];\n      this._root.search(event.time, results);\n      for (const node of results) {\n        if (node.event === event) {\n          this._removeNode(node);\n          this._length--;\n          break;\n        }\n      }\n    }\n    return this;\n  }\n  /**\n   * The number of items in the timeline.\n   * @readOnly\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * Remove events whose time time is after the given time\n   * @param  after  The time to query.\n   */\n  cancel(after) {\n    this.forEachFrom(after, event => this.remove(event));\n    return this;\n  }\n  /**\n   * Set the root node as the given node\n   */\n  _setRoot(node) {\n    this._root = node;\n    if (this._root !== null) {\n      this._root.parent = null;\n    }\n  }\n  /**\n   * Replace the references to the node in the node's parent\n   * with the replacement node.\n   */\n  _replaceNodeInParent(node, replacement) {\n    if (node.parent !== null) {\n      if (node.isLeftChild()) {\n        node.parent.left = replacement;\n      } else {\n        node.parent.right = replacement;\n      }\n      this._rebalance(node.parent);\n    } else {\n      this._setRoot(replacement);\n    }\n  }\n  /**\n   * Remove the node from the tree and replace it with\n   * a successor which follows the schema.\n   */\n  _removeNode(node) {\n    if (node.left === null && node.right === null) {\n      this._replaceNodeInParent(node, null);\n    } else if (node.right === null) {\n      this._replaceNodeInParent(node, node.left);\n    } else if (node.left === null) {\n      this._replaceNodeInParent(node, node.right);\n    } else {\n      const balance = node.getBalance();\n      let replacement;\n      let temp = null;\n      if (balance > 0) {\n        if (node.left.right === null) {\n          replacement = node.left;\n          replacement.right = node.right;\n          temp = replacement;\n        } else {\n          replacement = node.left.right;\n          while (replacement.right !== null) {\n            replacement = replacement.right;\n          }\n          if (replacement.parent) {\n            replacement.parent.right = replacement.left;\n            temp = replacement.parent;\n            replacement.left = node.left;\n            replacement.right = node.right;\n          }\n        }\n      } else if (node.right.left === null) {\n        replacement = node.right;\n        replacement.left = node.left;\n        temp = replacement;\n      } else {\n        replacement = node.right.left;\n        while (replacement.left !== null) {\n          replacement = replacement.left;\n        }\n        if (replacement.parent) {\n          replacement.parent.left = replacement.right;\n          temp = replacement.parent;\n          replacement.left = node.left;\n          replacement.right = node.right;\n        }\n      }\n      if (node.parent !== null) {\n        if (node.isLeftChild()) {\n          node.parent.left = replacement;\n        } else {\n          node.parent.right = replacement;\n        }\n      } else {\n        this._setRoot(replacement);\n      }\n      if (temp) {\n        this._rebalance(temp);\n      }\n    }\n    node.dispose();\n  }\n  /**\n   * Rotate the tree to the left\n   */\n  _rotateLeft(node) {\n    const parent = node.parent;\n    const isLeftChild = node.isLeftChild();\n    // Make node.right the new root of this sub tree (instead of node)\n    const pivotNode = node.right;\n    if (pivotNode) {\n      node.right = pivotNode.left;\n      pivotNode.left = node;\n    }\n    if (parent !== null) {\n      if (isLeftChild) {\n        parent.left = pivotNode;\n      } else {\n        parent.right = pivotNode;\n      }\n    } else {\n      this._setRoot(pivotNode);\n    }\n  }\n  /**\n   * Rotate the tree to the right\n   */\n  _rotateRight(node) {\n    const parent = node.parent;\n    const isLeftChild = node.isLeftChild();\n    // Make node.left the new root of this sub tree (instead of node)\n    const pivotNode = node.left;\n    if (pivotNode) {\n      node.left = pivotNode.right;\n      pivotNode.right = node;\n    }\n    if (parent !== null) {\n      if (isLeftChild) {\n        parent.left = pivotNode;\n      } else {\n        parent.right = pivotNode;\n      }\n    } else {\n      this._setRoot(pivotNode);\n    }\n  }\n  /**\n   * Balance the BST\n   */\n  _rebalance(node) {\n    const balance = node.getBalance();\n    if (balance > 1 && node.left) {\n      if (node.left.getBalance() < 0) {\n        this._rotateLeft(node.left);\n      } else {\n        this._rotateRight(node);\n      }\n    } else if (balance < -1 && node.right) {\n      if (node.right.getBalance() > 0) {\n        this._rotateRight(node.right);\n      } else {\n        this._rotateLeft(node);\n      }\n    }\n  }\n  /**\n   * Get an event whose time and duration span the give time. Will\n   * return the match whose \"time\" value is closest to the given time.\n   * @return  The event which spans the desired time\n   */\n  get(time) {\n    if (this._root !== null) {\n      const results = [];\n      this._root.search(time, results);\n      if (results.length > 0) {\n        let max = results[0];\n        for (let i = 1; i < results.length; i++) {\n          if (results[i].low > max.low) {\n            max = results[i];\n          }\n        }\n        return max.event;\n      }\n    }\n    return null;\n  }\n  /**\n   * Iterate over everything in the timeline.\n   * @param  callback The callback to invoke with every item\n   */\n  forEach(callback) {\n    if (this._root !== null) {\n      const allNodes = [];\n      this._root.traverse(node => allNodes.push(node));\n      allNodes.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n    return this;\n  }\n  /**\n   * Iterate over everything in the array in which the given time\n   * overlaps with the time and duration time of the event.\n   * @param  time The time to check if items are overlapping\n   * @param  callback The callback to invoke with every item\n   */\n  forEachAtTime(time, callback) {\n    if (this._root !== null) {\n      const results = [];\n      this._root.search(time, results);\n      results.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n    return this;\n  }\n  /**\n   * Iterate over everything in the array in which the time is greater\n   * than or equal to the given time.\n   * @param  time The time to check if items are before\n   * @param  callback The callback to invoke with every item\n   */\n  forEachFrom(time, callback) {\n    if (this._root !== null) {\n      const results = [];\n      this._root.searchAfter(time, results);\n      results.forEach(node => {\n        if (node.event) {\n          callback(node.event);\n        }\n      });\n    }\n    return this;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    if (this._root !== null) {\n      this._root.traverse(node => node.dispose());\n    }\n    this._root = null;\n    return this;\n  }\n}\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n  constructor(low, high, event) {\n    // the nodes to the left\n    this._left = null;\n    // the nodes to the right\n    this._right = null;\n    // the parent node\n    this.parent = null;\n    // the number of child nodes\n    this.height = 0;\n    this.event = event;\n    // the low value\n    this.low = low;\n    // the high value\n    this.high = high;\n    // the high value for this and all child nodes\n    this.max = this.high;\n  }\n  /**\n   * Insert a node into the correct spot in the tree\n   */\n  insert(node) {\n    if (node.low <= this.low) {\n      if (this.left === null) {\n        this.left = node;\n      } else {\n        this.left.insert(node);\n      }\n    } else if (this.right === null) {\n      this.right = node;\n    } else {\n      this.right.insert(node);\n    }\n  }\n  /**\n   * Search the tree for nodes which overlap\n   * with the given point\n   * @param  point  The point to query\n   * @param  results  The array to put the results\n   */\n  search(point, results) {\n    // If p is to the right of the rightmost point of any interval\n    // in this node and all children, there won't be any matches.\n    if (point > this.max) {\n      return;\n    }\n    // Search left children\n    if (this.left !== null) {\n      this.left.search(point, results);\n    }\n    // Check this node\n    if (this.low <= point && this.high > point) {\n      results.push(this);\n    }\n    // If p is to the left of the time of this interval,\n    // then it can't be in any child to the right.\n    if (this.low > point) {\n      return;\n    }\n    // Search right children\n    if (this.right !== null) {\n      this.right.search(point, results);\n    }\n  }\n  /**\n   * Search the tree for nodes which are less\n   * than the given point\n   * @param  point  The point to query\n   * @param  results  The array to put the results\n   */\n  searchAfter(point, results) {\n    // Check this node\n    if (this.low >= point) {\n      results.push(this);\n      if (this.left !== null) {\n        this.left.searchAfter(point, results);\n      }\n    }\n    // search the right side\n    if (this.right !== null) {\n      this.right.searchAfter(point, results);\n    }\n  }\n  /**\n   * Invoke the callback on this element and both it's branches\n   * @param  {Function}  callback\n   */\n  traverse(callback) {\n    callback(this);\n    if (this.left !== null) {\n      this.left.traverse(callback);\n    }\n    if (this.right !== null) {\n      this.right.traverse(callback);\n    }\n  }\n  /**\n   * Update the height of the node\n   */\n  updateHeight() {\n    if (this.left !== null && this.right !== null) {\n      this.height = Math.max(this.left.height, this.right.height) + 1;\n    } else if (this.right !== null) {\n      this.height = this.right.height + 1;\n    } else if (this.left !== null) {\n      this.height = this.left.height + 1;\n    } else {\n      this.height = 0;\n    }\n  }\n  /**\n   * Update the height of the node\n   */\n  updateMax() {\n    this.max = this.high;\n    if (this.left !== null) {\n      this.max = Math.max(this.max, this.left.max);\n    }\n    if (this.right !== null) {\n      this.max = Math.max(this.max, this.right.max);\n    }\n  }\n  /**\n   * The balance is how the leafs are distributed on the node\n   * @return  Negative numbers are balanced to the right\n   */\n  getBalance() {\n    let balance = 0;\n    if (this.left !== null && this.right !== null) {\n      balance = this.left.height - this.right.height;\n    } else if (this.left !== null) {\n      balance = this.left.height + 1;\n    } else if (this.right !== null) {\n      balance = -(this.right.height + 1);\n    }\n    return balance;\n  }\n  /**\n   * @returns true if this node is the left child of its parent\n   */\n  isLeftChild() {\n    return this.parent !== null && this.parent.left === this;\n  }\n  /**\n   * get/set the left node\n   */\n  get left() {\n    return this._left;\n  }\n  set left(node) {\n    this._left = node;\n    if (node !== null) {\n      node.parent = this;\n    }\n    this.updateHeight();\n    this.updateMax();\n  }\n  /**\n   * get/set the right node\n   */\n  get right() {\n    return this._right;\n  }\n  set right(node) {\n    this._right = node;\n    if (node !== null) {\n      node.parent = this;\n    }\n    this.updateHeight();\n    this.updateMax();\n  }\n  /**\n   * null out references.\n   */\n  dispose() {\n    this.parent = null;\n    this._left = null;\n    this._right = null;\n    this.event = null;\n  }\n}\n", "export * from \"./NoteUnits.js\";\n", "import { Timeline } from \"./Timeline.js\";\nimport { Tone } from \"../Tone.js\";\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue extends Tone {\n  /**\n   * @param initialValue The value to return if there is no scheduled values\n   */\n  constructor(initialValue) {\n    super();\n    this.name = \"TimelineValue\";\n    /**\n     * The timeline which stores the values\n     */\n    this._timeline = new Timeline({\n      memory: 10\n    });\n    this._initialValue = initialValue;\n  }\n  /**\n   * Set the value at the given time\n   */\n  set(value, time) {\n    this._timeline.add({\n      value,\n      time\n    });\n    return this;\n  }\n  /**\n   * Get the value at the given time\n   */\n  get(time) {\n    const event = this._timeline.get(time);\n    if (event) {\n      return event.value;\n    } else {\n      return this._initialValue;\n    }\n  }\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { connectSignal } from \"./Signal.js\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport class SignalOperator extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\"context\"]));\n  }\n  connect(destination, outputNum = 0, inputNum = 0) {\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck.js\";\nimport { assert } from \"../core/util/Debug.js\";\nimport { Signal } from \"./Signal.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator {\n  constructor() {\n    const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n    super(options);\n    this.name = \"WaveShaper\";\n    /**\n     * the waveshaper node\n     */\n    this._shaper = this.context.createWaveShaper();\n    /**\n     * The input to the waveshaper node.\n     */\n    this.input = this._shaper;\n    /**\n     * The output from the waveshaper node\n     */\n    this.output = this._shaper;\n    if (isArray(options.mapping) || options.mapping instanceof Float32Array) {\n      this.curve = Float32Array.from(options.mapping);\n    } else if (isFunction(options.mapping)) {\n      this.setMap(options.mapping, options.length);\n    }\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      length: 1024\n    });\n  }\n  /**\n   * Uses a mapping function to set the value of the curve.\n   * @param mapping The function used to define the values.\n   *                The mapping function take two arguments:\n   *                the first is the value at the current position\n   *                which goes from -1 to 1 over the number of elements\n   *                in the curve array. The second argument is the array position.\n   * @example\n   * const shaper = new Tone.WaveShaper();\n   * // map the input signal from [-1, 1] to [0, 10]\n   * shaper.setMap((val, index) => (val + 1) * 5);\n   */\n  setMap(mapping, length = 1024) {\n    const array = new Float32Array(length);\n    for (let i = 0, len = length; i < len; i++) {\n      const normalized = i / (len - 1) * 2 - 1;\n      array[i] = mapping(normalized, i);\n    }\n    this.curve = array;\n    return this;\n  }\n  /**\n   * The array to set as the waveshaper curve. For linear curves\n   * array length does not make much difference, but for complex curves\n   * longer arrays will provide smoother interpolation.\n   */\n  get curve() {\n    return this._shaper.curve;\n  }\n  set curve(mapping) {\n    this._shaper.curve = mapping;\n  }\n  /**\n   * Specifies what type of oversampling (if any) should be used when\n   * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n   */\n  get oversample() {\n    return this._shaper.oversample;\n  }\n  set oversample(oversampling) {\n    const isOverSampleType = [\"none\", \"2x\", \"4x\"].some(str => str.includes(oversampling));\n    assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n    this._shaper.oversample = oversampling;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._shaper.disconnect();\n    return this;\n  }\n}\n", "import { WaveShaper } from \"./WaveShaper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nexport class Pow extends SignalOperator {\n  constructor() {\n    const options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"Pow\";\n    this._exponentScaler = this.input = this.output = new WaveShaper({\n      context: this.context,\n      mapping: this._expFunc(options.value),\n      length: 8192\n    });\n    this._exponent = options.value;\n  }\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  }\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n  _expFunc(exponent) {\n    return val => {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  }\n  /**\n   * The value of the exponent.\n   */\n  get value() {\n    return this._exponent;\n  }\n  set value(exponent) {\n    this._exponent = exponent;\n    this._exponentScaler.setMap(this._expFunc(this._exponent));\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._exponentScaler.dispose();\n    return this;\n  }\n}\n", "import { noOp } from \"../util/Interface.js\";\n/**\n * TransportEvent is an internal class used by {@link TransportClass}\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    /**\n     * The unique id of the event\n     */\n    this.id = TransportEvent._eventId++;\n    /**\n     * The remaining value between the passed in time, and Math.floor(time).\n     * This value is later added back when scheduling to get sub-tick precision.\n     */\n    this._remainderTime = 0;\n    const options = Object.assign(TransportEvent.getDefaults(), opts);\n    this.transport = transport;\n    this.callback = options.callback;\n    this._once = options.once;\n    this.time = Math.floor(options.time);\n    this._remainderTime = options.time - this.time;\n  }\n  static getDefaults() {\n    return {\n      callback: noOp,\n      once: false,\n      time: 0\n    };\n  }\n  /**\n   * Get the time and remainder time.\n   */\n  get floatTime() {\n    return this.time + this._remainderTime;\n  }\n  /**\n   * Invoke the event callback.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n  invoke(time) {\n    if (this.callback) {\n      const tickDuration = this.transport.bpm.getDurationOfTicks(1, time);\n      this.callback(time + this._remainderTime * tickDuration);\n      if (this._once) {\n        this.transport.clear(this.id);\n      }\n    }\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    this.callback = undefined;\n    return this;\n  }\n}\n/**\n * Current ID counter\n */\nTransportEvent._eventId = 0;\n", "import { TicksClass } from \"../type/Ticks.js\";\nimport { TransportEvent } from \"./TransportEvent.js\";\nimport { GT, LT } from \"../util/Math.js\";\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    super(transport, opts);\n    /**\n     * The ID of the current timeline event\n     */\n    this._currentId = -1;\n    /**\n     * The ID of the next timeline event\n     */\n    this._nextId = -1;\n    /**\n     * The time of the next event\n     */\n    this._nextTick = this.time;\n    /**\n     * a reference to the bound start method\n     */\n    this._boundRestart = this._restart.bind(this);\n    const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n    this.duration = options.duration;\n    this._interval = options.interval;\n    this._nextTick = options.time;\n    this.transport.on(\"start\", this._boundRestart);\n    this.transport.on(\"loopStart\", this._boundRestart);\n    this.transport.on(\"ticks\", this._boundRestart);\n    this.context = this.transport.context;\n    this._restart();\n  }\n  static getDefaults() {\n    return Object.assign({}, TransportEvent.getDefaults(), {\n      duration: Infinity,\n      interval: 1,\n      once: false\n    });\n  }\n  /**\n   * Invoke the callback. Returns the tick time which\n   * the next event should be scheduled at.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n  invoke(time) {\n    // create more events if necessary\n    this._createEvents(time);\n    // call the super class\n    super.invoke(time);\n  }\n  /**\n   * Create an event on the transport on the nextTick\n   */\n  _createEvent() {\n    if (LT(this._nextTick, this.floatTime + this.duration)) {\n      return this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    }\n    return -1;\n  }\n  /**\n   * Push more events onto the timeline to keep up with the position of the timeline\n   */\n  _createEvents(time) {\n    // schedule the next event\n    // const ticks = this.transport.getTicksAtTime(time);\n    // if the next tick is within the bounds set by \"duration\"\n    if (LT(this._nextTick + this._interval, this.floatTime + this.duration)) {\n      this._nextTick += this._interval;\n      this._currentId = this._nextId;\n      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n    }\n  }\n  /**\n   * Re-compute the events when the transport time has changed from a start/ticks/loopStart event\n   */\n  _restart(time) {\n    this.transport.clear(this._currentId);\n    this.transport.clear(this._nextId);\n    // start at the first event\n    this._nextTick = this.floatTime;\n    const ticks = this.transport.getTicksAtTime(time);\n    if (GT(ticks, this.time)) {\n      // the event is not being scheduled from the beginning and should be offset\n      this._nextTick = this.floatTime + Math.ceil((ticks - this.floatTime) / this._interval) * this._interval;\n    }\n    this._currentId = this._createEvent();\n    this._nextTick += this._interval;\n    this._nextId = this._createEvent();\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this.transport.clear(this._currentId);\n    this.transport.clear(this._nextId);\n    this.transport.off(\"start\", this._boundRestart);\n    this.transport.off(\"loopStart\", this._boundRestart);\n    this.transport.off(\"ticks\", this._boundRestart);\n    return this;\n  }\n}\n", "import { TimeClass } from \"../../core/type/Time.js\";\nimport { TimelineValue } from \"../../core/util/TimelineValue.js\";\nimport { Pow } from \"../../signal/Pow.js\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization.js\";\nimport { Gain } from \"../context/Gain.js\";\nimport { ToneWithContext } from \"../context/ToneWithContext.js\";\nimport { TicksClass } from \"../type/Ticks.js\";\nimport { TransportTimeClass } from \"../type/TransportTime.js\";\nimport { enterScheduledCallback } from \"../util/Debug.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Emitter } from \"../util/Emitter.js\";\nimport { readOnly, writable } from \"../util/Interface.js\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isArray, isDefined } from \"../util/TypeCheck.js\";\nimport { Clock } from \"./Clock.js\";\nimport { TransportEvent } from \"./TransportEvent.js\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent.js\";\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.getTransport().scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.getTransport().start();\n * @category Core\n */\nexport class TransportClass extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(TransportClass.getDefaults(), arguments);\n    super(options);\n    this.name = \"Transport\";\n    //-------------------------------------\n    // \tLOOPING\n    //-------------------------------------\n    /**\n     * If the transport loops or not.\n     */\n    this._loop = new TimelineValue(false);\n    /**\n     * The loop start position in ticks\n     */\n    this._loopStart = 0;\n    /**\n     * The loop end position in ticks\n     */\n    this._loopEnd = 0;\n    //-------------------------------------\n    // \tTIMELINE EVENTS\n    //-------------------------------------\n    /**\n     * All the events in an object to keep track by ID\n     */\n    this._scheduledEvents = {};\n    /**\n     * The scheduled events.\n     */\n    this._timeline = new Timeline();\n    /**\n     * Repeated events\n     */\n    this._repeatedEvents = new IntervalTimeline();\n    /**\n     * All of the synced Signals\n     */\n    this._syncedSignals = [];\n    /**\n     * The swing amount\n     */\n    this._swingAmount = 0;\n    // CLOCK/TEMPO\n    this._ppq = options.ppq;\n    this._clock = new Clock({\n      callback: this._processTick.bind(this),\n      context: this.context,\n      frequency: 0,\n      units: \"bpm\"\n    });\n    this._bindClockEvents();\n    this.bpm = this._clock.frequency;\n    this._clock.frequency.multiplier = options.ppq;\n    this.bpm.setValueAtTime(options.bpm, 0);\n    readOnly(this, \"bpm\");\n    this._timeSignature = options.timeSignature;\n    // SWING\n    this._swingTicks = options.ppq / 2; // 8n\n  }\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      bpm: 120,\n      loopEnd: \"4m\",\n      loopStart: 0,\n      ppq: 192,\n      swing: 0,\n      swingSubdivision: \"8n\",\n      timeSignature: 4\n    });\n  }\n  //-------------------------------------\n  // \tTICKS\n  //-------------------------------------\n  /**\n   * called on every tick\n   * @param  tickTime clock relative tick time\n   */\n  _processTick(tickTime, ticks) {\n    // do the loop test\n    if (this._loop.get(tickTime)) {\n      if (ticks >= this._loopEnd) {\n        this.emit(\"loopEnd\", tickTime);\n        this._clock.setTicksAtTime(this._loopStart, tickTime);\n        ticks = this._loopStart;\n        this.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n        this.emit(\"loop\", tickTime);\n      }\n    }\n    // handle swing\n    if (this._swingAmount > 0 && ticks % this._ppq !== 0 &&\n    // not on a downbeat\n    ticks % (this._swingTicks * 2) !== 0) {\n      // add some swing\n      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n      const amount = Math.sin(progress * Math.PI) * this._swingAmount;\n      tickTime += new TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;\n    }\n    // invoke the timeline events scheduled on this tick\n    enterScheduledCallback(true);\n    this._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));\n    enterScheduledCallback(false);\n  }\n  //-------------------------------------\n  // \tSCHEDULABLE EVENTS\n  //-------------------------------------\n  /**\n   * Schedule an event along the timeline.\n   * @param callback The callback to be invoked at the time.\n   * @param time The time to invoke the callback at.\n   * @return The id of the event which can be used for canceling the event.\n   * @example\n   * // schedule an event on the 16th measure\n   * Tone.getTransport().schedule((time) => {\n   * \t// invoked on measure 16\n   * \tconsole.log(\"measure 16!\");\n   * }, \"16:0:0\");\n   */\n  schedule(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Schedule a repeated event along the timeline. The event will fire\n   * at the `interval` starting at the `startTime` and for the specified\n   * `duration`.\n   * @param  callback   The callback to invoke.\n   * @param  interval   The duration between successive callbacks. Must be a positive number.\n   * @param  startTime  When along the timeline the events should start being invoked.\n   * @param  duration How long the event should repeat.\n   * @return  The ID of the scheduled event. Use this to cancel the event.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // a callback invoked every eighth note after the first measure\n   * Tone.getTransport().scheduleRepeat((time) => {\n   * \tosc.start(time).stop(time + 0.1);\n   * }, \"8n\", \"1m\");\n   */\n  scheduleRepeat(callback, interval, startTime, duration = Infinity) {\n    const event = new TransportRepeatEvent(this, {\n      callback,\n      duration: new TimeClass(this.context, duration).toTicks(),\n      interval: new TimeClass(this.context, interval).toTicks(),\n      time: new TransportTimeClass(this.context, startTime).toTicks()\n    });\n    // kick it off if the Transport is started\n    // @ts-ignore\n    return this._addEvent(event, this._repeatedEvents);\n  }\n  /**\n   * Schedule an event that will be removed after it is invoked.\n   * @param callback The callback to invoke once.\n   * @param time The time the callback should be invoked.\n   * @returns The ID of the scheduled event.\n   */\n  scheduleOnce(callback, time) {\n    const event = new TransportEvent(this, {\n      callback,\n      once: true,\n      time: new TransportTimeClass(this.context, time).toTicks()\n    });\n    return this._addEvent(event, this._timeline);\n  }\n  /**\n   * Clear the passed in event id from the timeline\n   * @param eventId The id of the event.\n   */\n  clear(eventId) {\n    if (this._scheduledEvents.hasOwnProperty(eventId)) {\n      const item = this._scheduledEvents[eventId.toString()];\n      item.timeline.remove(item.event);\n      item.event.dispose();\n      delete this._scheduledEvents[eventId.toString()];\n    }\n    return this;\n  }\n  /**\n   * Add an event to the correct timeline. Keep track of the\n   * timeline it was added to.\n   * @returns the event id which was just added\n   */\n  _addEvent(event, timeline) {\n    this._scheduledEvents[event.id.toString()] = {\n      event,\n      timeline\n    };\n    timeline.add(event);\n    return event.id;\n  }\n  /**\n   * Remove scheduled events from the timeline after\n   * the given time. Repeated events will be removed\n   * if their startTime is after the given time\n   * @param after Clear all events after this time.\n   */\n  cancel(after = 0) {\n    const computedAfter = this.toTicks(after);\n    this._timeline.forEachFrom(computedAfter, event => this.clear(event.id));\n    this._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));\n    return this;\n  }\n  //-------------------------------------\n  // \tSTART/STOP/PAUSE\n  //-------------------------------------\n  /**\n   * Bind start/stop/pause events from the clock and emit them.\n   */\n  _bindClockEvents() {\n    this._clock.on(\"start\", (time, offset) => {\n      offset = new TicksClass(this.context, offset).toSeconds();\n      this.emit(\"start\", time, offset);\n    });\n    this._clock.on(\"stop\", time => {\n      this.emit(\"stop\", time);\n    });\n    this._clock.on(\"pause\", time => {\n      this.emit(\"pause\", time);\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n   */\n  get state() {\n    return this._clock.getStateAtTime(this.now());\n  }\n  /**\n   * Start the transport and all sources synced to the transport.\n   * @param  time The time when the transport should start.\n   * @param  offset The timeline offset to start the transport.\n   * @example\n   * // start the transport in one second starting at beginning of the 5th measure.\n   * Tone.getTransport().start(\"+1\", \"4:0:0\");\n   */\n  start(time, offset) {\n    // start the context\n    this.context.resume();\n    let offsetTicks;\n    if (isDefined(offset)) {\n      offsetTicks = this.toTicks(offset);\n    }\n    // start the clock\n    this._clock.start(time, offsetTicks);\n    return this;\n  }\n  /**\n   * Stop the transport and all sources synced to the transport.\n   * @param time The time when the transport should stop.\n   * @example\n   * Tone.getTransport().stop();\n   */\n  stop(time) {\n    this._clock.stop(time);\n    return this;\n  }\n  /**\n   * Pause the transport and all sources synced to the transport.\n   */\n  pause(time) {\n    this._clock.pause(time);\n    return this;\n  }\n  /**\n   * Toggle the current state of the transport. If it is\n   * started, it will stop it, otherwise it will start the Transport.\n   * @param  time The time of the event\n   */\n  toggle(time) {\n    time = this.toSeconds(time);\n    if (this._clock.getStateAtTime(time) !== \"started\") {\n      this.start(time);\n    } else {\n      this.stop(time);\n    }\n    return this;\n  }\n  //-------------------------------------\n  // \tSETTERS/GETTERS\n  //-------------------------------------\n  /**\n   * The time signature as just the numerator over 4.\n   * For example 4/4 would be just 4 and 6/8 would be 3.\n   * @example\n   * // common time\n   * Tone.getTransport().timeSignature = 4;\n   * // 7/8\n   * Tone.getTransport().timeSignature = [7, 8];\n   * // this will be reduced to a single number\n   * Tone.getTransport().timeSignature; // returns 3.5\n   */\n  get timeSignature() {\n    return this._timeSignature;\n  }\n  set timeSignature(timeSig) {\n    if (isArray(timeSig)) {\n      timeSig = timeSig[0] / timeSig[1] * 4;\n    }\n    this._timeSignature = timeSig;\n  }\n  /**\n   * When the Transport.loop = true, this is the starting position of the loop.\n   */\n  get loopStart() {\n    return new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n  }\n  set loopStart(startPosition) {\n    this._loopStart = this.toTicks(startPosition);\n  }\n  /**\n   * When the Transport.loop = true, this is the ending position of the loop.\n   */\n  get loopEnd() {\n    return new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n  }\n  set loopEnd(endPosition) {\n    this._loopEnd = this.toTicks(endPosition);\n  }\n  /**\n   * If the transport loops or not.\n   */\n  get loop() {\n    return this._loop.get(this.now());\n  }\n  set loop(loop) {\n    this._loop.set(loop, this.now());\n  }\n  /**\n   * Set the loop start and stop at the same time.\n   * @example\n   * // loop over the first measure\n   * Tone.getTransport().setLoopPoints(0, \"1m\");\n   * Tone.getTransport().loop = true;\n   */\n  setLoopPoints(startPosition, endPosition) {\n    this.loopStart = startPosition;\n    this.loopEnd = endPosition;\n    return this;\n  }\n  /**\n   * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n   */\n  get swing() {\n    return this._swingAmount;\n  }\n  set swing(amount) {\n    // scale the values to a normal range\n    this._swingAmount = amount;\n  }\n  /**\n   * Set the subdivision which the swing will be applied to.\n   * The default value is an 8th note. Value must be less\n   * than a quarter note.\n   */\n  get swingSubdivision() {\n    return new TicksClass(this.context, this._swingTicks).toNotation();\n  }\n  set swingSubdivision(subdivision) {\n    this._swingTicks = this.toTicks(subdivision);\n  }\n  /**\n   * The Transport's position in Bars:Beats:Sixteenths.\n   * Setting the value will jump to that position right away.\n   */\n  get position() {\n    const now = this.now();\n    const ticks = this._clock.getTicksAtTime(now);\n    return new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n  }\n  set position(progress) {\n    const ticks = this.toTicks(progress);\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's position in seconds.\n   * Setting the value will jump to that position right away.\n   */\n  get seconds() {\n    return this._clock.seconds;\n  }\n  set seconds(s) {\n    const now = this.now();\n    const ticks = this._clock.frequency.timeToTicks(s, now);\n    this.ticks = ticks;\n  }\n  /**\n   * The Transport's loop position as a normalized value. Always\n   * returns 0 if the Transport.loop = false.\n   */\n  get progress() {\n    if (this.loop) {\n      const now = this.now();\n      const ticks = this._clock.getTicksAtTime(now);\n      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * The Transport's current tick position.\n   */\n  get ticks() {\n    return this._clock.ticks;\n  }\n  set ticks(t) {\n    if (this._clock.ticks !== t) {\n      const now = this.now();\n      // stop everything synced to the transport\n      if (this.state === \"started\") {\n        const ticks = this._clock.getTicksAtTime(now);\n        // schedule to start on the next tick, #573\n        const remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);\n        const time = now + remainingTick;\n        this.emit(\"stop\", time);\n        this._clock.setTicksAtTime(t, time);\n        // restart it with the new time\n        this.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n      } else {\n        this.emit(\"ticks\", now);\n        this._clock.setTicksAtTime(t, now);\n      }\n    }\n  }\n  /**\n   * Get the clock's ticks at the given time.\n   * @param  time  When to get the tick value\n   * @return The tick value at the given time.\n   */\n  getTicksAtTime(time) {\n    return this._clock.getTicksAtTime(time);\n  }\n  /**\n   * Return the elapsed seconds at the given time.\n   * @param  time  When to get the elapsed seconds\n   * @return  The number of elapsed seconds\n   */\n  getSecondsAtTime(time) {\n    return this._clock.getSecondsAtTime(time);\n  }\n  /**\n   * Pulses Per Quarter note. This is the smallest resolution\n   * the Transport timing supports. This should be set once\n   * on initialization and not set again. Changing this value\n   * after other objects have been created can cause problems.\n   */\n  get PPQ() {\n    return this._clock.frequency.multiplier;\n  }\n  set PPQ(ppq) {\n    this._clock.frequency.multiplier = ppq;\n  }\n  //-------------------------------------\n  // \tSYNCING\n  //-------------------------------------\n  /**\n   * Returns the time aligned to the next subdivision\n   * of the Transport. If the Transport is not started,\n   * it will return 0.\n   * Note: this will not work precisely during tempo ramps.\n   * @param  subdivision  The subdivision to quantize to\n   * @return  The context time of the next subdivision.\n   * @example\n   * // the transport must be started, otherwise returns 0\n   * Tone.getTransport().start();\n   * Tone.getTransport().nextSubdivision(\"4n\");\n   */\n  nextSubdivision(subdivision) {\n    subdivision = this.toTicks(subdivision);\n    if (this.state !== \"started\") {\n      // if the transport's not started, return 0\n      return 0;\n    } else {\n      const now = this.now();\n      // the remainder of the current ticks and the subdivision\n      const transportPos = this.getTicksAtTime(now);\n      const remainingTicks = subdivision - transportPos % subdivision;\n      return this._clock.nextTickTime(remainingTicks, now);\n    }\n  }\n  /**\n   * Attaches the signal to the tempo control signal so that\n   * any changes in the tempo will change the signal in the same\n   * ratio.\n   *\n   * @param signal\n   * @param ratio Optionally pass in the ratio between the two signals.\n   * \t\t\tOtherwise it will be computed based on their current values.\n   */\n  syncSignal(signal, ratio) {\n    const now = this.now();\n    let source = this.bpm;\n    let sourceValue = 1 / (60 / source.getValueAtTime(now) / this.PPQ);\n    let nodes = [];\n    // If the signal is in the time domain, sync it to the reciprocal of\n    // the tempo instead of the tempo.\n    if (signal.units === \"time\") {\n      // The input to Pow should be in the range [1 / 4096, 1], where\n      // where 4096 is half of the buffer size of Pow's waveshaper.\n      // Pick a scaling factor based on the initial tempo that ensures\n      // that the initial input is in this range, while leaving room for\n      // tempo changes.\n      const scaleFactor = 1 / 64 / sourceValue;\n      const scaleBefore = new Gain(scaleFactor);\n      const reciprocal = new Pow(-1);\n      const scaleAfter = new Gain(scaleFactor);\n      // @ts-ignore\n      source.chain(scaleBefore, reciprocal, scaleAfter);\n      source = scaleAfter;\n      sourceValue = 1 / sourceValue;\n      nodes = [scaleBefore, reciprocal, scaleAfter];\n    }\n    if (!ratio) {\n      // get the sync ratio\n      if (signal.getValueAtTime(now) !== 0) {\n        ratio = signal.getValueAtTime(now) / sourceValue;\n      } else {\n        ratio = 0;\n      }\n    }\n    const ratioSignal = new Gain(ratio);\n    // @ts-ignore\n    source.connect(ratioSignal);\n    // @ts-ignore\n    ratioSignal.connect(signal._param);\n    nodes.push(ratioSignal);\n    this._syncedSignals.push({\n      initial: signal.value,\n      nodes: nodes,\n      signal\n    });\n    signal.value = 0;\n    return this;\n  }\n  /**\n   * Unsyncs a previously synced signal from the transport's control.\n   * @see {@link syncSignal}.\n   */\n  unsyncSignal(signal) {\n    for (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n      const syncedSignal = this._syncedSignals[i];\n      if (syncedSignal.signal === signal) {\n        syncedSignal.nodes.forEach(node => node.dispose());\n        syncedSignal.signal.value = syncedSignal.initial;\n        this._syncedSignals.splice(i, 1);\n      }\n    }\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._clock.dispose();\n    writable(this, \"bpm\");\n    this._timeline.dispose();\n    this._repeatedEvents.dispose();\n    return this;\n  }\n}\nEmitter.mixin(TransportClass);\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.transport = new TransportClass({\n    context\n  });\n});\nonContextClose(context => {\n  context.transport.dispose();\n});\n", "import { Volume } from \"../component/channel/Volume.js\";\nimport \"../core/context/Destination.js\";\nimport \"../core/clock/Transport.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { defaultArg } from \"../core/util/Defaults.js\";\nimport { noOp, readOnly } from \"../core/util/Interface.js\";\nimport { StateTimeline } from \"../core/util/StateTimeline.js\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck.js\";\nimport { assert, assertContextRunning } from \"../core/util/Debug.js\";\nimport { GT } from \"../core/util/Math.js\";\n/**\n * Base class for sources.\n * start/stop of this.context.transport.\n *\n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport class Source extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * Sources have no inputs\n     */\n    this.input = undefined;\n    /**\n     * Keep track of the scheduled state.\n     */\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * The synced `start` callback function from the transport\n     */\n    this._synced = false;\n    /**\n     * Keep track of all of the scheduled event ids\n     */\n    this._scheduled = [];\n    /**\n     * Placeholder functions for syncing/unsyncing to transport\n     */\n    this._syncedStart = noOp;\n    this._syncedStop = noOp;\n    this._state.memory = 100;\n    this._state.increasing = true;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      mute: options.mute,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this.onstop = options.onstop;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      onstop: noOp,\n      volume: 0\n    });\n  }\n  /**\n   * Returns the playback state of the source, either \"started\" or \"stopped\".\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/ahntone_c3.mp3\", () => {\n   * \tplayer.start();\n   * \tconsole.log(player.state);\n   * }).toDestination();\n   */\n  get state() {\n    if (this._synced) {\n      if (this.context.transport.state === \"started\") {\n        return this._state.getValueAtTime(this.context.transport.seconds);\n      } else {\n        return \"stopped\";\n      }\n    } else {\n      return this._state.getValueAtTime(this.now());\n    }\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * // mute the output\n   * osc.mute = true;\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * Ensure that the scheduled time is not before the current time.\n   * Should only be used when scheduled unsynced.\n   */\n  _clampToCurrentTime(time) {\n    if (this._synced) {\n      return time;\n    } else {\n      return Math.max(time, this.context.currentTime);\n    }\n  }\n  /**\n   * Start the source at the specified time. If no time is given,\n   * start the source now.\n   * @param  time When the source should be started.\n   * @example\n   * const source = new Tone.Oscillator().toDestination();\n   * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n   */\n  start(time, offset, duration) {\n    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n    computedTime = this._clampToCurrentTime(computedTime);\n    // if it's started, stop it and restart it\n    if (!this._synced && this._state.getValueAtTime(computedTime) === \"started\") {\n      // time should be strictly greater than the previous start time\n      assert(GT(computedTime, this._state.get(computedTime).time), \"Start time must be strictly greater than previous start time\");\n      this._state.cancel(computedTime);\n      this._state.setStateAtTime(\"started\", computedTime);\n      this.log(\"restart\", computedTime);\n      this.restart(computedTime, offset, duration);\n    } else {\n      this.log(\"start\", computedTime);\n      this._state.setStateAtTime(\"started\", computedTime);\n      if (this._synced) {\n        // add the offset time to the event\n        const event = this._state.get(computedTime);\n        if (event) {\n          event.offset = this.toSeconds(defaultArg(offset, 0));\n          event.duration = duration ? this.toSeconds(duration) : undefined;\n        }\n        const sched = this.context.transport.schedule(t => {\n          this._start(t, offset, duration);\n        }, computedTime);\n        this._scheduled.push(sched);\n        // if the transport is already started\n        // and the time is greater than where the transport is\n        if (this.context.transport.state === \"started\" && this.context.transport.getSecondsAtTime(this.immediate()) > computedTime) {\n          this._syncedStart(this.now(), this.context.transport.seconds);\n        }\n      } else {\n        assertContextRunning(this.context);\n        this._start(computedTime, offset, duration);\n      }\n    }\n    return this;\n  }\n  /**\n   * Stop the source at the specified time. If no time is given,\n   * stop the source now.\n   * @param  time When the source should be stopped.\n   * @example\n   * const source = new Tone.Oscillator().toDestination();\n   * source.start();\n   * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n   */\n  stop(time) {\n    let computedTime = isUndef(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);\n    computedTime = this._clampToCurrentTime(computedTime);\n    if (this._state.getValueAtTime(computedTime) === \"started\" || isDefined(this._state.getNextState(\"started\", computedTime))) {\n      this.log(\"stop\", computedTime);\n      if (!this._synced) {\n        this._stop(computedTime);\n      } else {\n        const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n        this._scheduled.push(sched);\n      }\n      this._state.cancel(computedTime);\n      this._state.setStateAtTime(\"stopped\", computedTime);\n    }\n    return this;\n  }\n  /**\n   * Restart the source.\n   */\n  restart(time, offset, duration) {\n    time = this.toSeconds(time);\n    if (this._state.getValueAtTime(time) === \"started\") {\n      this._state.cancel(time);\n      this._restart(time, offset, duration);\n    }\n    return this;\n  }\n  /**\n   * Sync the source to the Transport so that all subsequent\n   * calls to `start` and `stop` are synced to the TransportTime\n   * instead of the AudioContext time.\n   *\n   * @example\n   * const osc = new Tone.Oscillator().toDestination();\n   * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n   * osc.sync().start(0).stop(0.3);\n   * // start the transport.\n   * Tone.Transport.start();\n   * // set it to loop once a second\n   * Tone.Transport.loop = true;\n   * Tone.Transport.loopEnd = 1;\n   */\n  sync() {\n    if (!this._synced) {\n      this._synced = true;\n      this._syncedStart = (time, offset) => {\n        if (GT(offset, 0)) {\n          // get the playback state at that time\n          const stateEvent = this._state.get(offset);\n          // listen for start events which may occur in the middle of the sync'ed time\n          if (stateEvent && stateEvent.state === \"started\" && stateEvent.time !== offset) {\n            // get the offset\n            const startOffset = offset - this.toSeconds(stateEvent.time);\n            let duration;\n            if (stateEvent.duration) {\n              duration = this.toSeconds(stateEvent.duration) - startOffset;\n            }\n            this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n          }\n        }\n      };\n      this._syncedStop = time => {\n        const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n        if (this._state.getValueAtTime(seconds) === \"started\") {\n          this._stop(time);\n        }\n      };\n      this.context.transport.on(\"start\", this._syncedStart);\n      this.context.transport.on(\"loopStart\", this._syncedStart);\n      this.context.transport.on(\"stop\", this._syncedStop);\n      this.context.transport.on(\"pause\", this._syncedStop);\n      this.context.transport.on(\"loopEnd\", this._syncedStop);\n    }\n    return this;\n  }\n  /**\n   * Unsync the source to the Transport.\n   * @see {@link sync}\n   */\n  unsync() {\n    if (this._synced) {\n      this.context.transport.off(\"stop\", this._syncedStop);\n      this.context.transport.off(\"pause\", this._syncedStop);\n      this.context.transport.off(\"loopEnd\", this._syncedStop);\n      this.context.transport.off(\"start\", this._syncedStart);\n      this.context.transport.off(\"loopStart\", this._syncedStart);\n    }\n    this._synced = false;\n    // clear all of the scheduled ids\n    this._scheduled.forEach(id => this.context.transport.clear(id));\n    this._scheduled = [];\n    this._state.cancel(0);\n    // stop it also\n    this._stop(0);\n    return this;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.onstop = noOp;\n    this.unsync();\n    this._volume.dispose();\n    this._state.dispose();\n    return this;\n  }\n}\n", "import { connect } from \"../../core/context/ToneAudioNode.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\nimport { isDefined } from \"../../core/util/TypeCheck.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { OneShotSource } from \"../OneShotSource.js\";\nimport { EQ, GTE, LT } from \"../../core/util/Math.js\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource {\n  constructor() {\n    const options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n    super(options);\n    this.name = \"ToneBufferSource\";\n    /**\n     * The oscillator\n     */\n    this._source = this.context.createBufferSource();\n    this._internalChannels = [this._source];\n    /**\n     * indicators if the source has started/stopped\n     */\n    this._sourceStarted = false;\n    this._sourceStopped = false;\n    connect(this._source, this._gainNode);\n    this._source.onended = () => this._stopSource();\n    /**\n     * The playbackRate of the buffer\n     */\n    this.playbackRate = new Param({\n      context: this.context,\n      param: this._source.playbackRate,\n      units: \"positive\",\n      value: options.playbackRate\n    });\n    // set some values initially\n    this.loop = options.loop;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n    this._internalChannels.push(this._source);\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      url: new ToneAudioBuffer(),\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1\n    });\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n  get fadeIn() {\n    return this._fadeIn;\n  }\n  set fadeIn(t) {\n    this._fadeIn = t;\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n  get fadeOut() {\n    return this._fadeOut;\n  }\n  set fadeOut(t) {\n    this._fadeOut = t;\n  }\n  /**\n   * The curve applied to the fades, either \"linear\" or \"exponential\"\n   */\n  get curve() {\n    return this._curve;\n  }\n  set curve(t) {\n    this._curve = t;\n  }\n  /**\n   * Start the buffer\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   * @param  gain  The gain to play the buffer back at.\n   */\n  start(time, offset, duration, gain = 1) {\n    assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n    const computedTime = this.toSeconds(time);\n    // apply the gain envelope\n    this._startGain(computedTime, gain);\n    // if it's a loop the default offset is the loopstart point\n    if (this.loop) {\n      offset = defaultArg(offset, this.loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    }\n    // make sure the offset is not less than 0\n    let computedOffset = Math.max(this.toSeconds(offset), 0);\n    // start the buffer source\n    if (this.loop) {\n      // modify the offset if it's greater than the loop time\n      const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n      const loopStart = this.toSeconds(this.loopStart);\n      const loopDuration = loopEnd - loopStart;\n      // move the offset back\n      if (GTE(computedOffset, loopEnd)) {\n        computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;\n      }\n      // when the offset is very close to the duration, set it to 0\n      if (EQ(computedOffset, this.buffer.duration)) {\n        computedOffset = 0;\n      }\n    }\n    // this.buffer.loaded would have return false if the AudioBuffer was undefined\n    this._source.buffer = this.buffer.get();\n    this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n    if (LT(computedOffset, this.buffer.duration)) {\n      this._sourceStarted = true;\n      this._source.start(computedTime, computedOffset);\n    }\n    // if a duration is given, schedule a stop\n    if (isDefined(duration)) {\n      let computedDur = this.toSeconds(duration);\n      // make sure it's never negative\n      computedDur = Math.max(computedDur, 0);\n      this.stop(computedTime + computedDur);\n    }\n    return this;\n  }\n  _stopSource(time) {\n    if (!this._sourceStopped && this._sourceStarted) {\n      this._sourceStopped = true;\n      this._source.stop(this.toSeconds(time));\n      this._onended();\n    }\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n  get loopStart() {\n    return this._source.loopStart;\n  }\n  set loopStart(loopStart) {\n    this._source.loopStart = this.toSeconds(loopStart);\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n  get loopEnd() {\n    return this._source.loopEnd;\n  }\n  set loopEnd(loopEnd) {\n    this._source.loopEnd = this.toSeconds(loopEnd);\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n  get buffer() {\n    return this._buffer;\n  }\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   */\n  get loop() {\n    return this._source.loop;\n  }\n  set loop(loop) {\n    this._source.loop = loop;\n    if (this._sourceStarted) {\n      this.cancelStop();\n    }\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._source.onended = null;\n    this._source.disconnect();\n    this._buffer.dispose();\n    this.playbackRate.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { assert } from \"../core/util/Debug.js\";\nimport { Source } from \"../source/Source.js\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource.js\";\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\nexport class Noise extends Source {\n  constructor() {\n    const options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n    super(options);\n    this.name = \"Noise\";\n    /**\n     * Private reference to the source\n     */\n    this._source = null;\n    this._playbackRate = options.playbackRate;\n    this.type = options.type;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      fadeIn: 0,\n      fadeOut: 0,\n      playbackRate: 1,\n      type: \"white\"\n    });\n  }\n  /**\n   * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n   * @example\n   * const noise = new Tone.Noise().toDestination().start();\n   * noise.type = \"brown\";\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n    if (this._type !== type) {\n      this._type = type;\n      // if it's playing, stop and restart it\n      if (this.state === \"started\") {\n        const now = this.now();\n        this._stop(now);\n        this._start(now);\n      }\n    }\n  }\n  /**\n   * The playback rate of the noise. Affects\n   * the \"frequency\" of the noise.\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    if (this._source) {\n      this._source.playbackRate.value = rate;\n    }\n  }\n  /**\n   * internal start method\n   */\n  _start(time) {\n    const buffer = _noiseBuffers[this._type];\n    this._source = new ToneBufferSource({\n      url: buffer,\n      context: this.context,\n      fadeIn: this._fadeIn,\n      fadeOut: this._fadeOut,\n      loop: true,\n      onended: () => this.onstop(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output);\n    this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n  }\n  /**\n   * internal stop method\n   */\n  _stop(time) {\n    if (this._source) {\n      this._source.stop(this.toSeconds(time));\n      this._source = null;\n    }\n  }\n  /**\n   * The fadeIn time of the amplitude envelope.\n   */\n  get fadeIn() {\n    return this._fadeIn;\n  }\n  set fadeIn(time) {\n    this._fadeIn = time;\n    if (this._source) {\n      this._source.fadeIn = this._fadeIn;\n    }\n  }\n  /**\n   * The fadeOut time of the amplitude envelope.\n   */\n  get fadeOut() {\n    return this._fadeOut;\n  }\n  set fadeOut(time) {\n    this._fadeOut = time;\n    if (this._source) {\n      this._source.fadeOut = this._fadeOut;\n    }\n  }\n  _restart(time) {\n    // TODO could be optimized by cancelling the buffer source 'stop'\n    this._stop(time);\n    this._start(time);\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    if (this._source) {\n      this._source.disconnect();\n    }\n    return this;\n  }\n}\n//--------------------\n// THE NOISE BUFFERS\n//--------------------\n// Noise buffer stats\nconst BUFFER_LENGTH = 44100 * 5;\nconst NUM_CHANNELS = 2;\n/**\n * Cache the noise buffers\n */\nconst _noiseCache = {\n  brown: null,\n  pink: null,\n  white: null\n};\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\nconst _noiseBuffers = {\n  get brown() {\n    if (!_noiseCache.brown) {\n      const buffer = [];\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let lastOut = 0.0;\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          channel[i] = (lastOut + 0.02 * white) / 1.02;\n          lastOut = channel[i];\n          channel[i] *= 3.5; // (roughly) compensate for gain\n        }\n      }\n      _noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n    }\n    return _noiseCache.brown;\n  },\n  get pink() {\n    if (!_noiseCache.pink) {\n      const buffer = [];\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        let b0, b1, b2, b3, b4, b5, b6;\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          const white = Math.random() * 2 - 1;\n          b0 = 0.99886 * b0 + white * 0.0555179;\n          b1 = 0.99332 * b1 + white * 0.0750759;\n          b2 = 0.969 * b2 + white * 0.153852;\n          b3 = 0.8665 * b3 + white * 0.3104856;\n          b4 = 0.55 * b4 + white * 0.5329522;\n          b5 = -0.7616 * b5 - white * 0.016898;\n          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n          channel[i] *= 0.11; // (roughly) compensate for gain\n          b6 = white * 0.115926;\n        }\n      }\n      _noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n    }\n    return _noiseCache.pink;\n  },\n  get white() {\n    if (!_noiseCache.white) {\n      const buffer = [];\n      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        const channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        for (let i = 0; i < BUFFER_LENGTH; i++) {\n          channel[i] = Math.random() * 2 - 1;\n        }\n      }\n      _noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n    }\n    return _noiseCache.white;\n  }\n};\n", "import { __awaiter } from \"tslib\";\nimport { connect, ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { Volume } from \"../component/channel/Volume.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { assert } from \"../core/util/Debug.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck.js\";\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input.\n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia().connect(meter);\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * \tconsole.log(\"mic open\");\n * \t// print the incoming mic levels in decibels\n * \tsetInterval(() => console.log(meter.getValue()), 100);\n * }).catch(e => {\n * \t// promise is rejected when the user doesn't have or allow mic access\n * \tconsole.log(\"mic not open\");\n * });\n * @category Source\n */\nexport class UserMedia extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n    super(options);\n    this.name = \"UserMedia\";\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this.mute = options.mute;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Open the media stream. If a string is passed in, it is assumed\n   * to be the label or id of the stream, if a number is passed in,\n   * it is the input number of the stream.\n   * @param  labelOrId The label or id of the audio input media device.\n   *                   With no argument, the default stream is opened.\n   * @return The promise is resolved when the stream is open.\n   */\n  open(labelOrId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(UserMedia.supported, \"UserMedia is not supported\");\n      // close the previous stream\n      if (this.state === \"started\") {\n        this.close();\n      }\n      const devices = yield UserMedia.enumerateDevices();\n      if (isNumber(labelOrId)) {\n        this._device = devices[labelOrId];\n      } else {\n        this._device = devices.find(device => {\n          return device.label === labelOrId || device.deviceId === labelOrId;\n        });\n        // didn't find a matching device\n        if (!this._device && devices.length > 0) {\n          this._device = devices[0];\n        }\n        assert(isDefined(this._device), `No matching device ${labelOrId}`);\n      }\n      // do getUserMedia\n      const constraints = {\n        audio: {\n          echoCancellation: false,\n          sampleRate: this.context.sampleRate,\n          noiseSuppression: false,\n          mozNoiseSuppression: false\n        }\n      };\n      if (this._device) {\n        // @ts-ignore\n        constraints.audio.deviceId = this._device.deviceId;\n      }\n      const stream = yield navigator.mediaDevices.getUserMedia(constraints);\n      // start a new source only if the previous one is closed\n      if (!this._stream) {\n        this._stream = stream;\n        // Wrap a MediaStreamSourceNode around the live input stream.\n        const mediaStreamNode = this.context.createMediaStreamSource(stream);\n        // Connect the MediaStreamSourceNode to a gate gain node\n        connect(mediaStreamNode, this.output);\n        this._mediaStream = mediaStreamNode;\n      }\n      return this;\n    });\n  }\n  /**\n   * Close the media stream\n   */\n  close() {\n    if (this._stream && this._mediaStream) {\n      this._stream.getAudioTracks().forEach(track => {\n        track.stop();\n      });\n      this._stream = undefined;\n      // remove the old media stream\n      this._mediaStream.disconnect();\n      this._mediaStream = undefined;\n    }\n    this._device = undefined;\n    return this;\n  }\n  /**\n   * Returns a promise which resolves with the list of audio input devices available.\n   * @return The promise that is resolved with the devices\n   * @example\n   * Tone.UserMedia.enumerateDevices().then((devices) => {\n   * \t// print the device labels\n   * \tconsole.log(devices.map(device => device.label));\n   * });\n   */\n  static enumerateDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allDevices = yield navigator.mediaDevices.enumerateDevices();\n      return allDevices.filter(device => {\n        return device.kind === \"audioinput\";\n      });\n    });\n  }\n  /**\n   * Returns the playback state of the source, \"started\" when the microphone is open\n   * and \"stopped\" when the mic is closed.\n   */\n  get state() {\n    return this._stream && this._stream.active ? \"started\" : \"stopped\";\n  }\n  /**\n   * Returns an identifier for the represented device that is\n   * persisted across sessions. It is un-guessable by other applications and\n   * unique to the origin of the calling application. It is reset when the\n   * user clears cookies (for Private Browsing, a different identifier is\n   * used that is not persisted across sessions). Returns undefined when the\n   * device is not open.\n   */\n  get deviceId() {\n    if (this._device) {\n      return this._device.deviceId;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Returns a group identifier. Two devices have the\n   * same group identifier if they belong to the same physical device.\n   * Returns null  when the device is not open.\n   */\n  get groupId() {\n    if (this._device) {\n      return this._device.groupId;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Returns a label describing this device (for example \"Built-in Microphone\").\n   * Returns undefined when the device is not open or label is not available\n   * because of permissions.\n   */\n  get label() {\n    if (this._device) {\n      return this._device.label;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const mic = new Tone.UserMedia();\n   * mic.open().then(() => {\n   * \t// promise resolves when input is available\n   * });\n   * // mute the output\n   * mic.mute = true;\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  dispose() {\n    super.dispose();\n    this.close();\n    this._volume.dispose();\n    this.volume.dispose();\n    return this;\n  }\n  /**\n   * If getUserMedia is supported by the browser.\n   */\n  static get supported() {\n    return isDefined(navigator.mediaDevices) && isDefined(navigator.mediaDevices.getUserMedia);\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext.js\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport function generateWaveform(instance, length) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const duration = length / instance.context.sampleRate;\n    const context = new OfflineContext(1, duration, instance.context.sampleRate);\n    const clone = new instance.constructor(Object.assign(instance.get(), {\n      // should do 2 iterations\n      frequency: 2 / duration,\n      // zero out the detune\n      detune: 0,\n      context\n    })).toDestination();\n    clone.start(0);\n    const buffer = yield context.render();\n    return buffer.getChannelData(0);\n  });\n}\n", "import { connect } from \"../../core/context/ToneAudioNode.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { OneShotSource } from \"../OneShotSource.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***{@link Oscillator} is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource {\n  constructor() {\n    const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"ToneOscillatorNode\";\n    /**\n     * The oscillator\n     */\n    this._oscillator = this.context.createOscillator();\n    this._internalChannels = [this._oscillator];\n    connect(this._oscillator, this._gainNode);\n    this.type = options.type;\n    this.frequency = new Param({\n      context: this.context,\n      param: this._oscillator.frequency,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      param: this._oscillator.detune,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(OneShotSource.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Start the oscillator node at the given time\n   * @param  time When to start the oscillator\n   */\n  start(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"start\", computedTime);\n    this._startGain(computedTime);\n    this._oscillator.start(computedTime);\n    return this;\n  }\n  _stopSource(time) {\n    this._oscillator.stop(time);\n  }\n  /**\n   * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n   */\n  setPeriodicWave(periodicWave) {\n    this._oscillator.setPeriodicWave(periodicWave);\n    return this;\n  }\n  /**\n   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n   */\n  get type() {\n    return this._oscillator.type;\n  }\n  set type(type) {\n    this._oscillator.type = type;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    if (this.state === \"started\") {\n      this.stop();\n    }\n    this._oscillator.disconnect();\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { isDefined } from \"../../core/util/TypeCheck.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\nimport { clamp } from \"../../core/util/Math.js\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"Oscillator\";\n    /**\n     * the main oscillator\n     */\n    this._oscillator = null;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    readOnly(this, \"frequency\");\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, \"detune\");\n    this._partials = options.partials;\n    this._partialCount = options.partialCount;\n    this._type = options.type;\n    if (options.partialCount && options.type !== \"custom\") {\n      this._type = this.baseType + options.partialCount.toString();\n    }\n    this.phase = options.phase;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      partialCount: 0,\n      partials: [],\n      phase: 0,\n      type: \"sine\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    const computedTime = this.toSeconds(time);\n    // new oscillator with previous values\n    const oscillator = new ToneOscillatorNode({\n      context: this.context,\n      onended: () => this.onstop(this)\n    });\n    this._oscillator = oscillator;\n    if (this._wave) {\n      this._oscillator.setPeriodicWave(this._wave);\n    } else {\n      this._oscillator.type = this._type;\n    }\n    // connect the control signal to the oscillator frequency & detune\n    this._oscillator.connect(this.output);\n    this.frequency.connect(this._oscillator.frequency);\n    this.detune.connect(this._oscillator.detune);\n    // start the oscillator\n    this._oscillator.start(computedTime);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n    if (this._oscillator) {\n      this._oscillator.stop(computedTime);\n    }\n  }\n  /**\n   * Restart the oscillator. Does not stop the oscillator, but instead\n   * just cancels any scheduled 'stop' from being invoked.\n   */\n  _restart(time) {\n    const computedTime = this.toSeconds(time);\n    this.log(\"restart\", computedTime);\n    if (this._oscillator) {\n      this._oscillator.cancelStop();\n    }\n    this._state.cancel(computedTime);\n    return this;\n  }\n  /**\n   * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n   * will also affect the oscillators frequency.\n   * @example\n   * const osc = new Tone.Oscillator().toDestination().start();\n   * osc.frequency.value = 440;\n   * // the ratio between the bpm and the frequency will be maintained\n   * osc.syncFrequency();\n   * // double the tempo\n   * Tone.Transport.bpm.value *= 2;\n   * // the frequency of the oscillator is doubled to 880\n   */\n  syncFrequency() {\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the oscillator's frequency from the Transport.\n   * @see {@link syncFrequency}\n   */\n  unsyncFrequency() {\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Get a cached periodic wave. Avoids having to recompute\n   * the oscillator values when they have already been computed\n   * with the same values.\n   */\n  _getCachedPeriodicWave() {\n    if (this._type === \"custom\") {\n      const oscProps = Oscillator._periodicWaveCache.find(description => {\n        return description.phase === this._phase && deepEquals(description.partials, this._partials);\n      });\n      return oscProps;\n    } else {\n      const oscProps = Oscillator._periodicWaveCache.find(description => {\n        return description.type === this._type && description.phase === this._phase;\n      });\n      this._partialCount = oscProps ? oscProps.partialCount : this._partialCount;\n      return oscProps;\n    }\n  }\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    this._type = type;\n    const isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n    if (this._phase === 0 && isBasicType) {\n      this._wave = undefined;\n      this._partialCount = 0;\n      // just go with the basic approach\n      if (this._oscillator !== null) {\n        // already tested that it's a basic type\n        this._oscillator.type = type;\n      }\n    } else {\n      // first check if the value is cached\n      const cache = this._getCachedPeriodicWave();\n      if (isDefined(cache)) {\n        const {\n          partials,\n          wave\n        } = cache;\n        this._wave = wave;\n        this._partials = partials;\n        if (this._oscillator !== null) {\n          this._oscillator.setPeriodicWave(this._wave);\n        }\n      } else {\n        const [real, imag] = this._getRealImaginary(type, this._phase);\n        const periodicWave = this.context.createPeriodicWave(real, imag);\n        this._wave = periodicWave;\n        if (this._oscillator !== null) {\n          this._oscillator.setPeriodicWave(this._wave);\n        }\n        // set the cache\n        Oscillator._periodicWaveCache.push({\n          imag,\n          partialCount: this._partialCount,\n          partials: this._partials,\n          phase: this._phase,\n          real,\n          type: this._type,\n          wave: this._wave\n        });\n        if (Oscillator._periodicWaveCache.length > 100) {\n          Oscillator._periodicWaveCache.shift();\n        }\n      }\n    }\n  }\n  get baseType() {\n    return this._type.replace(this.partialCount.toString(), \"\");\n  }\n  set baseType(baseType) {\n    if (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n      this.type = baseType + this.partialCount;\n    } else {\n      this.type = baseType;\n    }\n  }\n  get partialCount() {\n    return this._partialCount;\n  }\n  set partialCount(p) {\n    assertRange(p, 0);\n    let type = this._type;\n    const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n    if (partial) {\n      type = partial[1];\n    }\n    if (this._type !== \"custom\") {\n      if (p === 0) {\n        this.type = type;\n      } else {\n        this.type = type + p.toString();\n      }\n    } else {\n      // extend or shorten the partials array\n      const fullPartials = new Float32Array(p);\n      // copy over the partials array\n      this._partials.forEach((v, i) => fullPartials[i] = v);\n      this._partials = Array.from(fullPartials);\n      this.type = this._type;\n    }\n  }\n  /**\n   * Returns the real and imaginary components based\n   * on the oscillator type.\n   * @returns [real: Float32Array, imaginary: Float32Array]\n   */\n  _getRealImaginary(type, phase) {\n    const fftSize = 4096;\n    let periodicWaveSize = fftSize / 2;\n    const real = new Float32Array(periodicWaveSize);\n    const imag = new Float32Array(periodicWaveSize);\n    let partialCount = 1;\n    if (type === \"custom\") {\n      partialCount = this._partials.length + 1;\n      this._partialCount = this._partials.length;\n      periodicWaveSize = partialCount;\n      // if the partial count is 0, don't bother doing any computation\n      if (this._partials.length === 0) {\n        return [real, imag];\n      }\n    } else {\n      const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n      if (partial) {\n        partialCount = parseInt(partial[2], 10) + 1;\n        this._partialCount = parseInt(partial[2], 10);\n        type = partial[1];\n        partialCount = Math.max(partialCount, 2);\n        periodicWaveSize = partialCount;\n      } else {\n        this._partialCount = 0;\n      }\n      this._partials = [];\n    }\n    for (let n = 1; n < periodicWaveSize; ++n) {\n      const piFactor = 2 / (n * Math.PI);\n      let b;\n      switch (type) {\n        case \"sine\":\n          b = n <= partialCount ? 1 : 0;\n          this._partials[n - 1] = b;\n          break;\n        case \"square\":\n          b = n & 1 ? 2 * piFactor : 0;\n          this._partials[n - 1] = b;\n          break;\n        case \"sawtooth\":\n          b = piFactor * (n & 1 ? 1 : -1);\n          this._partials[n - 1] = b;\n          break;\n        case \"triangle\":\n          if (n & 1) {\n            b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n          } else {\n            b = 0;\n          }\n          this._partials[n - 1] = b;\n          break;\n        case \"custom\":\n          b = this._partials[n - 1];\n          break;\n        default:\n          throw new TypeError(\"Oscillator: invalid type: \" + type);\n      }\n      if (b !== 0) {\n        real[n] = -b * Math.sin(phase * n);\n        imag[n] = b * Math.cos(phase * n);\n      } else {\n        real[n] = 0;\n        imag[n] = 0;\n      }\n    }\n    return [real, imag];\n  }\n  /**\n   * Compute the inverse FFT for a given phase.\n   */\n  _inverseFFT(real, imag, phase) {\n    let sum = 0;\n    const len = real.length;\n    for (let i = 0; i < len; i++) {\n      sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n    }\n    return sum;\n  }\n  /**\n   * Returns the initial value of the oscillator when stopped.\n   * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n   */\n  getInitialValue() {\n    const [real, imag] = this._getRealImaginary(this._type, 0);\n    let maxValue = 0;\n    const twoPi = Math.PI * 2;\n    const testPositions = 32;\n    // check for peaks in 16 places\n    for (let i = 0; i < testPositions; i++) {\n      maxValue = Math.max(this._inverseFFT(real, imag, i / testPositions * twoPi), maxValue);\n    }\n    return clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n  }\n  get partials() {\n    return this._partials.slice(0, this.partialCount);\n  }\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n    if (partials.length) {\n      this.type = \"custom\";\n    }\n  }\n  get phase() {\n    return this._phase * (180 / Math.PI);\n  }\n  set phase(phase) {\n    this._phase = phase * Math.PI / 180;\n    // reset the type\n    this.type = this._type;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  dispose() {\n    super.dispose();\n    if (this._oscillator !== null) {\n      this._oscillator.dispose();\n    }\n    this._wave = undefined;\n    this.frequency.dispose();\n    this.detune.dispose();\n    return this;\n  }\n}\n/**\n * Cache the periodic waves to avoid having to redo computations\n */\nOscillator._periodicWaveCache = [];\n", "import { SignalOperator } from \"./SignalOperator.js\";\nimport { WaveShaper } from \"./WaveShaper.js\";\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * @see {@link GainToAudio}.\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"AudioToGain\";\n    /**\n     * The node which converts the audio ranges\n     */\n    this._norm = new WaveShaper({\n      context: this.context,\n      mapping: x => (x + 1) / 2\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n    this.input = this._norm;\n    /**\n     * The GainRange output [0, 1]\n     */\n    this.output = this._norm;\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this._norm.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal } from \"./Signal.js\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply extends Signal {\n  constructor() {\n    const options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n    this.override = false;\n    this._mult = this.input = this.output = new Gain({\n      context: this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    this.factor = this._param = this._mult.gain;\n    this.factor.setValueAtTime(options.value, 0);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._mult.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { AudioToGain } from \"../../signal/AudioToGain.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    super(options);\n    this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n    this._modulationNode = new Gain({\n      context: this.context\n    });\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    // connections\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n    this._carrier.chain(this._modulationNode, this.output);\n    readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    this._modulator.start(time);\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    this._modulator.stop(time);\n    this._carrier.stop(time);\n  }\n  _restart(time) {\n    this._modulator.restart(time);\n    this._carrier.restart(time);\n  }\n  /**\n   * The type of the carrier oscillator\n   */\n  get type() {\n    return this._carrier.type;\n  }\n  set type(type) {\n    this._carrier.type = type;\n  }\n  get baseType() {\n    return this._carrier.baseType;\n  }\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n  get modulationType() {\n    return this._modulator.type;\n  }\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n  get phase() {\n    return this._carrier.phase;\n  }\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n  get partials() {\n    return this._carrier.partials;\n  }\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this._modulationNode.dispose();\n    this._modulationScale.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class FMOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    super(options);\n    this.name = \"FMOscillator\";\n    /**\n     * the node where the modulation happens\n     */\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: 0,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.detune = this._carrier.detune;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.modulationIndex\n    });\n    // connections\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this._modulator.connect(this._modulationNode.gain);\n    this._modulationNode.connect(this._carrier.frequency);\n    this._carrier.connect(this.output);\n    this.detune.connect(this._modulator.detune);\n    readOnly(this, [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationIndex: 2,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    this._modulator.start(time);\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    this._modulator.stop(time);\n    this._carrier.stop(time);\n  }\n  _restart(time) {\n    this._modulator.restart(time);\n    this._carrier.restart(time);\n    return this;\n  }\n  get type() {\n    return this._carrier.type;\n  }\n  set type(type) {\n    this._carrier.type = type;\n  }\n  get baseType() {\n    return this._carrier.baseType;\n  }\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n  get modulationType() {\n    return this._modulator.type;\n  }\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n  get phase() {\n    return this._carrier.phase;\n  }\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n  get partials() {\n    return this._carrier.partials;\n  }\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.harmonicity.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this._modulationNode.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { WaveShaper } from \"../../signal/WaveShaper.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    super(options);\n    this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n    this._widthGate = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n    this._thresh = new WaveShaper({\n      context: this.context,\n      mapping: val => val <= 0 ? -1 : 1\n    });\n    this.width = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    this._triangle = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    this.frequency = this._triangle.frequency;\n    this.detune = this._triangle.detune;\n    // connections\n    this._triangle.chain(this._thresh, this.output);\n    this.width.chain(this._widthGate, this._thresh);\n    readOnly(this, [\"width\", \"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      phase: 0,\n      type: \"pulse\",\n      width: 0.2\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    time = this.toSeconds(time);\n    this._triangle.start(time);\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    time = this.toSeconds(time);\n    this._triangle.stop(time);\n    // the width is still connected to the output.\n    // that needs to be stopped also\n    this._widthGate.gain.cancelScheduledValues(time);\n    this._widthGate.gain.setValueAtTime(0, time);\n  }\n  _restart(time) {\n    this._triangle.restart(time);\n    this._widthGate.gain.cancelScheduledValues(time);\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n  get phase() {\n    return this._triangle.phase;\n  }\n  set phase(phase) {\n    this._triangle.phase = phase;\n  }\n  /**\n   * The type of the oscillator. Always returns \"pulse\".\n   */\n  get type() {\n    return \"pulse\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pulse\".\n   */\n  get baseType() {\n    return \"pulse\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * *Internal use* The carrier oscillator type is fed through the\n   * waveshaper node to create the pulse. Using different carrier oscillators\n   * changes oscillator's behavior.\n   */\n  set carrierType(type) {\n    this._triangle.type = type;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up method.\n   */\n  dispose() {\n    super.dispose();\n    this._triangle.dispose();\n    this.width.dispose();\n    this._widthGate.dispose();\n    this._thresh.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { noOp, readOnly } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    super(options);\n    this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n    this._oscillators = [];\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this._spread = options.spread;\n    this._type = options.type;\n    this._phase = options.phase;\n    this._partials = options.partials;\n    this._partialCount = options.partialCount;\n    // set the count initially\n    this.count = options.count;\n    readOnly(this, [\"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      count: 3,\n      spread: 20,\n      type: \"sawtooth\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    time = this.toSeconds(time);\n    this._forEach(osc => osc.start(time));\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    time = this.toSeconds(time);\n    this._forEach(osc => osc.stop(time));\n  }\n  _restart(time) {\n    this._forEach(osc => osc.restart(time));\n  }\n  /**\n   * Iterate over all of the oscillators\n   */\n  _forEach(iterator) {\n    for (let i = 0; i < this._oscillators.length; i++) {\n      iterator(this._oscillators[i], i);\n    }\n  }\n  /**\n   * The type of the oscillator\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    this._type = type;\n    this._forEach(osc => osc.type = type);\n  }\n  /**\n   * The detune spread between the oscillators. If \"count\" is\n   * set to 3 oscillators and the \"spread\" is set to 40,\n   * the three oscillators would be detuned like this: [-20, 0, 20]\n   * for a total detune spread of 40 cents.\n   * @example\n   * const fatOsc = new Tone.FatOscillator().toDestination().start();\n   * fatOsc.spread = 70;\n   */\n  get spread() {\n    return this._spread;\n  }\n  set spread(spread) {\n    this._spread = spread;\n    if (this._oscillators.length > 1) {\n      const start = -spread / 2;\n      const step = spread / (this._oscillators.length - 1);\n      this._forEach((osc, i) => osc.detune.value = start + step * i);\n    }\n  }\n  /**\n   * The number of detuned oscillators. Must be an integer greater than 1.\n   * @example\n   * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n   * // use 4 sawtooth oscillators\n   * fatOsc.count = 4;\n   */\n  get count() {\n    return this._oscillators.length;\n  }\n  set count(count) {\n    assertRange(count, 1);\n    if (this._oscillators.length !== count) {\n      // dispose the previous oscillators\n      this._forEach(osc => osc.dispose());\n      this._oscillators = [];\n      for (let i = 0; i < count; i++) {\n        const osc = new Oscillator({\n          context: this.context,\n          volume: -6 - count * 1.1,\n          type: this._type,\n          phase: this._phase + i / count * 360,\n          partialCount: this._partialCount,\n          onstop: i === 0 ? () => this.onstop(this) : noOp\n        });\n        if (this.type === \"custom\") {\n          osc.partials = this._partials;\n        }\n        this.frequency.connect(osc.frequency);\n        this.detune.connect(osc.detune);\n        osc.detune.overridden = false;\n        osc.connect(this.output);\n        this._oscillators[i] = osc;\n      }\n      // set the spread\n      this.spread = this._spread;\n      if (this.state === \"started\") {\n        this._forEach(osc => osc.start());\n      }\n    }\n  }\n  get phase() {\n    return this._phase;\n  }\n  set phase(phase) {\n    this._phase = phase;\n    this._forEach((osc, i) => osc.phase = this._phase + i / this.count * 360);\n  }\n  get baseType() {\n    return this._oscillators[0].baseType;\n  }\n  set baseType(baseType) {\n    this._forEach(osc => osc.baseType = baseType);\n    this._type = this._oscillators[0].type;\n  }\n  get partials() {\n    return this._oscillators[0].partials;\n  }\n  set partials(partials) {\n    this._partials = partials;\n    this._partialCount = this._partials.length;\n    if (partials.length) {\n      this._type = \"custom\";\n      this._forEach(osc => osc.partials = partials);\n    }\n  }\n  get partialCount() {\n    return this._oscillators[0].partialCount;\n  }\n  set partialCount(partialCount) {\n    this._partialCount = partialCount;\n    this._forEach(osc => osc.partialCount = partialCount);\n    this._type = this._oscillators[0].type;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this._forEach(osc => osc.dispose());\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\nimport { PulseOscillator } from \"./PulseOscillator.js\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    super(options);\n    this.name = \"PWMOscillator\";\n    this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n    this._scale = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._pulse = new PulseOscillator({\n      context: this.context,\n      frequency: options.modulationFrequency\n    });\n    // change the pulse oscillator type\n    this._pulse.carrierType = \"sine\";\n    this.modulationFrequency = this._pulse.frequency;\n    this._modulator = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase\n    });\n    this.frequency = this._modulator.frequency;\n    this.detune = this._modulator.detune;\n    // connections\n    this._modulator.chain(this._scale, this._pulse.width);\n    this._pulse.connect(this.output);\n    readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    time = this.toSeconds(time);\n    this._modulator.start(time);\n    this._pulse.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    time = this.toSeconds(time);\n    this._modulator.stop(time);\n    this._pulse.stop(time);\n  }\n  /**\n   * restart the oscillator\n   */\n  _restart(time) {\n    this._modulator.restart(time);\n    this._pulse.restart(time);\n  }\n  /**\n   * The type of the oscillator. Always returns \"pwm\".\n   */\n  get type() {\n    return \"pwm\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pwm\".\n   */\n  get baseType() {\n    return \"pwm\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n  get phase() {\n    return this._modulator.phase;\n  }\n  set phase(phase) {\n    this._modulator.phase = phase;\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._pulse.dispose();\n    this._scale.dispose();\n    this._modulator.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { AMOscillator } from \"./AMOscillator.js\";\nimport { FatOscillator } from \"./FatOscillator.js\";\nimport { FMOscillator } from \"./FMOscillator.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform } from \"./OscillatorInterface.js\";\nimport { PulseOscillator } from \"./PulseOscillator.js\";\nimport { PWMOscillator } from \"./PWMOscillator.js\";\nconst OmniOscillatorSourceMap = {\n  am: AMOscillator,\n  fat: FatOscillator,\n  fm: FMOscillator,\n  oscillator: Oscillator,\n  pulse: PulseOscillator,\n  pwm: PWMOscillator\n};\n/**\n * OmniOscillator aggregates all of the oscillator types into one.\n * @example\n * return Tone.Offline(() => {\n * \tconst omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class OmniOscillator extends Source {\n  constructor() {\n    const options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"OmniOscillator\";\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(this, [\"frequency\", \"detune\"]);\n    // set the options\n    this.set(options);\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    this._oscillator.start(time);\n  }\n  /**\n   * start the oscillator\n   */\n  _stop(time) {\n    this._oscillator.stop(time);\n  }\n  _restart(time) {\n    this._oscillator.restart(time);\n    return this;\n  }\n  /**\n   * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n   * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n   * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n   * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n   * when it's not.\n   * @example\n   * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n   * omniOsc.type = \"pwm\";\n   * // modulationFrequency is parameter which is available\n   * // only when the type is \"pwm\".\n   * omniOsc.modulationFrequency.value = 0.5;\n   */\n  get type() {\n    let prefix = \"\";\n    if ([\"am\", \"fm\", \"fat\"].some(p => this._sourceType === p)) {\n      prefix = this._sourceType;\n    }\n    return prefix + this._oscillator.type;\n  }\n  set type(type) {\n    if (type.substr(0, 2) === \"fm\") {\n      this._createNewOscillator(\"fm\");\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(2);\n    } else if (type.substr(0, 2) === \"am\") {\n      this._createNewOscillator(\"am\");\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(2);\n    } else if (type.substr(0, 3) === \"fat\") {\n      this._createNewOscillator(\"fat\");\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type.substr(3);\n    } else if (type === \"pwm\") {\n      this._createNewOscillator(\"pwm\");\n      this._oscillator = this._oscillator;\n    } else if (type === \"pulse\") {\n      this._createNewOscillator(\"pulse\");\n    } else {\n      this._createNewOscillator(\"oscillator\");\n      this._oscillator = this._oscillator;\n      this._oscillator.type = type;\n    }\n  }\n  /**\n   * The value is an empty array when the type is not \"custom\".\n   * This is not available on \"pwm\" and \"pulse\" oscillator types.\n   * @see {@link Oscillator.partials}\n   */\n  get partials() {\n    return this._oscillator.partials;\n  }\n  set partials(partials) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n      this._oscillator.partials = partials;\n    }\n  }\n  get partialCount() {\n    return this._oscillator.partialCount;\n  }\n  set partialCount(partialCount) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n      this._oscillator.partialCount = partialCount;\n    }\n  }\n  set(props) {\n    // make sure the type is set first\n    if (Reflect.has(props, \"type\") && props.type) {\n      this.type = props.type;\n    }\n    // then set the rest\n    super.set(props);\n    return this;\n  }\n  /**\n   * connect the oscillator to the frequency and detune signals\n   */\n  _createNewOscillator(oscType) {\n    if (oscType !== this._sourceType) {\n      this._sourceType = oscType;\n      const OscConstructor = OmniOscillatorSourceMap[oscType];\n      // short delay to avoid clicks on the change\n      const now = this.now();\n      if (this._oscillator) {\n        const oldOsc = this._oscillator;\n        oldOsc.stop(now);\n        // dispose the old one\n        this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n      }\n      this._oscillator = new OscConstructor({\n        context: this.context\n      });\n      this.frequency.connect(this._oscillator.frequency);\n      this.detune.connect(this._oscillator.detune);\n      this._oscillator.connect(this.output);\n      this._oscillator.onstop = () => this.onstop(this);\n      if (this.state === \"started\") {\n        this._oscillator.start(now);\n      }\n    }\n  }\n  get phase() {\n    return this._oscillator.phase;\n  }\n  set phase(phase) {\n    this._oscillator.phase = phase;\n  }\n  /**\n   * The source type of the oscillator.\n   * @example\n   * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n   * console.log(omniOsc.sourceType); // 'fm'\n   */\n  get sourceType() {\n    return this._sourceType;\n  }\n  set sourceType(sType) {\n    // the basetype defaults to sine\n    let baseType = \"sine\";\n    if (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n      baseType = this._oscillator.type;\n    }\n    // set the type\n    if (sType === \"fm\") {\n      this.type = \"fm\" + baseType;\n    } else if (sType === \"am\") {\n      this.type = \"am\" + baseType;\n    } else if (sType === \"fat\") {\n      this.type = \"fat\" + baseType;\n    } else if (sType === \"oscillator\") {\n      this.type = baseType;\n    } else if (sType === \"pulse\") {\n      this.type = \"pulse\";\n    } else if (sType === \"pwm\") {\n      this.type = \"pwm\";\n    }\n  }\n  _getOscType(osc, sourceType) {\n    return osc instanceof OmniOscillatorSourceMap[sourceType];\n  }\n  /**\n   * The base type of the oscillator.\n   * @see {@link Oscillator.baseType}\n   * @example\n   * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n   * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n   */\n  get baseType() {\n    return this._oscillator.baseType;\n  }\n  set baseType(baseType) {\n    if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\") && baseType !== \"pulse\" && baseType !== \"pwm\") {\n      this._oscillator.baseType = baseType;\n    }\n  }\n  /**\n   * The width of the oscillator when sourceType === \"pulse\".\n   * @see {@link PWMOscillator}\n   */\n  get width() {\n    if (this._getOscType(this._oscillator, \"pulse\")) {\n      return this._oscillator.width;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The number of detuned oscillators when sourceType === \"fat\".\n   * @see {@link FatOscillator.count}\n   */\n  get count() {\n    if (this._getOscType(this._oscillator, \"fat\")) {\n      return this._oscillator.count;\n    } else {\n      return undefined;\n    }\n  }\n  set count(count) {\n    if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n      this._oscillator.count = count;\n    }\n  }\n  /**\n   * The detune spread between the oscillators when sourceType === \"fat\".\n   * @see {@link FatOscillator.count}\n   */\n  get spread() {\n    if (this._getOscType(this._oscillator, \"fat\")) {\n      return this._oscillator.spread;\n    } else {\n      return undefined;\n    }\n  }\n  set spread(spread) {\n    if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n      this._oscillator.spread = spread;\n    }\n  }\n  /**\n   * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n   * @see {@link AMOscillator} or {@link FMOscillator}\n   */\n  get modulationType() {\n    if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n      return this._oscillator.modulationType;\n    } else {\n      return undefined;\n    }\n  }\n  set modulationType(mType) {\n    if ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n      this._oscillator.modulationType = mType;\n    }\n  }\n  /**\n   * The modulation index when the sourceType === \"fm\"\n   * @see {@link FMOscillator}.\n   */\n  get modulationIndex() {\n    if (this._getOscType(this._oscillator, \"fm\")) {\n      return this._oscillator.modulationIndex;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n   * @see {@link AMOscillator} or {@link FMOscillator}\n   */\n  get harmonicity() {\n    if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n      return this._oscillator.harmonicity;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n   * see {@link PWMOscillator}\n   * @min 0.1\n   * @max 5\n   */\n  get modulationFrequency() {\n    if (this._getOscType(this._oscillator, \"pwm\")) {\n      return this._oscillator.modulationFrequency;\n    } else {\n      return undefined;\n    }\n  }\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      return generateWaveform(this, length);\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.detune.dispose();\n    this.frequency.dispose();\n    this._oscillator.dispose();\n    return this;\n  }\n}\n", "import { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal } from \"./Signal.js\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n  constructor() {\n    super(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"]));\n    this.override = false;\n    this.name = \"Add\";\n    /**\n     * the summing node\n     */\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n    this.addend = this._param;\n    connectSeries(this._constantSource, this._sum);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._sum.dispose();\n    return this;\n  }\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Add } from \"./Add.js\";\nimport { Multiply } from \"./Multiply.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * const scale = new Tone.Scale(50, 100);\n * const signal = new Tone.Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\nexport class Scale extends SignalOperator {\n  constructor() {\n    const options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n    super(options);\n    this.name = \"Scale\";\n    this._mult = this.input = new Multiply({\n      context: this.context,\n      value: options.max - options.min\n    });\n    this._add = this.output = new Add({\n      context: this.context,\n      value: options.min\n    });\n    this._min = options.min;\n    this._max = options.max;\n    this.input.connect(this.output);\n  }\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      max: 1,\n      min: 0\n    });\n  }\n  /**\n   * The minimum output value. This number is output when the value input value is 0.\n   */\n  get min() {\n    return this._min;\n  }\n  set min(min) {\n    this._min = min;\n    this._setRange();\n  }\n  /**\n   * The maximum output value. This number is output when the value input value is 1.\n   */\n  get max() {\n    return this._max;\n  }\n  set max(max) {\n    this._max = max;\n    this._setRange();\n  }\n  /**\n   * set the values\n   */\n  _setRange() {\n    this._add.value = this._min;\n    this._mult.value = this._max - this._min;\n  }\n  dispose() {\n    super.dispose();\n    this._add.dispose();\n    this._mult.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../core/context/Gain.js\";\nimport { connect, disconnect } from \"../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Tone.Zero outputs 0's at audio-rate. The reason this has to be\n * it's own class is that many browsers optimize out Tone.Signal\n * with a value of 0 and will not process nodes further down the graph.\n * @category Signal\n */\nexport class Zero extends SignalOperator {\n  constructor() {\n    super(optionsFromArguments(Zero.getDefaults(), arguments));\n    this.name = \"Zero\";\n    /**\n     * The gain node which connects the constant source to the output\n     */\n    this._gain = new Gain({\n      context: this.context\n    });\n    /**\n     * Only outputs 0\n     */\n    this.output = this._gain;\n    /**\n     * no input node\n     */\n    this.input = undefined;\n    connect(this.context.getConstant(0), this._gain);\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    disconnect(this.context.getConstant(0), this._gain);\n    return this;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { AudioToGain } from \"../../signal/AudioToGain.js\";\nimport { Scale } from \"../../signal/Scale.js\";\nimport { connectSignal, Signal } from \"../../signal/Signal.js\";\nimport { Zero } from \"../../signal/Zero.js\";\nimport { Oscillator } from \"./Oscillator.js\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n * @example\n * return Tone.Offline(() => {\n * \tconst lfo = new Tone.LFO(\"4n\", 400, 4000).start().toDestination();\n * }, 0.5, 1);\n * @category Source\n */\nexport class LFO extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n    super(options);\n    this.name = \"LFO\";\n    /**\n     * The value that the LFO outputs when it's stopped\n     */\n    this._stoppedValue = 0;\n    /**\n     * A private placeholder for the units\n     */\n    this._units = \"number\";\n    /**\n     * If the input value is converted using the {@link units}\n     */\n    this.convert = true;\n    /**\n     * Private methods borrowed from Param\n     */\n    // @ts-ignore\n    this._fromType = Param.prototype._fromType;\n    // @ts-ignore\n    this._toType = Param.prototype._toType;\n    // @ts-ignore\n    this._is = Param.prototype._is;\n    // @ts-ignore\n    this._clampValue = Param.prototype._clampValue;\n    this._oscillator = new Oscillator(options);\n    this.frequency = this._oscillator.frequency;\n    this._amplitudeGain = new Gain({\n      context: this.context,\n      gain: options.amplitude,\n      units: \"normalRange\"\n    });\n    this.amplitude = this._amplitudeGain.gain;\n    this._stoppedSignal = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: 0\n    });\n    this._zeros = new Zero({\n      context: this.context\n    });\n    this._a2g = new AudioToGain({\n      context: this.context\n    });\n    this._scaler = this.output = new Scale({\n      context: this.context,\n      max: options.max,\n      min: options.min\n    });\n    this.units = options.units;\n    this.min = options.min;\n    this.max = options.max;\n    // connect it up\n    this._oscillator.chain(this._amplitudeGain, this._a2g, this._scaler);\n    this._zeros.connect(this._a2g);\n    this._stoppedSignal.connect(this._a2g);\n    readOnly(this, [\"amplitude\", \"frequency\"]);\n    this.phase = options.phase;\n  }\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      amplitude: 1,\n      frequency: \"4n\",\n      max: 1,\n      min: 0,\n      type: \"sine\",\n      units: \"number\"\n    });\n  }\n  /**\n   * Start the LFO.\n   * @param time The time the LFO will start\n   */\n  start(time) {\n    time = this.toSeconds(time);\n    this._stoppedSignal.setValueAtTime(0, time);\n    this._oscillator.start(time);\n    return this;\n  }\n  /**\n   * Stop the LFO.\n   * @param  time The time the LFO will stop\n   */\n  stop(time) {\n    time = this.toSeconds(time);\n    this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n    this._oscillator.stop(time);\n    return this;\n  }\n  /**\n   * Sync the start/stop/pause to the transport\n   * and the frequency to the bpm of the transport\n   * @example\n   * const lfo = new Tone.LFO(\"8n\");\n   * lfo.sync().start(0);\n   * // the rate of the LFO will always be an eighth note, even as the tempo changes\n   */\n  sync() {\n    this._oscillator.sync();\n    this._oscillator.syncFrequency();\n    return this;\n  }\n  /**\n   * unsync the LFO from transport control\n   */\n  unsync() {\n    this._oscillator.unsync();\n    this._oscillator.unsyncFrequency();\n    return this;\n  }\n  /**\n   * After the oscillator waveform is updated, reset the `_stoppedSignal` value to match the updated waveform\n   */\n  _setStoppedValue() {\n    this._stoppedValue = this._oscillator.getInitialValue();\n    this._stoppedSignal.value = this._stoppedValue;\n  }\n  /**\n   * The minimum output of the LFO.\n   */\n  get min() {\n    return this._toType(this._scaler.min);\n  }\n  set min(min) {\n    min = this._fromType(min);\n    this._scaler.min = min;\n  }\n  /**\n   * The maximum output of the LFO.\n   */\n  get max() {\n    return this._toType(this._scaler.max);\n  }\n  set max(max) {\n    max = this._fromType(max);\n    this._scaler.max = max;\n  }\n  /**\n   * The type of the oscillator.\n   * @see {@link Oscillator.type}\n   */\n  get type() {\n    return this._oscillator.type;\n  }\n  set type(type) {\n    this._oscillator.type = type;\n    this._setStoppedValue();\n  }\n  /**\n   * The oscillator's partials array.\n   * @see {@link Oscillator.partials}\n   */\n  get partials() {\n    return this._oscillator.partials;\n  }\n  set partials(partials) {\n    this._oscillator.partials = partials;\n    this._setStoppedValue();\n  }\n  /**\n   * The phase of the LFO.\n   */\n  get phase() {\n    return this._oscillator.phase;\n  }\n  set phase(phase) {\n    this._oscillator.phase = phase;\n    this._setStoppedValue();\n  }\n  /**\n   * The output units of the LFO.\n   */\n  get units() {\n    return this._units;\n  }\n  set units(val) {\n    const currentMin = this.min;\n    const currentMax = this.max;\n    // convert the min and the max\n    this._units = val;\n    this.min = currentMin;\n    this.max = currentMax;\n  }\n  /**\n   * Returns the playback state of the source, either \"started\" or \"stopped\".\n   */\n  get state() {\n    return this._oscillator.state;\n  }\n  /**\n   * @param node the destination to connect to\n   * @param outputNum the optional output number\n   * @param inputNum the input number\n   */\n  connect(node, outputNum, inputNum) {\n    if (node instanceof Param || node instanceof Signal) {\n      this.convert = node.convert;\n      this.units = node.units;\n    }\n    connectSignal(this, node, outputNum, inputNum);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._oscillator.dispose();\n    this._stoppedSignal.dispose();\n    this._zeros.dispose();\n    this._scaler.dispose();\n    this._a2g.dispose();\n    this._amplitudeGain.dispose();\n    this.amplitude.dispose();\n    return this;\n  }\n}\n", "import { assertRange } from \"./Debug.js\";\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min, max = Infinity) {\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n", "import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\nimport { isUndef } from \"../../core/util/TypeCheck.js\";\nimport { Source } from \"../Source.js\";\nimport { ToneBufferSource } from \"./ToneBufferSource.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\nimport { timeRange } from \"../../core/util/Decorator.js\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source {\n  constructor() {\n    const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    super(options);\n    this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n    this._activeSources = new Set();\n    this._buffer = new ToneAudioBuffer({\n      onload: this._onload.bind(this, options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this.autostart = options.autostart;\n    this._loop = options.loop;\n    this._loopStart = options.loopStart;\n    this._loopEnd = options.loopEnd;\n    this._playbackRate = options.playbackRate;\n    this.fadeIn = options.fadeIn;\n    this.fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  }\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._buffer.load(url);\n      this._onload();\n      return this;\n    });\n  }\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n  _onload(callback = noOp) {\n    callback();\n    if (this.autostart) {\n      this.start();\n    }\n  }\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n  _onSourceEnd(source) {\n    // invoke the onstop function\n    this.onstop(this);\n    // delete the source from the active sources\n    this._activeSources.delete(source);\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      // remove the 'implicitEnd' event and replace with an explicit end\n      this._state.cancel(this.now());\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  }\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n  start(time, offset, duration) {\n    super.start(time, offset, duration);\n    return this;\n  }\n  /**\n   * Internal start method\n   */\n  _start(startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    }\n    // compute the values in seconds\n    const computedOffset = this.toSeconds(offset);\n    // compute the duration which is either the passed in duration of the buffer.duration - offset\n    const origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    let computedDuration = this.toSeconds(duration);\n    // scale it by the playback rate\n    computedDuration = computedDuration / this._playbackRate;\n    // get the start time\n    startTime = this.toSeconds(startTime);\n    // make the source\n    const source = new ToneBufferSource({\n      url: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output);\n    // set the looping properties\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration);\n      // if it's not looping, set the state change at the end of the sample\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    }\n    // add it to the array of active sources\n    this._activeSources.add(source);\n    // start it\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  }\n  /**\n   * Stop playback.\n   */\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n    this._activeSources.forEach(source => source.stop(computedTime));\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n  _restart(time, offset, duration) {\n    var _a;\n    (_a = [...this._activeSources].pop()) === null || _a === void 0 ? void 0 : _a.stop(time); // explicitly stop only the most recently created source, to avoid edge case when > 1 source exists and _stop() erroneously sets all stop times past original end offset\n    this._start(time, offset, duration);\n  }\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n  seek(offset, when) {\n    const computedTime = this.toSeconds(when);\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      const computedOffset = this.toSeconds(offset);\n      // if it's currently playing, stop it\n      this._stop(computedTime);\n      // restart it at the given time\n      this._start(computedTime, computedOffset);\n    }\n    return this;\n  }\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n  setLoopPoints(loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n  get loopStart() {\n    return this._loopStart;\n  }\n  set loopStart(loopStart) {\n    this._loopStart = loopStart;\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n    }\n    // get the current source\n    this._activeSources.forEach(source => {\n      source.loopStart = loopStart;\n    });\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n  get loopEnd() {\n    return this._loopEnd;\n  }\n  set loopEnd(loopEnd) {\n    this._loopEnd = loopEnd;\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n    }\n    // get the current source\n    this._activeSources.forEach(source => {\n      source.loopEnd = loopEnd;\n    });\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n  get buffer() {\n    return this._buffer;\n  }\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n   * player.loop = true;\n   * player.autostart = true;\n   */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    // if no change, do nothing\n    if (this._loop === loop) {\n      return;\n    }\n    this._loop = loop;\n    // set the loop of all of the sources\n    this._activeSources.forEach(source => {\n      source.loop = loop;\n    });\n    if (loop) {\n      // remove the next stopEvent\n      const stopEvent = this._state.getNextState(\"stopped\", this.now());\n      if (stopEvent) {\n        this._state.cancel(stopEvent.time);\n      }\n    }\n  }\n  /**\n   * Normal speed is 1. The pitch will change with the playback rate.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n   * // play at 1/4 speed\n   * player.playbackRate = 0.25;\n   * // play as soon as the buffer is loaded\n   * player.autostart = true;\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    const now = this.now();\n    // cancel the stop event since it's at a different time now\n    const stopEvent = this._state.getNextState(\"stopped\", now);\n    if (stopEvent && stopEvent.implicitEnd) {\n      this._state.cancel(stopEvent.time);\n      this._activeSources.forEach(source => source.cancelStop());\n    }\n    // set all the sources\n    this._activeSources.forEach(source => {\n      source.playbackRate.setValueAtTime(rate, now);\n    });\n  }\n  /**\n   * If the buffer should be reversed. Note that this sets the underlying {@link ToneAudioBuffer.reverse}, so\n   * if multiple players are pointing at the same ToneAudioBuffer, they will all be reversed.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n   * player.autostart = true;\n   * player.reverse = true;\n   */\n  get reverse() {\n    return this._buffer.reverse;\n  }\n  set reverse(rev) {\n    this._buffer.reverse = rev;\n  }\n  /**\n   * If the buffer is loaded\n   */\n  get loaded() {\n    return this._buffer.loaded;\n  }\n  dispose() {\n    super.dispose();\n    // disconnect all of the players\n    this._activeSources.forEach(source => source.dispose());\n    this._activeSources.clear();\n    this._buffer.dispose();\n    return this;\n  }\n}\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);\n", "import { Volume } from \"../../component/channel/Volume.js\";\nimport { ToneAudioBuffers } from \"../../core/context/ToneAudioBuffers.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { noOp, readOnly } from \"../../core/util/Interface.js\";\nimport { Source } from \"../Source.js\";\nimport { Player } from \"./Player.js\";\n/**\n * Players combines multiple {@link Player} objects.\n * @category Source\n */\nexport class Players extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Players.getDefaults(), arguments, [\"urls\", \"onload\"], \"urls\");\n    super(options);\n    this.name = \"Players\";\n    /**\n     * Players has no input.\n     */\n    this.input = undefined;\n    /**\n     * The container of all of the players\n     */\n    this._players = new Map();\n    /**\n     * The output volume node\n     */\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this._buffers = new ToneAudioBuffers({\n      urls: options.urls,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    // mute initially\n    this.mute = options.mute;\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      baseUrl: \"\",\n      fadeIn: 0,\n      fadeOut: 0,\n      mute: false,\n      onload: noOp,\n      onerror: noOp,\n      urls: {},\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  /**\n   * The fadeIn time of the envelope applied to the source.\n   */\n  get fadeIn() {\n    return this._fadeIn;\n  }\n  set fadeIn(fadeIn) {\n    this._fadeIn = fadeIn;\n    this._players.forEach(player => {\n      player.fadeIn = fadeIn;\n    });\n  }\n  /**\n   * The fadeOut time of the each of the sources.\n   */\n  get fadeOut() {\n    return this._fadeOut;\n  }\n  set fadeOut(fadeOut) {\n    this._fadeOut = fadeOut;\n    this._players.forEach(player => {\n      player.fadeOut = fadeOut;\n    });\n  }\n  /**\n   * The state of the players object. Returns \"started\" if any of the players are playing.\n   */\n  get state() {\n    const playing = Array.from(this._players).some(([_, player]) => player.state === \"started\");\n    return playing ? \"started\" : \"stopped\";\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param name  The key or index of the buffer.\n   */\n  has(name) {\n    return this._buffers.has(name);\n  }\n  /**\n   * Get a player by name.\n   * @param  name  The players name as defined in the constructor object or `add` method.\n   */\n  player(name) {\n    assert(this.has(name), `No Player with the name ${name} exists on this object`);\n    if (!this._players.has(name)) {\n      const player = new Player({\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        url: this._buffers.get(name)\n      }).connect(this.output);\n      this._players.set(name, player);\n    }\n    return this._players.get(name);\n  }\n  /**\n   * If all the buffers are loaded or not\n   */\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Add a player by name and url to the Players\n   * @param  name A unique name to give the player\n   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.\n   * @param callback  The callback to invoke when the url is loaded.\n   * @example\n   * const players = new Tone.Players();\n   * players.add(\"gong\", \"https://tonejs.github.io/audio/berklee/gong_1.mp3\", () => {\n   * \tconsole.log(\"gong loaded\");\n   * \tplayers.player(\"gong\").start();\n   * });\n   */\n  add(name, url, callback) {\n    assert(!this._buffers.has(name), \"A buffer with that name already exists on this object\");\n    this._buffers.add(name, url, callback);\n    return this;\n  }\n  /**\n   * Stop all of the players at the given time\n   * @param time The time to stop all of the players.\n   */\n  stopAll(time) {\n    this._players.forEach(player => player.stop(time));\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._volume.dispose();\n    this.volume.dispose();\n    this._players.forEach(player => player.dispose());\n    this._buffers.dispose();\n    return this;\n  }\n}\n", "import { Source } from \"../Source.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Clock } from \"../../core/clock/Clock.js\";\nimport { ToneBufferSource } from \"./ToneBufferSource.js\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source {\n  constructor() {\n    const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    super(options);\n    this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n    this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n    this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n    this._activeSources = [];\n    this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this._clock = new Clock({\n      context: this.context,\n      callback: this._tick.bind(this),\n      frequency: 1 / options.grainSize\n    });\n    this._playbackRate = options.playbackRate;\n    this._grainSize = options.grainSize;\n    this._overlap = options.overlap;\n    this.detune = options.detune;\n    // setup\n    this.overlap = options.overlap;\n    this.loop = options.loop;\n    this.playbackRate = options.playbackRate;\n    this.grainSize = options.grainSize;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.reverse = options.reverse;\n    this._clock.on(\"stop\", this._onstop.bind(this));\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      onload: noOp,\n      onerror: noOp,\n      overlap: 0.1,\n      grainSize: 0.2,\n      playbackRate: 1,\n      detune: 0,\n      loop: false,\n      loopStart: 0,\n      loopEnd: 0,\n      reverse: false\n    });\n  }\n  /**\n   * Internal start method\n   */\n  _start(time, offset, duration) {\n    offset = defaultArg(offset, 0);\n    offset = this.toSeconds(offset);\n    time = this.toSeconds(time);\n    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n    this._clock.start(time, offset / grainSize);\n    if (duration) {\n      this.stop(time + this.toSeconds(duration));\n    }\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n  _restart(time, offset, duration) {\n    this._stop(time);\n    this._start(time, offset, duration);\n  }\n  /**\n   * Internal stop method\n   */\n  _stop(time) {\n    this._clock.stop(time);\n  }\n  /**\n   * Invoked when the clock is stopped\n   */\n  _onstop(time) {\n    // stop the players\n    this._activeSources.forEach(source => {\n      source.fadeOut = 0;\n      source.stop(time);\n    });\n    this.onstop(this);\n  }\n  /**\n   * Invoked on each clock tick. scheduled a new grain at this time.\n   */\n  _tick(time) {\n    // check if it should stop looping\n    const ticks = this._clock.getTicksAtTime(time);\n    const offset = ticks * this._grainSize;\n    this.log(\"offset\", offset);\n    if (!this.loop && offset > this.buffer.duration) {\n      this.stop(time);\n      return;\n    }\n    // at the beginning of the file, the fade in should be 0\n    const fadeIn = offset < this._overlap ? 0 : this._overlap;\n    // create a buffer source\n    const source = new ToneBufferSource({\n      context: this.context,\n      url: this.buffer,\n      fadeIn: fadeIn,\n      fadeOut: this._overlap,\n      loop: this.loop,\n      loopStart: this._loopStart,\n      loopEnd: this._loopEnd,\n      // compute the playbackRate based on the detune\n      playbackRate: intervalToFrequencyRatio(this.detune / 100)\n    }).connect(this.output);\n    source.start(time, this._grainSize * ticks);\n    source.stop(time + this._grainSize / this.playbackRate);\n    // add it to the active sources\n    this._activeSources.push(source);\n    // remove it when it's done\n    source.onended = () => {\n      const index = this._activeSources.indexOf(source);\n      if (index !== -1) {\n        this._activeSources.splice(index, 1);\n      }\n    };\n  }\n  /**\n   * The playback rate of the sample\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    assertRange(rate, 0.001);\n    this._playbackRate = rate;\n    this.grainSize = this._grainSize;\n  }\n  /**\n   * The loop start time.\n   */\n  get loopStart() {\n    return this._loopStart;\n  }\n  set loopStart(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n    this._loopStart = this.toSeconds(time);\n  }\n  /**\n   * The loop end time.\n   */\n  get loopEnd() {\n    return this._loopEnd;\n  }\n  set loopEnd(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n    this._loopEnd = this.toSeconds(time);\n  }\n  /**\n   * The direction the buffer should play in\n   */\n  get reverse() {\n    return this.buffer.reverse;\n  }\n  set reverse(rev) {\n    this.buffer.reverse = rev;\n  }\n  /**\n   * The size of each chunk of audio that the\n   * buffer is chopped into and played back at.\n   */\n  get grainSize() {\n    return this._grainSize;\n  }\n  set grainSize(size) {\n    this._grainSize = this.toSeconds(size);\n    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n  }\n  /**\n   * The duration of the cross-fade between successive grains.\n   */\n  get overlap() {\n    return this._overlap;\n  }\n  set overlap(time) {\n    const computedTime = this.toSeconds(time);\n    assertRange(computedTime, 0);\n    this._overlap = computedTime;\n  }\n  /**\n   * If all the buffer is loaded\n   */\n  get loaded() {\n    return this.buffer.loaded;\n  }\n  dispose() {\n    super.dispose();\n    this.buffer.dispose();\n    this._clock.dispose();\n    this._activeSources.forEach(source => source.dispose());\n    return this;\n  }\n}\n", "import { SignalOperator } from \"./SignalOperator.js\";\nimport { WaveShaper } from \"./WaveShaper.js\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Abs extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n    this._abs = new WaveShaper({\n      context: this.context,\n      mapping: val => {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n    this.input = this._abs;\n    /**\n     * The output range [0, 1]\n     */\n    this.output = this._abs;\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this._abs.dispose();\n    return this;\n  }\n}\n", "import { SignalOperator } from \"./SignalOperator.js\";\nimport { WaveShaper } from \"./WaveShaper.js\";\n/**\n * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].\n * @see {@link AudioToGain}.\n * @category Signal\n */\nexport class GainToAudio extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"GainToAudio\";\n    /**\n     * The node which converts the audio ranges\n     */\n    this._norm = new WaveShaper({\n      context: this.context,\n      mapping: x => Math.abs(x) * 2 - 1\n    });\n    /**\n     * The NormalRange input [0, 1]\n     */\n    this.input = this._norm;\n    /**\n     * The AudioRange output [-1, 1]\n     */\n    this.output = this._norm;\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this._norm.dispose();\n    return this;\n  }\n}\n", "import { Multiply } from \"./Multiply.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n    this._multiply = new Multiply({\n      context: this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n    this.input = this._multiply;\n    this.output = this._multiply;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n  dispose() {\n    super.dispose();\n    this._multiply.dispose();\n    return this;\n  }\n}\n", "import { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Negate } from \"../signal/Negate.js\";\nimport { Signal } from \"../signal/Signal.js\";\n/**\n * Subtract the signal connected to the input is subtracted from the signal connected\n * The subtrahend.\n *\n * @example\n * // subtract a scalar from a signal\n * const sub = new Tone.Subtract(1);\n * const sig = new Tone.Signal(4).connect(sub);\n * // the output of sub is 3.\n * @example\n * // subtract two signals\n * const sub = new Tone.Subtract();\n * const sigA = new Tone.Signal(10);\n * const sigB = new Tone.Signal(2.5);\n * sigA.connect(sub);\n * sigB.connect(sub.subtrahend);\n * // output of sub is 7.5\n * @category Signal\n */\nexport class Subtract extends Signal {\n  constructor() {\n    super(optionsFromArguments(Subtract.getDefaults(), arguments, [\"value\"]));\n    this.override = false;\n    this.name = \"Subtract\";\n    /**\n     * the summing node\n     */\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * Negate the input of the second input before connecting it to the summing node.\n     */\n    this._neg = new Negate({\n      context: this.context\n    });\n    /**\n     * The value which is subtracted from the main signal\n     */\n    this.subtrahend = this._param;\n    connectSeries(this._constantSource, this._neg, this._sum);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._neg.dispose();\n    this._sum.dispose();\n    return this;\n  }\n}\n", "import { SignalOperator } from \"./SignalOperator.js\";\nimport { Multiply } from \"./Multiply.js\";\nimport { WaveShaper } from \"./WaveShaper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThanZero extends SignalOperator {\n  constructor() {\n    super(optionsFromArguments(GreaterThanZero.getDefaults(), arguments));\n    this.name = \"GreaterThanZero\";\n    this._thresh = this.output = new WaveShaper({\n      context: this.context,\n      length: 127,\n      mapping: val => {\n        if (val <= 0) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    });\n    this._scale = this.input = new Multiply({\n      context: this.context,\n      value: 10000\n    });\n    // connections\n    this._scale.connect(this._thresh);\n  }\n  dispose() {\n    super.dispose();\n    this._scale.dispose();\n    this._thresh.dispose();\n    return this;\n  }\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Subtract } from \"./Subtract.js\";\nimport { Signal } from \"./Signal.js\";\nimport { GreaterThanZero } from \"./GreaterThanZero.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Output 1 if the signal is greater than the value, otherwise outputs 0.\n * can compare two signals or a signal and a number.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst gt = new Tone.GreaterThan(2).toDestination();\n * \tconst sig = new Tone.Signal(4).connect(gt);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThan extends Signal {\n  constructor() {\n    const options = optionsFromArguments(GreaterThan.getDefaults(), arguments, [\"value\"]);\n    super(options);\n    this.name = \"GreaterThan\";\n    this.override = false;\n    this._subtract = this.input = new Subtract({\n      context: this.context,\n      value: options.value\n    });\n    this._gtz = this.output = new GreaterThanZero({\n      context: this.context\n    });\n    this.comparator = this._param = this._subtract.subtrahend;\n    readOnly(this, \"comparator\");\n    // connect\n    this._subtract.connect(this._gtz);\n  }\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._gtz.dispose();\n    this._subtract.dispose();\n    this.comparator.dispose();\n    return this;\n  }\n}\n", "import { Scale } from \"./Scale.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Pow } from \"./Pow.js\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\nexport class ScaleExp extends Scale {\n  constructor() {\n    const options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n    super(options);\n    this.name = \"ScaleExp\";\n    this.input = this._exp = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n    this._exp.connect(this._mult);\n  }\n  static getDefaults() {\n    return Object.assign(Scale.getDefaults(), {\n      exponent: 1\n    });\n  }\n  /**\n   * Instead of interpolating linearly between the {@link min} and\n   * {@link max} values, setting the exponent will interpolate between\n   * the two values with an exponential curve.\n   */\n  get exponent() {\n    return this._exp.value;\n  }\n  set exponent(exp) {\n    this._exp.value = exp;\n  }\n  dispose() {\n    super.dispose();\n    this._exp.dispose();\n    return this;\n  }\n}\n", "import { Signal } from \"./Signal.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { TransportTimeClass } from \"../core/type/TransportTime.js\";\nimport { ToneConstantSource } from \"./ToneConstantSource.js\";\n/**\n * Adds the ability to synchronize the signal to the {@link TransportClass}\n * @category Signal\n */\nexport class SyncedSignal extends Signal {\n  constructor() {\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    super(options);\n    this.name = \"SyncedSignal\";\n    /**\n     * Don't override when something is connected to the input\n     */\n    this.override = false;\n    this._lastVal = options.value;\n    this._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), \"1i\");\n    this._syncedCallback = this._anchorValue.bind(this);\n    this.context.transport.on(\"start\", this._syncedCallback);\n    this.context.transport.on(\"pause\", this._syncedCallback);\n    this.context.transport.on(\"stop\", this._syncedCallback);\n    // disconnect the constant source from the output and replace it with another one\n    this._constantSource.disconnect();\n    this._constantSource.stop(0);\n    // create a new one\n    this._constantSource = this.output = new ToneConstantSource({\n      context: this.context,\n      offset: options.value,\n      units: options.units\n    }).start(0);\n    this.setValueAtTime(options.value, 0);\n  }\n  /**\n   * Callback which is invoked every tick.\n   */\n  _onTick(time) {\n    const val = super.getValueAtTime(this.context.transport.seconds);\n    // approximate ramp curves with linear ramps\n    if (this._lastVal !== val) {\n      this._lastVal = val;\n      this._constantSource.offset.setValueAtTime(val, time);\n    }\n  }\n  /**\n   * Anchor the value at the start and stop of the Transport\n   */\n  _anchorValue(time) {\n    const val = super.getValueAtTime(this.context.transport.seconds);\n    this._lastVal = val;\n    this._constantSource.offset.cancelAndHoldAtTime(time);\n    this._constantSource.offset.setValueAtTime(val, time);\n  }\n  getValueAtTime(time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    return super.getValueAtTime(computedTime);\n  }\n  setValueAtTime(value, time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.setValueAtTime(value, computedTime);\n    return this;\n  }\n  linearRampToValueAtTime(value, time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.linearRampToValueAtTime(value, computedTime);\n    return this;\n  }\n  exponentialRampToValueAtTime(value, time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.exponentialRampToValueAtTime(value, computedTime);\n    return this;\n  }\n  setTargetAtTime(value, startTime, timeConstant) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.setTargetAtTime(value, computedTime, timeConstant);\n    return this;\n  }\n  cancelScheduledValues(startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.cancelScheduledValues(computedTime);\n    return this;\n  }\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    duration = this.toSeconds(duration);\n    super.setValueCurveAtTime(values, computedTime, duration, scaling);\n    return this;\n  }\n  cancelAndHoldAtTime(time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.cancelAndHoldAtTime(computedTime);\n    return this;\n  }\n  setRampPoint(time) {\n    const computedTime = new TransportTimeClass(this.context, time).toSeconds();\n    super.setRampPoint(computedTime);\n    return this;\n  }\n  exponentialRampTo(value, rampTime, startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.exponentialRampTo(value, rampTime, computedTime);\n    return this;\n  }\n  linearRampTo(value, rampTime, startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.linearRampTo(value, rampTime, computedTime);\n    return this;\n  }\n  targetRampTo(value, rampTime, startTime) {\n    const computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n    super.targetRampTo(value, rampTime, computedTime);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this.context.transport.clear(this._synced);\n    this.context.transport.off(\"start\", this._syncedCallback);\n    this.context.transport.off(\"pause\", this._syncedCallback);\n    this.context.transport.off(\"stop\", this._syncedCallback);\n    this._constantSource.dispose();\n    return this;\n  }\n}\n", "import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck.js\";\nimport { connectSignal, Signal } from \"../../signal/Signal.js\";\nimport { OfflineContext } from \"../../core/context/OfflineContext.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { range, timeRange } from \"../../core/util/Decorator.js\";\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst env = new Tone.Envelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 0.5,\n * \t\trelease: 0.8,\n * \t}).toDestination();\n * \tenv.triggerAttackRelease(0.5);\n * }, 1.5, 1);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    super(options);\n    this.name = \"Envelope\";\n    /**\n     * the signal which is output.\n     */\n    this._sig = new Signal({\n      context: this.context,\n      value: 0\n    });\n    /**\n     * The output signal of the envelope\n     */\n    this.output = this._sig;\n    /**\n     * Envelope has no input\n     */\n    this.input = undefined;\n    this.attack = options.attack;\n    this.decay = options.decay;\n    this.sustain = options.sustain;\n    this.release = options.release;\n    this.attackCurve = options.attackCurve;\n    this.releaseCurve = options.releaseCurve;\n    this.decayCurve = options.decayCurve;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.01,\n      attackCurve: \"linear\",\n      decay: 0.1,\n      decayCurve: \"exponential\",\n      release: 1,\n      releaseCurve: \"exponential\",\n      sustain: 0.5\n    });\n  }\n  /**\n   * Read the current value of the envelope. Useful for\n   * synchronizing visual output to the envelope.\n   */\n  get value() {\n    return this.getValueAtTime(this.now());\n  }\n  /**\n   * Get the curve\n   * @param  curve\n   * @param  direction  In/Out\n   * @return The curve name\n   */\n  _getCurve(curve, direction) {\n    if (isString(curve)) {\n      return curve;\n    } else {\n      // look up the name in the curves array\n      let curveName;\n      for (curveName in EnvelopeCurves) {\n        if (EnvelopeCurves[curveName][direction] === curve) {\n          return curveName;\n        }\n      }\n      // return the custom curve\n      return curve;\n    }\n  }\n  /**\n   * Assign a the curve to the given name using the direction\n   * @param  name\n   * @param  direction In/Out\n   * @param  curve\n   */\n  _setCurve(name, direction, curve) {\n    // check if it's a valid type\n    if (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n      const curveDef = EnvelopeCurves[curve];\n      if (isObject(curveDef)) {\n        if (name !== \"_decayCurve\") {\n          this[name] = curveDef[direction];\n        }\n      } else {\n        this[name] = curveDef;\n      }\n    } else if (isArray(curve) && name !== \"_decayCurve\") {\n      this[name] = curve;\n    } else {\n      throw new Error(\"Envelope: invalid curve: \" + curve);\n    }\n  }\n  /**\n   * The shape of the attack.\n   * Can be any of these strings:\n   * * \"linear\"\n   * * \"exponential\"\n   * * \"sine\"\n   * * \"cosine\"\n   * * \"bounce\"\n   * * \"ripple\"\n   * * \"step\"\n   *\n   * Can also be an array which describes the curve. Values\n   * in the array are evenly subdivided and linearly\n   * interpolated over the duration of the attack.\n   * @example\n   * return Tone.Offline(() => {\n   * \tconst env = new Tone.Envelope(0.4).toDestination();\n   * \tenv.attackCurve = \"linear\";\n   * \tenv.triggerAttack();\n   * }, 1, 1);\n   */\n  get attackCurve() {\n    return this._getCurve(this._attackCurve, \"In\");\n  }\n  set attackCurve(curve) {\n    this._setCurve(\"_attackCurve\", \"In\", curve);\n  }\n  /**\n   * The shape of the release. See the attack curve types.\n   * @example\n   * return Tone.Offline(() => {\n   * \tconst env = new Tone.Envelope({\n   * \t\trelease: 0.8\n   * \t}).toDestination();\n   * \tenv.triggerAttack();\n   * \t// release curve could also be defined by an array\n   * \tenv.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];\n   * \tenv.triggerRelease(0.2);\n   * }, 1, 1);\n   */\n  get releaseCurve() {\n    return this._getCurve(this._releaseCurve, \"Out\");\n  }\n  set releaseCurve(curve) {\n    this._setCurve(\"_releaseCurve\", \"Out\", curve);\n  }\n  /**\n   * The shape of the decay either \"linear\" or \"exponential\"\n   * @example\n   * return Tone.Offline(() => {\n   * \tconst env = new Tone.Envelope({\n   * \t\tsustain: 0.1,\n   * \t\tdecay: 0.5\n   * \t}).toDestination();\n   * \tenv.decayCurve = \"linear\";\n   * \tenv.triggerAttack();\n   * }, 1, 1);\n   */\n  get decayCurve() {\n    return this._getCurve(this._decayCurve, \"Out\");\n  }\n  set decayCurve(curve) {\n    this._setCurve(\"_decayCurve\", \"Out\", curve);\n  }\n  /**\n   * Trigger the attack/decay portion of the ADSR envelope.\n   * @param  time When the attack should start.\n   * @param velocity The velocity of the envelope scales the vales.\n   *                             number between 0-1\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n   * env.triggerAttack(\"+0.5\", 0.2);\n   */\n  triggerAttack(time, velocity = 1) {\n    this.log(\"triggerAttack\", time, velocity);\n    time = this.toSeconds(time);\n    const originalAttack = this.toSeconds(this.attack);\n    let attack = originalAttack;\n    const decay = this.toSeconds(this.decay);\n    // check if it's not a complete attack\n    const currentValue = this.getValueAtTime(time);\n    if (currentValue > 0) {\n      // subtract the current value from the attack time\n      const attackRate = 1 / attack;\n      const remainingDistance = 1 - currentValue;\n      // the attack is now the remaining time\n      attack = remainingDistance / attackRate;\n    }\n    // attack\n    if (attack < this.sampleTime) {\n      this._sig.cancelScheduledValues(time);\n      // case where the attack time is 0 should set instantly\n      this._sig.setValueAtTime(velocity, time);\n    } else if (this._attackCurve === \"linear\") {\n      this._sig.linearRampTo(velocity, attack, time);\n    } else if (this._attackCurve === \"exponential\") {\n      this._sig.targetRampTo(velocity, attack, time);\n    } else {\n      this._sig.cancelAndHoldAtTime(time);\n      let curve = this._attackCurve;\n      // find the starting position in the curve\n      for (let i = 1; i < curve.length; i++) {\n        // the starting index is between the two values\n        if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n          curve = this._attackCurve.slice(i);\n          // the first index is the current value\n          curve[0] = currentValue;\n          break;\n        }\n      }\n      this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n    }\n    // decay\n    if (decay && this.sustain < 1) {\n      const decayValue = velocity * this.sustain;\n      const decayStart = time + attack;\n      this.log(\"decay\", decayStart);\n      if (this._decayCurve === \"linear\") {\n        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n      } else {\n        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n      }\n    }\n    return this;\n  }\n  /**\n   * Triggers the release of the envelope.\n   * @param  time When the release portion of the envelope should start.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator({\n   * \ttype: \"sawtooth\"\n   * }).connect(env).start();\n   * env.triggerAttack();\n   * // trigger the release half a second after the attack\n   * env.triggerRelease(\"+0.5\");\n   */\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    time = this.toSeconds(time);\n    const currentValue = this.getValueAtTime(time);\n    if (currentValue > 0) {\n      const release = this.toSeconds(this.release);\n      if (release < this.sampleTime) {\n        this._sig.setValueAtTime(0, time);\n      } else if (this._releaseCurve === \"linear\") {\n        this._sig.linearRampTo(0, release, time);\n      } else if (this._releaseCurve === \"exponential\") {\n        this._sig.targetRampTo(0, release, time);\n      } else {\n        assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n        this._sig.cancelAndHoldAtTime(time);\n        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n      }\n    }\n    return this;\n  }\n  /**\n   * Get the scheduled value at the given time. This will\n   * return the unconverted (raw) value.\n   * @example\n   * const env = new Tone.Envelope(0.5, 1, 0.4, 2);\n   * env.triggerAttackRelease(2);\n   * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);\n   */\n  getValueAtTime(time) {\n    return this._sig.getValueAtTime(time);\n  }\n  /**\n   * triggerAttackRelease is shorthand for triggerAttack, then waiting\n   * some duration, then triggerRelease.\n   * @param duration The duration of the sustain.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity of the envelope.\n   * @example\n   * const env = new Tone.AmplitudeEnvelope().toDestination();\n   * const osc = new Tone.Oscillator().connect(env).start();\n   * // trigger the release 0.5 seconds after the attack\n   * env.triggerAttackRelease(0.5);\n   */\n  triggerAttackRelease(duration, time, velocity = 1) {\n    time = this.toSeconds(time);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + this.toSeconds(duration));\n    return this;\n  }\n  /**\n   * Cancels all scheduled envelope changes after the given time.\n   */\n  cancel(after) {\n    this._sig.cancelScheduledValues(this.toSeconds(after));\n    return this;\n  }\n  /**\n   * Connect the envelope to a destination node.\n   */\n  connect(destination, outputNumber = 0, inputNumber = 0) {\n    connectSignal(this, destination, outputNumber, inputNumber);\n    return this;\n  }\n  /**\n   * Render the envelope curve to an array of the given length.\n   * Good for visualizing the envelope curve. Rescales the duration of the\n   * envelope to fit the length.\n   */\n  asArray() {\n    return __awaiter(this, arguments, void 0, function* (length = 1024) {\n      const duration = length / this.context.sampleRate;\n      const context = new OfflineContext(1, duration, this.context.sampleRate);\n      // normalize the ADSR for the given duration with 20% sustain time\n      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n      const envelopeDuration = attackPortion + this.toSeconds(this.release);\n      const sustainTime = envelopeDuration * 0.1;\n      const totalDuration = envelopeDuration + sustainTime;\n      // @ts-ignore\n      const clone = new this.constructor(Object.assign(this.get(), {\n        attack: duration * this.toSeconds(this.attack) / totalDuration,\n        decay: duration * this.toSeconds(this.decay) / totalDuration,\n        release: duration * this.toSeconds(this.release) / totalDuration,\n        context\n      }));\n      clone._sig.toDestination();\n      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);\n      const buffer = yield context.render();\n      return buffer.getChannelData(0);\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._sig.dispose();\n    return this;\n  }\n}\n__decorate([timeRange(0)], Envelope.prototype, \"attack\", void 0);\n__decorate([timeRange(0)], Envelope.prototype, \"decay\", void 0);\n__decorate([range(0, 1)], Envelope.prototype, \"sustain\", void 0);\n__decorate([timeRange(0)], Envelope.prototype, \"release\", void 0);\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves = (() => {\n  const curveLen = 128;\n  let i;\n  let k;\n  // cosine curve\n  const cosineCurve = [];\n  for (i = 0; i < curveLen; i++) {\n    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n  }\n  // ripple curve\n  const rippleCurve = [];\n  const rippleCurveFreq = 6.4;\n  for (i = 0; i < curveLen - 1; i++) {\n    k = i / (curveLen - 1);\n    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n    rippleCurve[i] = sineWave / 10 + k * 0.83;\n  }\n  rippleCurve[curveLen - 1] = 1;\n  // stairs curve\n  const stairsCurve = [];\n  const steps = 5;\n  for (i = 0; i < curveLen; i++) {\n    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n  }\n  // in-out easing curve\n  const sineCurve = [];\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n  }\n  // a bounce curve\n  const bounceCurve = [];\n  for (i = 0; i < curveLen; i++) {\n    k = i / (curveLen - 1);\n    const freq = Math.pow(k, 3) * 4 + 0.2;\n    const val = Math.cos(freq * Math.PI * 2 * k);\n    bounceCurve[i] = Math.abs(val * (1 - k));\n  }\n  /**\n   * Invert a value curve to make it work for the release\n   */\n  function invertCurve(curve) {\n    const out = new Array(curve.length);\n    for (let j = 0; j < curve.length; j++) {\n      out[j] = 1 - curve[j];\n    }\n    return out;\n  }\n  /**\n   * reverse the curve\n   */\n  function reverseCurve(curve) {\n    return curve.slice(0).reverse();\n  }\n  /**\n   * attack and release curve arrays\n   */\n  return {\n    bounce: {\n      In: invertCurve(bounceCurve),\n      Out: bounceCurve\n    },\n    cosine: {\n      In: cosineCurve,\n      Out: reverseCurve(cosineCurve)\n    },\n    exponential: \"exponential\",\n    linear: \"linear\",\n    ripple: {\n      In: rippleCurve,\n      Out: invertCurve(rippleCurve)\n    },\n    sine: {\n      In: sineCurve,\n      Out: invertCurve(sineCurve)\n    },\n    step: {\n      In: stairsCurve,\n      Out: invertCurve(stairsCurve)\n    }\n  };\n})();\n", "import { Volume } from \"../component/channel/Volume.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Base-class for all instruments\n */\nexport class Instrument extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    super(options);\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n    this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n    this._synced = false;\n    this._original_triggerAttack = this.triggerAttack;\n    this._original_triggerRelease = this.triggerRelease;\n    /**\n     * The release which is scheduled to the timeline.\n     */\n    this._syncedRelease = time => this._original_triggerRelease(time);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      volume: 0\n    });\n  }\n  /**\n   * Sync the instrument to the Transport. All subsequent calls of\n   * {@link triggerAttack} and {@link triggerRelease} will be scheduled along the transport.\n   * @example\n   * const fmSynth = new Tone.FMSynth().toDestination();\n   * fmSynth.volume.value = -6;\n   * fmSynth.sync();\n   * // schedule 3 notes when the transport first starts\n   * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n   * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n   * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n   * // start the transport to hear the notes\n   * Tone.Transport.start();\n   */\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 1);\n      this._syncMethod(\"triggerRelease\", 0);\n      this.context.transport.on(\"stop\", this._syncedRelease);\n      this.context.transport.on(\"pause\", this._syncedRelease);\n      this.context.transport.on(\"loopEnd\", this._syncedRelease);\n    }\n    return this;\n  }\n  /**\n   * set _sync\n   */\n  _syncState() {\n    let changed = false;\n    if (!this._synced) {\n      this._synced = true;\n      changed = true;\n    }\n    return changed;\n  }\n  /**\n   * Wrap the given method so that it can be synchronized\n   * @param method Which method to wrap and sync\n   * @param  timePosition What position the time argument appears in\n   */\n  _syncMethod(method, timePosition) {\n    const originalMethod = this[\"_original_\" + method] = this[method];\n    this[method] = (...args) => {\n      const time = args[timePosition];\n      const id = this.context.transport.schedule(t => {\n        args[timePosition] = t;\n        originalMethod.apply(this, args);\n      }, time);\n      this._scheduledEvents.push(id);\n    };\n  }\n  /**\n   * Unsync the instrument from the Transport\n   */\n  unsync() {\n    this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n    this._scheduledEvents = [];\n    if (this._synced) {\n      this._synced = false;\n      this.triggerAttack = this._original_triggerAttack;\n      this.triggerRelease = this._original_triggerRelease;\n      this.context.transport.off(\"stop\", this._syncedRelease);\n      this.context.transport.off(\"pause\", this._syncedRelease);\n      this.context.transport.off(\"loopEnd\", this._syncedRelease);\n    }\n    return this;\n  }\n  /**\n   * Trigger the attack and then the release after the duration.\n   * @param  note     The note to trigger.\n   * @param  duration How long the note should be held for before\n   *                         triggering the release. This value must be greater than 0.\n   * @param time  When the note should be triggered.\n   * @param  velocity The velocity the note should be triggered at.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger \"C4\" for the duration of an 8th note\n   * synth.triggerAttackRelease(\"C4\", \"8n\");\n   */\n  triggerAttackRelease(note, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    const computedDuration = this.toSeconds(duration);\n    this.triggerAttack(note, computedTime, velocity);\n    this.triggerRelease(computedTime + computedDuration);\n    return this;\n  }\n  /**\n   * clean up\n   * @returns {Instrument} this\n   */\n  dispose() {\n    super.dispose();\n    this._volume.dispose();\n    this.unsync();\n    this._scheduledEvents = [];\n    return this;\n  }\n}\n", "import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { Instrument } from \"../instrument/Instrument.js\";\nimport { timeRange } from \"../core/util/Decorator.js\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport class Monophonic extends Instrument {\n  constructor() {\n    const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n    super(options);\n    this.portamento = options.portamento;\n    this.onsilence = options.onsilence;\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      detune: 0,\n      onsilence: noOp,\n      portamento: 0\n    });\n  }\n  /**\n   * Trigger the attack of the note optionally with a given velocity.\n   * @param  note The note to trigger.\n   * @param  time When the note should start.\n   * @param  velocity The velocity determines how \"loud\" the note will be.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger the note a half second from now at half velocity\n   * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n   */\n  triggerAttack(note, time, velocity = 1) {\n    this.log(\"triggerAttack\", note, time, velocity);\n    const seconds = this.toSeconds(time);\n    this._triggerEnvelopeAttack(seconds, velocity);\n    this.setNote(note, seconds);\n    return this;\n  }\n  /**\n   * Trigger the release portion of the envelope.\n   * @param  time If no time is given, the release happens immediately.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // trigger the release a second from now\n   * synth.triggerRelease(\"+1\");\n   */\n  triggerRelease(time) {\n    this.log(\"triggerRelease\", time);\n    const seconds = this.toSeconds(time);\n    this._triggerEnvelopeRelease(seconds);\n    return this;\n  }\n  /**\n   * Set the note at the given time. If no time is given, the note\n   * will set immediately.\n   * @param note The note to change to.\n   * @param  time The time when the note should be set.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * synth.triggerAttack(\"C4\");\n   * // change to F#6 in one quarter note from now.\n   * synth.setNote(\"F#6\", \"+4n\");\n   */\n  setNote(note, time) {\n    const computedTime = this.toSeconds(time);\n    const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n      const portTime = this.toSeconds(this.portamento);\n      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n    } else {\n      this.frequency.setValueAtTime(computedFrequency, computedTime);\n    }\n    return this;\n  }\n}\n__decorate([timeRange(0)], Monophonic.prototype, \"portamento\", void 0);\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Envelope } from \"./Envelope.js\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n  constructor() {\n    super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    this.name = \"AmplitudeEnvelope\";\n    this._gainNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n    this._sig.connect(this._gainNode.gain);\n    this.output = this._gainNode;\n    this.input = this._gainNode;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._gainNode.dispose();\n    return this;\n  }\n}\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope.js\";\nimport { Envelope } from \"../component/envelope/Envelope.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator.js\";\nimport { Source } from \"../source/Source.js\";\nimport { Monophonic } from \"./Monophonic.js\";\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth extends Monophonic {\n  constructor() {\n    const options = optionsFromArguments(Synth.getDefaults(), arguments);\n    super(options);\n    this.name = \"Synth\";\n    this.oscillator = new OmniOscillator(Object.assign({\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }, options.oscillator));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope));\n    // connect the oscillators to the output\n    this.oscillator.chain(this.envelope, this.output);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.3\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"triangle\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n  _triggerEnvelopeAttack(time, velocity) {\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    this.oscillator.start(time);\n    // if there is no release portion, stop the oscillator\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n}\n", "import { Signal } from \"../signal/Signal.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Envelope } from \"../component/envelope/Envelope.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { Monophonic } from \"./Monophonic.js\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator.js\";\nimport { Source } from \"../source/Source.js\";\nimport { Synth } from \"./Synth.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\n/**\n * Base class for both AM and FM synths\n */\nexport class ModulationSynth extends Monophonic {\n  constructor() {\n    const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"ModulationSynth\";\n    this._carrier = new Synth({\n      context: this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: () => this.onsilence(this),\n      volume: -10\n    });\n    this._modulator = new Synth({\n      context: this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    this.oscillator = this._carrier.oscillator;\n    this.envelope = this._carrier.envelope;\n    this.modulation = this._modulator.oscillator;\n    this.modulationEnvelope = this._modulator.envelope;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this.detune = new Signal({\n      context: this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      harmonicity: 3,\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"sine\"\n      }),\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.01,\n        decay: 0.01,\n        sustain: 1,\n        release: 0.5\n      }),\n      modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"square\"\n      }),\n      modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.5,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.5\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeAttack(time, velocity);\n    // @ts-ignore\n    this._modulator._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeRelease(time);\n    // @ts-ignore\n    this._modulator._triggerEnvelopeRelease(time);\n    return this;\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  dispose() {\n    super.dispose();\n    this._carrier.dispose();\n    this._modulator.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n    this._modulationNode.dispose();\n    return this;\n  }\n}\n", "import { AudioToGain } from \"../signal/AudioToGain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ModulationSynth } from \"./ModulationSynth.js\";\n/**\n * AMSynth uses the output of one Tone.Synth to modulate the\n * amplitude of another Tone.Synth. The harmonicity (the ratio between\n * the two signals) affects the timbre of the output signal greatly.\n * Read more about Amplitude Modulation Synthesis on\n * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n *\n * @example\n * const synth = new Tone.AMSynth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"4n\");\n *\n * @category Instrument\n */\nexport class AMSynth extends ModulationSynth {\n  constructor() {\n    super(optionsFromArguments(AMSynth.getDefaults(), arguments));\n    this.name = \"AMSynth\";\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    // control the two voices frequency\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n    this._carrier.chain(this._modulationNode, this.output);\n  }\n  dispose() {\n    super.dispose();\n    this._modulationScale.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { assert } from \"../../core/util/Debug.js\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to {@link Filter} but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"BiquadFilter\";\n    this._filter = this.context.createBiquadFilter();\n    this.input = this.output = this._filter;\n    this.Q = new Param({\n      context: this.context,\n      units: \"number\",\n      value: options.Q,\n      param: this._filter.Q\n    });\n    this.frequency = new Param({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: this._filter.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: this._filter.detune\n    });\n    this.gain = new Param({\n      context: this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain,\n      param: this._filter.gain\n    });\n    this.type = options.type;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      type: \"lowpass\",\n      frequency: 350,\n      detune: 0,\n      gain: 0\n    });\n  }\n  /**\n   * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n   * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n   */\n  get type() {\n    return this._filter.type;\n  }\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._filter.type = type;\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n  getFrequencyResponse(len = 128) {\n    // start with all 1s\n    const freqValues = new Float32Array(len);\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n    // clone the filter to remove any connections which may be changing the value\n    const filterClone = this.context.createBiquadFilter();\n    filterClone.type = this.type;\n    filterClone.Q.value = this.Q.value;\n    filterClone.frequency.value = this.frequency.value;\n    filterClone.gain.value = this.gain.value;\n    filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n    return magValues;\n  }\n  dispose() {\n    super.dispose();\n    this._filter.disconnect();\n    this.Q.dispose();\n    this.frequency.dispose();\n    this.gain.dispose();\n    this.detune.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly, writable } from \"../../core/util/Interface.js\";\nimport { isNumber } from \"../../core/util/TypeCheck.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { BiquadFilter } from \"./BiquadFilter.js\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\nexport class Filter extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    super(options);\n    this.name = \"Filter\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._filters = [];\n    this._filters = [];\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.gain = new Signal({\n      context: this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain\n    });\n    this._type = options.type;\n    this.rolloff = options.rolloff;\n    readOnly(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      detune: 0,\n      frequency: 350,\n      gain: 0,\n      rolloff: -12,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * The type of the filter. Types: \"lowpass\", \"highpass\",\n   * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._type = type;\n    this._filters.forEach(filter => filter.type = type);\n  }\n  /**\n   * The rolloff of the filter which is the drop in db\n   * per octave. Implemented internally by cascading filters.\n   * Only accepts the values -12, -24, -48 and -96.\n   */\n  get rolloff() {\n    return this._rolloff;\n  }\n  set rolloff(rolloff) {\n    const rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n    const possibilities = [-12, -24, -48, -96];\n    let cascadingCount = possibilities.indexOf(rolloffNum);\n    // check the rolloff is valid\n    assert(cascadingCount !== -1, `rolloff can only be ${possibilities.join(\", \")}`);\n    cascadingCount += 1;\n    this._rolloff = rolloffNum;\n    this.input.disconnect();\n    this._filters.forEach(filter => filter.disconnect());\n    this._filters = new Array(cascadingCount);\n    for (let count = 0; count < cascadingCount; count++) {\n      const filter = new BiquadFilter({\n        context: this.context\n      });\n      filter.type = this._type;\n      this.frequency.connect(filter.frequency);\n      this.detune.connect(filter.detune);\n      this.Q.connect(filter.Q);\n      this.gain.connect(filter.gain);\n      this._filters[count] = filter;\n    }\n    this._internalChannels = this._filters;\n    connectSeries(this.input, ...this._internalChannels, this.output);\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n  getFrequencyResponse(len = 128) {\n    const filterClone = new BiquadFilter({\n      frequency: this.frequency.value,\n      gain: this.gain.value,\n      Q: this.Q.value,\n      type: this._type,\n      detune: this.detune.value\n    });\n    // start with all 1s\n    const totalResponse = new Float32Array(len).map(() => 1);\n    this._filters.forEach(() => {\n      const response = filterClone.getFrequencyResponse(len);\n      response.forEach((val, i) => totalResponse[i] *= val);\n    });\n    filterClone.dispose();\n    return totalResponse;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._filters.forEach(filter => {\n      filter.dispose();\n    });\n    writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    this.frequency.dispose();\n    this.Q.dispose();\n    this.detune.dispose();\n    this.gain.dispose();\n    return this;\n  }\n}\n", "import { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Envelope } from \"./Envelope.js\";\nimport { Scale } from \"../../signal/Scale.js\";\nimport { Pow } from \"../../signal/Pow.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\n/**\n * FrequencyEnvelope is an {@link Envelope} which ramps between {@link baseFrequency}\n * and {@link octaves}. It can also have an optional {@link exponent} to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\nexport class FrequencyEnvelope extends Envelope {\n  constructor() {\n    const options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    super(options);\n    this.name = \"FrequencyEnvelope\";\n    this._octaves = options.octaves;\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._exponent = this.input = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n    this._scale = this.output = new Scale({\n      context: this.context,\n      min: this._baseFrequency,\n      max: this._baseFrequency * Math.pow(2, this._octaves)\n    });\n    this._sig.chain(this._exponent, this._scale);\n  }\n  static getDefaults() {\n    return Object.assign(Envelope.getDefaults(), {\n      baseFrequency: 200,\n      exponent: 1,\n      octaves: 4\n    });\n  }\n  /**\n   * The envelope's minimum output value. This is the value which it\n   * starts at.\n   */\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n  set baseFrequency(min) {\n    const freq = this.toFrequency(min);\n    assertRange(freq, 0);\n    this._baseFrequency = freq;\n    this._scale.min = this._baseFrequency;\n    // update the max value when the min changes\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the baseFrequency that the\n   * envelope will scale to.\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(octaves) {\n    this._octaves = octaves;\n    this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n  }\n  /**\n   * The envelope's exponent value.\n   */\n  get exponent() {\n    return this._exponent.value;\n  }\n  set exponent(exponent) {\n    this._exponent.value = exponent;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._exponent.dispose();\n    this._scale.dispose();\n    return this;\n  }\n}\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope.js\";\nimport { Envelope } from \"../component/envelope/Envelope.js\";\nimport { Filter } from \"../component/filter/Filter.js\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Monophonic } from \"../instrument/Monophonic.js\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator.js\";\nimport { Source } from \"../source/Source.js\";\nimport { FrequencyEnvelope } from \"../component/envelope/FrequencyEnvelope.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\n/**\n * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.\n * The amplitude of the Oscillator and the cutoff frequency of the\n * Filter are controlled by Envelopes.\n * <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n * @example\n * const synth = new Tone.MonoSynth({\n * \toscillator: {\n * \t\ttype: \"square\"\n * \t},\n * \tenvelope: {\n * \t\tattack: 0.1\n * \t}\n * }).toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class MonoSynth extends Monophonic {\n  constructor() {\n    const options = optionsFromArguments(MonoSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"MonoSynth\";\n    this.oscillator = new OmniOscillator(Object.assign(options.oscillator, {\n      context: this.context,\n      detune: options.detune,\n      onstop: () => this.onsilence(this)\n    }));\n    this.frequency = this.oscillator.frequency;\n    this.detune = this.oscillator.detune;\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    }));\n    this.filterEnvelope = new FrequencyEnvelope(Object.assign(options.filterEnvelope, {\n      context: this.context\n    }));\n    this.envelope = new AmplitudeEnvelope(Object.assign(options.envelope, {\n      context: this.context\n    }));\n    // connect the oscillators to the output\n    this.oscillator.chain(this.filter, this.envelope, this.output);\n    // connect the filter envelope\n    this.filterEnvelope.connect(this.filter.frequency);\n    readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"filter\", \"filterEnvelope\", \"envelope\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.005,\n        decay: 0.1,\n        release: 1,\n        sustain: 0.9\n      }),\n      filter: Object.assign(omitFromObject(Filter.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        Q: 1,\n        rolloff: -12,\n        type: \"lowpass\"\n      }),\n      filterEnvelope: Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.6,\n        baseFrequency: 200,\n        decay: 0.2,\n        exponent: 2,\n        octaves: 3,\n        release: 2,\n        sustain: 0.5\n      }),\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"sawtooth\"\n      })\n    });\n  }\n  /**\n   * start the attack portion of the envelope\n   * @param time the time the attack should start\n   * @param velocity the velocity of the note (0-1)\n   */\n  _triggerEnvelopeAttack(time, velocity = 1) {\n    this.envelope.triggerAttack(time, velocity);\n    this.filterEnvelope.triggerAttack(time);\n    this.oscillator.start(time);\n    if (this.envelope.sustain === 0) {\n      const computedAttack = this.toSeconds(this.envelope.attack);\n      const computedDecay = this.toSeconds(this.envelope.decay);\n      this.oscillator.stop(time + computedAttack + computedDecay);\n    }\n  }\n  /**\n   * start the release portion of the envelope\n   * @param time the time the release should start\n   */\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this.filterEnvelope.triggerRelease(time);\n    this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  dispose() {\n    super.dispose();\n    this.oscillator.dispose();\n    this.envelope.dispose();\n    this.filterEnvelope.dispose();\n    this.filter.dispose();\n    return this;\n  }\n}\n", "import { Monophonic } from \"./Monophonic.js\";\nimport { MonoSynth } from \"./MonoSynth.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\n/**\n * DuoSynth is a monophonic synth composed of two {@link MonoSynth}s run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic {\n  constructor() {\n    const options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"DuoSynth\";\n    this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: this.context,\n      onsilence: () => this.onsilence(this)\n    }));\n    this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: this.context\n    }));\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: this.context,\n      min: -50,\n      max: 50\n    });\n    // start the vibrato immediately\n    this._vibrato.start();\n    this.vibratoRate = this._vibrato.frequency;\n    this._vibratoGain = new Gain({\n      context: this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    this.vibratoAmount = this._vibratoGain.gain;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    // control the two voices frequency\n    this.frequency.connect(this.voice0.frequency);\n    this.frequency.chain(this.harmonicity, this.voice1.frequency);\n    this._vibrato.connect(this._vibratoGain);\n    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n    this.detune.fan(this.voice0.detune, this.voice1.detune);\n    this.voice0.connect(this.output);\n    this.voice1.connect(this.output);\n    readOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n  }\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      vibratoAmount: 0.5,\n      vibratoRate: 5,\n      harmonicity: 1.5,\n      voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      }),\n      voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeAttack(time, velocity);\n    // @ts-ignore\n    this.voice1._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeRelease(time);\n    // @ts-ignore\n    this.voice1._triggerEnvelopeRelease(time);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this.voice0.dispose();\n    this.voice1.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this._vibrato.dispose();\n    this.vibratoRate.dispose();\n    this._vibratoGain.dispose();\n    this.harmonicity.dispose();\n    return this;\n  }\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { ModulationSynth } from \"./ModulationSynth.js\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\nexport class FMSynth extends ModulationSynth {\n  constructor() {\n    const options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"FMSynth\";\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      value: options.modulationIndex\n    });\n    // control the two voices frequency\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n    this._modulator.connect(this._modulationNode.gain);\n    this._modulationNode.connect(this._carrier.frequency);\n    this._carrier.connect(this.output);\n  }\n  static getDefaults() {\n    return Object.assign(ModulationSynth.getDefaults(), {\n      modulationIndex: 10\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n}\n", "import { Envelope } from \"../component/envelope/Envelope.js\";\nimport { Filter } from \"../component/filter/Filter.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { Scale } from \"../signal/Scale.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator.js\";\nimport { Monophonic } from \"./Monophonic.js\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\nconst inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.63, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * @category Instrument\n */\nexport class MetalSynth extends Monophonic {\n  constructor() {\n    const options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n    this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n    this._freqMultipliers = [];\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this._amplitude = new Gain({\n      context: this.context,\n      gain: 0\n    }).connect(this.output);\n    this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: this.context,\n      type: \"highpass\"\n    }).connect(this._amplitude);\n    for (let i = 0; i < inharmRatios.length; i++) {\n      const osc = new FMOscillator({\n        context: this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? () => this.onsilence(this) : noOp,\n        type: \"square\"\n      });\n      osc.connect(this._highpass);\n      this._oscillators[i] = osc;\n      const mult = new Multiply({\n        context: this.context,\n        value: inharmRatios[i]\n      });\n      this._freqMultipliers[i] = mult;\n      this.frequency.chain(mult, osc.frequency);\n      this.detune.connect(osc.detune);\n    }\n    this._filterFreqScaler = new Scale({\n      context: this.context,\n      max: 7000,\n      min: this.toFrequency(options.resonance)\n    });\n    this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n    this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);\n    this.envelope.connect(this._amplitude.gain);\n    // set the octaves\n    this._octaves = options.octaves;\n    this.octaves = options.octaves;\n  }\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.001,\n        decay: 1.4,\n        release: 0.2\n      }),\n      harmonicity: 5.1,\n      modulationIndex: 32,\n      octaves: 1.5,\n      resonance: 4000\n    });\n  }\n  /**\n   * Trigger the attack.\n   * @param time When the attack should be triggered.\n   * @param velocity The velocity that the envelope should be triggered at.\n   */\n  _triggerEnvelopeAttack(time, velocity = 1) {\n    this.envelope.triggerAttack(time, velocity);\n    this._oscillators.forEach(osc => osc.start(time));\n    if (this.envelope.sustain === 0) {\n      this._oscillators.forEach(osc => {\n        osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n      });\n    }\n    return this;\n  }\n  /**\n   * Trigger the release of the envelope.\n   * @param time When the release should be triggered.\n   */\n  _triggerEnvelopeRelease(time) {\n    this.envelope.triggerRelease(time);\n    this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));\n    return this;\n  }\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n  /**\n   * The modulationIndex of the oscillators which make up the source.\n   * see {@link FMOscillator.modulationIndex}\n   * @min 1\n   * @max 100\n   */\n  get modulationIndex() {\n    return this._oscillators[0].modulationIndex.value;\n  }\n  set modulationIndex(val) {\n    this._oscillators.forEach(osc => osc.modulationIndex.value = val);\n  }\n  /**\n   * The harmonicity of the oscillators which make up the source.\n   * see Tone.FMOscillator.harmonicity\n   * @min 0.1\n   * @max 10\n   */\n  get harmonicity() {\n    return this._oscillators[0].harmonicity.value;\n  }\n  set harmonicity(val) {\n    this._oscillators.forEach(osc => osc.harmonicity.value = val);\n  }\n  /**\n   * The lower level of the highpass filter which is attached to the envelope.\n   * This value should be between [0, 7000]\n   * @min 0\n   * @max 7000\n   */\n  get resonance() {\n    return this._filterFreqScaler.min;\n  }\n  set resonance(val) {\n    this._filterFreqScaler.min = this.toFrequency(val);\n    this.octaves = this._octaves;\n  }\n  /**\n   * The number of octaves above the \"resonance\" frequency\n   * that the filter ramps during the attack/decay envelope\n   * @min 0\n   * @max 8\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(val) {\n    this._octaves = val;\n    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n  }\n  dispose() {\n    super.dispose();\n    this._oscillators.forEach(osc => osc.dispose());\n    this._freqMultipliers.forEach(freqMult => freqMult.dispose());\n    this.frequency.dispose();\n    this.detune.dispose();\n    this._filterFreqScaler.dispose();\n    this._amplitude.dispose();\n    this.envelope.dispose();\n    this._highpass.dispose();\n    return this;\n  }\n}\n", "import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency.js\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Monophonic } from \"./Monophonic.js\";\nimport { Synth } from \"./Synth.js\";\nimport { range, timeRange } from \"../core/util/Decorator.js\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth {\n  constructor() {\n    const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n    this.portamento = 0;\n    this.pitchDecay = options.pitchDecay;\n    this.octaves = options.octaves;\n    readOnly(this, [\"oscillator\", \"envelope\"]);\n  }\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n      envelope: {\n        attack: 0.001,\n        attackCurve: \"exponential\",\n        decay: 0.4,\n        release: 1.4,\n        sustain: 0.01\n      },\n      octaves: 10,\n      oscillator: {\n        type: \"sine\"\n      },\n      pitchDecay: 0.05\n    });\n  }\n  setNote(note, time) {\n    const seconds = this.toSeconds(time);\n    const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n    const maxNote = hertz * this.octaves;\n    this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    return this;\n  }\n}\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);\n", "import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope.js\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Noise } from \"../source/Noise.js\";\nimport { Instrument } from \"./Instrument.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { Envelope } from \"../component/envelope/Envelope.js\";\nimport { Source } from \"../source/Source.js\";\n/**\n * Tone.NoiseSynth is composed of {@link Noise} through an {@link AmplitudeEnvelope}.\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument {\n  constructor() {\n    const options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"NoiseSynth\";\n    this.noise = new Noise(Object.assign({\n      context: this.context\n    }, options.noise));\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope));\n    // connect the noise to the output\n    this.noise.chain(this.envelope, this.output);\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        decay: 0.1,\n        sustain: 0.0\n      }),\n      noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"white\"\n      })\n    });\n  }\n  /**\n   * Start the attack portion of the envelopes. Unlike other\n   * instruments, Tone.NoiseSynth doesn't have a note.\n   * @example\n   * const noiseSynth = new Tone.NoiseSynth().toDestination();\n   * noiseSynth.triggerAttack();\n   */\n  triggerAttack(time, velocity = 1) {\n    time = this.toSeconds(time);\n    // the envelopes\n    this.envelope.triggerAttack(time, velocity);\n    // start the noise\n    this.noise.start(time);\n    if (this.envelope.sustain === 0) {\n      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n    }\n    return this;\n  }\n  /**\n   * Start the release portion of the envelopes.\n   */\n  triggerRelease(time) {\n    time = this.toSeconds(time);\n    this.envelope.triggerRelease(time);\n    this.noise.stop(time + this.toSeconds(this.envelope.release));\n    return this;\n  }\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 0);\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n    return this;\n  }\n  /**\n   * Trigger the attack and then the release after the duration.\n   * @param duration The amount of time to hold the note for\n   * @param time The time the note should start\n   * @param velocity The volume of the note (0-1)\n   * @example\n   * const noiseSynth = new Tone.NoiseSynth().toDestination();\n   * // hold the note for 0.5 seconds\n   * noiseSynth.triggerAttackRelease(0.5);\n   */\n  triggerAttackRelease(duration, time, velocity = 1) {\n    time = this.toSeconds(time);\n    duration = this.toSeconds(duration);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + duration);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this.noise.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n}\n", "/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\nexport function addToWorklet(classOrFunction) {\n  workletContext.add(classOrFunction);\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\nexport function registerProcessor(name, classDesc) {\n  const processor = /* javascript */`registerProcessor(\"${name}\", ${classDesc})`;\n  workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\nexport function getWorkletGlobalScope() {\n  return Array.from(workletContext).join(\"\\n\");\n}\n", "import { ToneAudioNode } from \"../context/ToneAudioNode.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope.js\";\nexport class ToneAudioWorklet extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"ToneAudioWorklet\";\n    /**\n     * The constructor options for the node\n     */\n    this.workletOptions = {};\n    /**\n     * Callback which is invoked when there is an error in the processing\n     */\n    this.onprocessorerror = noOp;\n    const blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], {\n      type: \"text/javascript\"\n    }));\n    const name = this._audioWorkletName();\n    this._dummyGain = this.context.createGain();\n    this._dummyParam = this._dummyGain.gain;\n    // Register the processor\n    this.context.addAudioWorkletModule(blobUrl).then(() => {\n      // create the worklet when it's read\n      if (!this.disposed) {\n        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n        this.onReady(this._worklet);\n      }\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._dummyGain.disconnect();\n    if (this._worklet) {\n      this._worklet.port.postMessage(\"dispose\");\n      this._worklet.disconnect();\n    }\n    return this;\n  }\n}\n", "import { addToWorklet } from \"./WorkletGlobalScope.js\";\nconst toneAudioWorkletProcessor = /* javascript */`\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the {@link ToneAudioWorklet}. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it's disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === \"dispose\") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n`;\naddToWorklet(toneAudioWorkletProcessor);\n", "import \"./ToneAudioWorkletProcessor.worklet.js\";\nimport { addToWorklet } from \"./WorkletGlobalScope.js\";\nexport const singleIOProcess = /* javascript */`\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n`;\naddToWorklet(singleIOProcess);\n", "import { addToWorklet } from \"./WorkletGlobalScope.js\";\nconst delayLine = /* javascript */`\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n`;\naddToWorklet(delayLine);\n", "import \"../../core/worklet/SingleIOProcessor.worklet.js\";\nimport \"../../core/worklet/DelayLine.worklet.js\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope.js\";\nexport const workletName = \"feedback-comb-filter\";\nconst feedbackCombFilter = /* javascript */`\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"delayTime\",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}, {\n\t\t\t\tname: \"feedback\",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n`;\nregisterProcessor(workletName, feedbackCombFilter);\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet.js\";\nimport { workletName } from \"./FeedbackCombFilter.worklet.js\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\nexport class FeedbackCombFilter extends ToneAudioWorklet {\n  constructor() {\n    const options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    super(options);\n    this.name = \"FeedbackCombFilter\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.delayTime = new Param({\n      context: this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: this._dummyParam,\n      swappable: true\n    });\n    this.resonance = new Param({\n      context: this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: this._dummyParam,\n      swappable: true\n    });\n    readOnly(this, [\"resonance\", \"delayTime\"]);\n  }\n  _audioWorkletName() {\n    return workletName;\n  }\n  /**\n   * The default parameters\n   */\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const delayTime = node.parameters.get(\"delayTime\");\n    this.delayTime.setParam(delayTime);\n    const feedback = node.parameters.get(\"feedback\");\n    this.resonance.setParam(feedback);\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.delayTime.dispose();\n    this.resonance.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    super(options);\n    this.name = \"OnePoleFilter\";\n    this._frequency = options.frequency;\n    this._type = options.type;\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this._createFilter();\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      frequency: 880,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * Create a filter and dispose the old one\n   */\n  _createFilter() {\n    const oldFilter = this._filter;\n    const freq = this.toFrequency(this._frequency);\n    const t = 1 / (2 * Math.PI * freq);\n    if (this._type === \"lowpass\") {\n      const a0 = 1 / (t * this.context.sampleRate);\n      const b1 = a0 - 1;\n      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n    } else {\n      const b1 = 1 / (t * this.context.sampleRate) - 1;\n      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n    }\n    this.input.chain(this._filter, this.output);\n    if (oldFilter) {\n      // dispose it on the next block\n      this.context.setTimeout(() => {\n        if (!this.disposed) {\n          this.input.disconnect(oldFilter);\n          oldFilter.disconnect();\n        }\n      }, this.blockTime);\n    }\n  }\n  /**\n   * The frequency value.\n   */\n  get frequency() {\n    return this._frequency;\n  }\n  set frequency(fq) {\n    this._frequency = fq;\n    this._createFilter();\n  }\n  /**\n   * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n   */\n  get type() {\n    return this._type;\n  }\n  set type(t) {\n    this._type = t;\n    this._createFilter();\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n  getFrequencyResponse(len = 128) {\n    const freqValues = new Float32Array(len);\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n    return magValues;\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this._filter.disconnect();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { FeedbackCombFilter } from \"./FeedbackCombFilter.js\";\nimport { OnePoleFilter } from \"./OnePoleFilter.js\";\n/**\n * A lowpass feedback comb filter. It is similar to\n * {@link FeedbackCombFilter}, but includes a lowpass filter.\n * @category Component\n */\nexport class LowpassCombFilter extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(LowpassCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\", \"dampening\"]);\n    super(options);\n    this.name = \"LowpassCombFilter\";\n    this._combFilter = this.output = new FeedbackCombFilter({\n      context: this.context,\n      delayTime: options.delayTime,\n      resonance: options.resonance\n    });\n    this.delayTime = this._combFilter.delayTime;\n    this.resonance = this._combFilter.resonance;\n    this._lowpass = this.input = new OnePoleFilter({\n      context: this.context,\n      frequency: options.dampening,\n      type: \"lowpass\"\n    });\n    // connections\n    this._lowpass.connect(this._combFilter);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      dampening: 3000,\n      delayTime: 0.1,\n      resonance: 0.5\n    });\n  }\n  /**\n   * The dampening control of the feedback\n   */\n  get dampening() {\n    return this._lowpass.frequency;\n  }\n  set dampening(fq) {\n    this._lowpass.frequency = fq;\n  }\n  dispose() {\n    super.dispose();\n    this._combFilter.dispose();\n    this._lowpass.dispose();\n    return this;\n  }\n}\n", "import { LowpassCombFilter } from \"../component/filter/LowpassCombFilter.js\";\nimport { deepMerge } from \"../core/util/Defaults.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Noise } from \"../source/Noise.js\";\nimport { Instrument } from \"./Instrument.js\";\n/**\n * Karplus-Strong string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\nexport class PluckSynth extends Instrument {\n  constructor() {\n    const options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    super(options);\n    this.name = \"PluckSynth\";\n    this._noise = new Noise({\n      context: this.context,\n      type: \"pink\"\n    });\n    this.attackNoise = options.attackNoise;\n    this._lfcf = new LowpassCombFilter({\n      context: this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    this.resonance = options.resonance;\n    this.release = options.release;\n    this._noise.connect(this._lfcf);\n    this._lfcf.connect(this.output);\n  }\n  static getDefaults() {\n    return deepMerge(Instrument.getDefaults(), {\n      attackNoise: 1,\n      dampening: 4000,\n      resonance: 0.7,\n      release: 1\n    });\n  }\n  /**\n   * The dampening control. i.e. the lowpass filter frequency of the comb filter\n   * @min 0\n   * @max 7000\n   */\n  get dampening() {\n    return this._lfcf.dampening;\n  }\n  set dampening(fq) {\n    this._lfcf.dampening = fq;\n  }\n  triggerAttack(note, time) {\n    const freq = this.toFrequency(note);\n    time = this.toSeconds(time);\n    const delayAmount = 1 / freq;\n    this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n    this._noise.start(time);\n    this._noise.stop(time + delayAmount * this.attackNoise);\n    this._lfcf.resonance.cancelScheduledValues(time);\n    this._lfcf.resonance.setValueAtTime(this.resonance, time);\n    return this;\n  }\n  /**\n   * Ramp down the {@link resonance} to 0 over the duration of the release time.\n   */\n  triggerRelease(time) {\n    this._lfcf.resonance.linearRampTo(0, this.release, time);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._noise.dispose();\n    this._lfcf.dispose();\n    return this;\n  }\n}\n", "import { MidiClass } from \"../core/type/Midi.js\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck.js\";\nimport { Instrument } from \"./Instrument.js\";\nimport { Monophonic } from \"./Monophonic.js\";\nimport { Synth } from \"./Synth.js\";\nimport { assert, warn } from \"../core/util/Debug.js\";\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second parameter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\nexport class PolySynth extends Instrument {\n  constructor() {\n    const options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]);\n    super(options);\n    this.name = \"PolySynth\";\n    /**\n     * The voices which are not currently in use\n     */\n    this._availableVoices = [];\n    /**\n     * The currently active voices\n     */\n    this._activeVoices = [];\n    /**\n     * All of the allocated voices for this synth.\n     */\n    this._voices = [];\n    /**\n     * The GC timeout. Held so that it could be cancelled when the node is disposed.\n     */\n    this._gcTimeout = -1;\n    /**\n     * A moving average of the number of active voices\n     */\n    this._averageActiveVoices = 0;\n    /**\n     * The release which is scheduled to the timeline.\n     */\n    this._syncedRelease = time => this.releaseAll(time);\n    // check against the old API (pre 14.3.0)\n    assert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n    const defaults = options.voice.getDefaults();\n    this.options = Object.assign(defaults, options.options);\n    this.voice = options.voice;\n    this.maxPolyphony = options.maxPolyphony;\n    // create the first voice\n    this._dummyVoice = this._getNextAvailableVoice();\n    // remove it from the voices list\n    const index = this._voices.indexOf(this._dummyVoice);\n    this._voices.splice(index, 1);\n    // kick off the GC interval\n    this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      maxPolyphony: 32,\n      options: {},\n      voice: Synth\n    });\n  }\n  /**\n   * The number of active voices.\n   */\n  get activeVoices() {\n    return this._activeVoices.length;\n  }\n  /**\n   * Invoked when the source is done making sound, so that it can be\n   * readded to the pool of available voices\n   */\n  _makeVoiceAvailable(voice) {\n    this._availableVoices.push(voice);\n    // remove the midi note from 'active voices'\n    const activeVoiceIndex = this._activeVoices.findIndex(e => e.voice === voice);\n    this._activeVoices.splice(activeVoiceIndex, 1);\n  }\n  /**\n   * Get an available voice from the pool of available voices.\n   * If one is not available and the maxPolyphony limit is reached,\n   * steal a voice, otherwise return null.\n   */\n  _getNextAvailableVoice() {\n    // if there are available voices, return the first one\n    if (this._availableVoices.length) {\n      return this._availableVoices.shift();\n    } else if (this._voices.length < this.maxPolyphony) {\n      // otherwise if there is still more maxPolyphony, make a new voice\n      const voice = new this.voice(Object.assign(this.options, {\n        context: this.context,\n        onsilence: this._makeVoiceAvailable.bind(this)\n      }));\n      assert(voice instanceof Monophonic, \"Voice must extend Monophonic class\");\n      voice.connect(this.output);\n      this._voices.push(voice);\n      return voice;\n    } else {\n      warn(\"Max polyphony exceeded. Note dropped.\");\n    }\n  }\n  /**\n   * Occasionally check if there are any allocated voices which can be cleaned up.\n   */\n  _collectGarbage() {\n    this._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n    if (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {\n      // take off an available note\n      const firstAvail = this._availableVoices.shift();\n      const index = this._voices.indexOf(firstAvail);\n      this._voices.splice(index, 1);\n      if (!this.context.isOffline) {\n        firstAvail.dispose();\n      }\n    }\n  }\n  /**\n   * Internal method which triggers the attack\n   */\n  _triggerAttack(notes, time, velocity) {\n    notes.forEach(note => {\n      const midiNote = new MidiClass(this.context, note).toMidi();\n      const voice = this._getNextAvailableVoice();\n      if (voice) {\n        voice.triggerAttack(note, time, velocity);\n        this._activeVoices.push({\n          midi: midiNote,\n          voice,\n          released: false\n        });\n        this.log(\"triggerAttack\", note, time);\n      }\n    });\n  }\n  /**\n   * Internal method which triggers the release\n   */\n  _triggerRelease(notes, time) {\n    notes.forEach(note => {\n      const midiNote = new MidiClass(this.context, note).toMidi();\n      const event = this._activeVoices.find(({\n        midi,\n        released\n      }) => midi === midiNote && !released);\n      if (event) {\n        // trigger release on that note\n        event.voice.triggerRelease(time);\n        // mark it as released\n        event.released = true;\n        this.log(\"triggerRelease\", note, time);\n      }\n    });\n  }\n  /**\n   * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n   * to wait for just-in-time scheduling\n   */\n  _scheduleEvent(type, notes, time, velocity) {\n    assert(!this.disposed, \"Synth was already disposed\");\n    // if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n    if (time <= this.now()) {\n      // do it immediately\n      if (type === \"attack\") {\n        this._triggerAttack(notes, time, velocity);\n      } else {\n        this._triggerRelease(notes, time);\n      }\n    } else {\n      // schedule it to start in the future\n      this.context.setTimeout(() => {\n        if (!this.disposed) {\n          this._scheduleEvent(type, notes, time, velocity);\n        }\n      }, time - this.now());\n    }\n  }\n  /**\n   * Trigger the attack portion of the note\n   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n   * @param  time  The start time of the note.\n   * @param velocity The velocity of the note.\n   * @example\n   * const synth = new Tone.PolySynth(Tone.FMSynth).toDestination();\n   * // trigger a chord immediately with a velocity of 0.2\n   * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], Tone.now(), 0.2);\n   */\n  triggerAttack(notes, time, velocity) {\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n    const computedTime = this.toSeconds(time);\n    this._scheduleEvent(\"attack\", notes, computedTime, velocity);\n    return this;\n  }\n  /**\n   * Trigger the release of the note. Unlike monophonic instruments,\n   * a note (or array of notes) needs to be passed in as the first argument.\n   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n   * @param  time  When the release will be triggered.\n   * @example\n   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n   * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n   * // trigger the release of the given notes.\n   * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n   * poly.triggerRelease(\"F5\", \"+3\");\n   */\n  triggerRelease(notes, time) {\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n    const computedTime = this.toSeconds(time);\n    this._scheduleEvent(\"release\", notes, computedTime);\n    return this;\n  }\n  /**\n   * Trigger the attack and release after the specified duration\n   * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n   * @param  duration the duration of the note\n   * @param  time  if no time is given, defaults to now\n   * @param  velocity the velocity of the attack (0-1)\n   * @example\n   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n   * // can pass in an array of durations as well\n   * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n   */\n  triggerAttackRelease(notes, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    this.triggerAttack(notes, computedTime, velocity);\n    if (isArray(duration)) {\n      assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n      notes = notes;\n      for (let i = 0; i < notes.length; i++) {\n        const d = duration[Math.min(i, duration.length - 1)];\n        const durationSeconds = this.toSeconds(d);\n        assert(durationSeconds > 0, \"The duration must be greater than 0\");\n        this.triggerRelease(notes[i], computedTime + durationSeconds);\n      }\n    } else {\n      const durationSeconds = this.toSeconds(duration);\n      assert(durationSeconds > 0, \"The duration must be greater than 0\");\n      this.triggerRelease(notes, computedTime + durationSeconds);\n    }\n    return this;\n  }\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 1);\n      this._syncMethod(\"triggerRelease\", 1);\n      // make sure that the sound doesn't play after its been stopped\n      this.context.transport.on(\"stop\", this._syncedRelease);\n      this.context.transport.on(\"pause\", this._syncedRelease);\n      this.context.transport.on(\"loopEnd\", this._syncedRelease);\n    }\n    return this;\n  }\n  /**\n   * Set a member/attribute of the voices\n   * @example\n   * const poly = new Tone.PolySynth().toDestination();\n   * // set all of the voices using an options object for the synth type\n   * poly.set({\n   * \tenvelope: {\n   * \t\tattack: 0.25\n   * \t}\n   * });\n   * poly.triggerAttackRelease(\"Bb3\", 0.2);\n   */\n  set(options) {\n    // remove options which are controlled by the PolySynth\n    const sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]);\n    // store all of the options\n    this.options = deepMerge(this.options, sanitizedOptions);\n    this._voices.forEach(voice => voice.set(sanitizedOptions));\n    this._dummyVoice.set(sanitizedOptions);\n    return this;\n  }\n  get() {\n    return this._dummyVoice.get();\n  }\n  /**\n   * Trigger the release portion of all the currently active voices immediately.\n   * Useful for silencing the synth.\n   */\n  releaseAll(time) {\n    const computedTime = this.toSeconds(time);\n    this._activeVoices.forEach(({\n      voice\n    }) => {\n      voice.triggerRelease(computedTime);\n    });\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._dummyVoice.dispose();\n    this._voices.forEach(v => v.dispose());\n    this._activeVoices = [];\n    this._availableVoices = [];\n    this.context.clearInterval(this._gcTimeout);\n    return this;\n  }\n}\n", "import { __decorate } from \"tslib\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers.js\";\nimport { ftomf, intervalToFrequencyRatio } from \"../core/type/Conversions.js\";\nimport { FrequencyClass } from \"../core/type/Frequency.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck.js\";\nimport { Instrument } from \"../instrument/Instrument.js\";\nimport { ToneBufferSource } from \"../source/buffer/ToneBufferSource.js\";\nimport { timeRange } from \"../core/util/Decorator.js\";\nimport { assert } from \"../core/util/Debug.js\";\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tA1: \"A1.mp3\",\n * \t\tA2: \"A2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t}\n * }).toDestination();\n * @category Instrument\n */\nexport class Sampler extends Instrument {\n  constructor() {\n    const options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    super(options);\n    this.name = \"Sampler\";\n    /**\n     * The object of all currently playing BufferSources\n     */\n    this._activeSources = new Map();\n    const urlMap = {};\n    Object.keys(options.urls).forEach(note => {\n      const noteNumber = parseInt(note, 10);\n      assert(isNote(note) || isNumber(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);\n      if (isNote(note)) {\n        // convert the note name to MIDI\n        const mid = new FrequencyClass(this.context, note).toMidi();\n        urlMap[mid] = options.urls[note];\n      } else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n        // otherwise if it's numbers assume it's midi\n        urlMap[noteNumber] = options.urls[noteNumber];\n      }\n    });\n    this._buffers = new ToneAudioBuffers({\n      urls: urlMap,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    this.attack = options.attack;\n    this.release = options.release;\n    this.curve = options.curve;\n    // invoke the callback if it's already loaded\n    if (this._buffers.loaded) {\n      // invoke onload deferred\n      Promise.resolve().then(options.onload);\n    }\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      attack: 0,\n      baseUrl: \"\",\n      curve: \"exponential\",\n      onload: noOp,\n      onerror: noOp,\n      release: 0.1,\n      urls: {}\n    });\n  }\n  /**\n   * Returns the difference in steps between the given midi note at the closets sample.\n   */\n  _findClosest(midi) {\n    // searches within 8 octaves of the given midi note\n    const MAX_INTERVAL = 96;\n    let interval = 0;\n    while (interval < MAX_INTERVAL) {\n      // check above and below\n      if (this._buffers.has(midi + interval)) {\n        return -interval;\n      } else if (this._buffers.has(midi - interval)) {\n        return interval;\n      }\n      interval++;\n    }\n    throw new Error(`No available buffers for note: ${midi}`);\n  }\n  /**\n   * @param  notes\tThe note to play, or an array of notes.\n   * @param  time     When to play the note\n   * @param  velocity The velocity to play the sample back.\n   */\n  triggerAttack(notes, time, velocity = 1) {\n    this.log(\"triggerAttack\", notes, time, velocity);\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n    notes.forEach(note => {\n      const midiFloat = ftomf(new FrequencyClass(this.context, note).toFrequency());\n      const midi = Math.round(midiFloat);\n      const remainder = midiFloat - midi;\n      // find the closest note pitch\n      const difference = this._findClosest(midi);\n      const closestNote = midi - difference;\n      const buffer = this._buffers.get(closestNote);\n      const playbackRate = intervalToFrequencyRatio(difference + remainder);\n      // play that note\n      const source = new ToneBufferSource({\n        url: buffer,\n        context: this.context,\n        curve: this.curve,\n        fadeIn: this.attack,\n        fadeOut: this.release,\n        playbackRate\n      }).connect(this.output);\n      source.start(time, 0, buffer.duration / playbackRate, velocity);\n      // add it to the active sources\n      if (!isArray(this._activeSources.get(midi))) {\n        this._activeSources.set(midi, []);\n      }\n      this._activeSources.get(midi).push(source);\n      // remove it when it's done\n      source.onended = () => {\n        if (this._activeSources && this._activeSources.has(midi)) {\n          const sources = this._activeSources.get(midi);\n          const index = sources.indexOf(source);\n          if (index !== -1) {\n            sources.splice(index, 1);\n          }\n        }\n      };\n    });\n    return this;\n  }\n  /**\n   * @param  notes\tThe note to release, or an array of notes.\n   * @param  time     \tWhen to release the note.\n   */\n  triggerRelease(notes, time) {\n    this.log(\"triggerRelease\", notes, time);\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n    notes.forEach(note => {\n      const midi = new FrequencyClass(this.context, note).toMidi();\n      // find the note\n      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {\n        const sources = this._activeSources.get(midi);\n        time = this.toSeconds(time);\n        sources.forEach(source => {\n          source.stop(time);\n        });\n        this._activeSources.set(midi, []);\n      }\n    });\n    return this;\n  }\n  /**\n   * Release all currently active notes.\n   * @param  time     \tWhen to release the notes.\n   */\n  releaseAll(time) {\n    const computedTime = this.toSeconds(time);\n    this._activeSources.forEach(sources => {\n      while (sources.length) {\n        const source = sources.shift();\n        source.stop(computedTime);\n      }\n    });\n    return this;\n  }\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 1);\n      this._syncMethod(\"triggerRelease\", 1);\n    }\n    return this;\n  }\n  /**\n   * Invoke the attack phase, then after the duration, invoke the release.\n   * @param  notes\tThe note to play and release, or an array of notes.\n   * @param  duration The time the note should be held\n   * @param  time     When to start the attack\n   * @param  velocity The velocity of the attack\n   */\n  triggerAttackRelease(notes, duration, time, velocity = 1) {\n    const computedTime = this.toSeconds(time);\n    this.triggerAttack(notes, computedTime, velocity);\n    if (isArray(duration)) {\n      assert(isArray(notes), \"notes must be an array when duration is array\");\n      notes.forEach((note, index) => {\n        const d = duration[Math.min(index, duration.length - 1)];\n        this.triggerRelease(note, computedTime + this.toSeconds(d));\n      });\n    } else {\n      this.triggerRelease(notes, computedTime + this.toSeconds(duration));\n    }\n    return this;\n  }\n  /**\n   * Add a note to the sampler.\n   * @param  note      The buffer's pitch.\n   * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   */\n  add(note, url, callback) {\n    assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n    if (isNote(note)) {\n      // convert the note name to MIDI\n      const mid = new FrequencyClass(this.context, note).toMidi();\n      this._buffers.add(mid, url, callback);\n    } else {\n      // otherwise if it's numbers assume it's midi\n      this._buffers.add(note, url, callback);\n    }\n    return this;\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._buffers.dispose();\n    this._activeSources.forEach(sources => {\n      sources.forEach(source => source.dispose());\n    });\n    this._activeSources.clear();\n    return this;\n  }\n}\n__decorate([timeRange(0)], Sampler.prototype, \"attack\", void 0);\n__decorate([timeRange(0)], Sampler.prototype, \"release\", void 0);\n", "import \"../core/clock/Transport.js\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext.js\";\nimport { TicksClass } from \"../core/type/Ticks.js\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { StateTimeline } from \"../core/util/StateTimeline.js\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck.js\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\nexport class ToneEvent extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    super(options);\n    this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n    this._startOffset = 0;\n    this._loop = options.loop;\n    this.callback = options.callback;\n    this.value = options.value;\n    this._loopStart = this.toTicks(options.loopStart);\n    this._loopEnd = this.toTicks(options.loopEnd);\n    this._playbackRate = options.playbackRate;\n    this._probability = options.probability;\n    this._humanize = options.humanize;\n    this.mute = options.mute;\n    this._playbackRate = options.playbackRate;\n    this._state.increasing = true;\n    // schedule the events for the first time\n    this._rescheduleEvents();\n  }\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      callback: noOp,\n      humanize: false,\n      loop: false,\n      loopEnd: \"1m\",\n      loopStart: 0,\n      mute: false,\n      playbackRate: 1,\n      probability: 1,\n      value: null\n    });\n  }\n  /**\n   * Reschedule all of the events along the timeline\n   * with the updated values.\n   * @param after Only reschedules events after the given time.\n   */\n  _rescheduleEvents(after = -1) {\n    // if no argument is given, schedules all of the events\n    this._state.forEachFrom(after, event => {\n      let duration;\n      if (event.state === \"started\") {\n        if (event.id !== -1) {\n          this.context.transport.clear(event.id);\n        }\n        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n        if (this._loop === true || isNumber(this._loop) && this._loop > 1) {\n          duration = Infinity;\n          if (isNumber(this._loop)) {\n            duration = this._loop * this._getLoopDuration();\n          }\n          const nextEvent = this._state.getAfter(startTick);\n          if (nextEvent !== null) {\n            duration = Math.min(duration, nextEvent.time - startTick);\n          }\n          if (duration !== Infinity) {\n            duration = new TicksClass(this.context, duration);\n          }\n          const interval = new TicksClass(this.context, this._getLoopDuration());\n          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new TicksClass(this.context, startTick), duration);\n        } else {\n          event.id = this.context.transport.schedule(this._tick.bind(this), new TicksClass(this.context, startTick));\n        }\n      }\n    });\n  }\n  /**\n   * Returns the playback state of the note, either \"started\" or \"stopped\".\n   */\n  get state() {\n    return this._state.getValueAtTime(this.context.transport.ticks);\n  }\n  /**\n   * The start from the scheduled start time.\n   */\n  get startOffset() {\n    return this._startOffset;\n  }\n  set startOffset(offset) {\n    this._startOffset = offset;\n  }\n  /**\n   * The probability of the notes being triggered.\n   */\n  get probability() {\n    return this._probability;\n  }\n  set probability(prob) {\n    this._probability = prob;\n  }\n  /**\n   * If set to true, will apply small random variation\n   * to the callback time. If the value is given as a time, it will randomize\n   * by that amount.\n   * @example\n   * const event = new Tone.ToneEvent();\n   * event.humanize = true;\n   */\n  get humanize() {\n    return this._humanize;\n  }\n  set humanize(variation) {\n    this._humanize = variation;\n  }\n  /**\n   * Start the note at the given time.\n   * @param  time  When the event should start.\n   */\n  start(time) {\n    const ticks = this.toTicks(time);\n    if (this._state.getValueAtTime(ticks) === \"stopped\") {\n      this._state.add({\n        id: -1,\n        state: \"started\",\n        time: ticks\n      });\n      this._rescheduleEvents(ticks);\n    }\n    return this;\n  }\n  /**\n   * Stop the Event at the given time.\n   * @param  time  When the event should stop.\n   */\n  stop(time) {\n    this.cancel(time);\n    const ticks = this.toTicks(time);\n    if (this._state.getValueAtTime(ticks) === \"started\") {\n      this._state.setStateAtTime(\"stopped\", ticks, {\n        id: -1\n      });\n      const previousEvent = this._state.getBefore(ticks);\n      let rescheduleTime = ticks;\n      if (previousEvent !== null) {\n        rescheduleTime = previousEvent.time;\n      }\n      this._rescheduleEvents(rescheduleTime);\n    }\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n  cancel(time) {\n    time = defaultArg(time, -Infinity);\n    const ticks = this.toTicks(time);\n    this._state.forEachFrom(ticks, event => {\n      this.context.transport.clear(event.id);\n    });\n    this._state.cancel(ticks);\n    return this;\n  }\n  /**\n   * The callback function invoker. Also\n   * checks if the Event is done playing\n   * @param  time  The time of the event in seconds\n   */\n  _tick(time) {\n    const ticks = this.context.transport.getTicksAtTime(time);\n    if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n      if (this.probability < 1 && Math.random() > this.probability) {\n        return;\n      }\n      if (this.humanize) {\n        let variation = 0.02;\n        if (!isBoolean(this.humanize)) {\n          variation = this.toSeconds(this.humanize);\n        }\n        time += (Math.random() * 2 - 1) * variation;\n      }\n      this.callback(time, this.value);\n    }\n  }\n  /**\n   * Get the duration of the loop.\n   */\n  _getLoopDuration() {\n    return (this._loopEnd - this._loopStart) / this._playbackRate;\n  }\n  /**\n   * If the note should loop or not\n   * between ToneEvent.loopStart and\n   * ToneEvent.loopEnd. If set to true,\n   * the event will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this._rescheduleEvents();\n  }\n  /**\n   * The playback rate of the event. Defaults to 1.\n   * @example\n   * const note = new Tone.ToneEvent();\n   * note.loop = true;\n   * // repeat the note twice as fast\n   * note.playbackRate = 2;\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    this._rescheduleEvents();\n  }\n  /**\n   * The loopEnd point is the time the event will loop\n   * if ToneEvent.loop is true.\n   */\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The time when the loop should start.\n   */\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n    if (this._loop) {\n      this._rescheduleEvents();\n    }\n  }\n  /**\n   * The current progress of the loop interval.\n   * Returns 0 if the event is not started yet or\n   * it is not set to loop.\n   */\n  get progress() {\n    if (this._loop) {\n      const ticks = this.context.transport.ticks;\n      const lastEvent = this._state.get(ticks);\n      if (lastEvent !== null && lastEvent.state === \"started\") {\n        const loopDuration = this._getLoopDuration();\n        const progress = (ticks - lastEvent.time) % loopDuration;\n        return progress / loopDuration;\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }\n  dispose() {\n    super.dispose();\n    this.cancel();\n    this._state.dispose();\n    return this;\n  }\n}\n", "import { ToneEvent } from \"./ToneEvent.js\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\n/**\n * Loop creates a looped callback at the\n * specified interval. The callback can be\n * started, stopped and scheduled along\n * the Transport's timeline.\n * @example\n * const loop = new Tone.Loop((time) => {\n * \t// triggered every eighth note.\n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Loop extends ToneWithContext {\n  constructor() {\n    const options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n    super(options);\n    this.name = \"Loop\";\n    this._event = new ToneEvent({\n      context: this.context,\n      callback: this._tick.bind(this),\n      loop: true,\n      loopEnd: options.interval,\n      playbackRate: options.playbackRate,\n      probability: options.probability,\n      humanize: options.humanize\n    });\n    this.callback = options.callback;\n    // set the iterations\n    this.iterations = options.iterations;\n  }\n  static getDefaults() {\n    return Object.assign(ToneWithContext.getDefaults(), {\n      interval: \"4n\",\n      callback: noOp,\n      playbackRate: 1,\n      iterations: Infinity,\n      probability: 1,\n      mute: false,\n      humanize: false\n    });\n  }\n  /**\n   * Start the loop at the specified time along the Transport's timeline.\n   * @param  time  When to start the Loop.\n   */\n  start(time) {\n    this._event.start(time);\n    return this;\n  }\n  /**\n   * Stop the loop at the given time.\n   * @param  time  When to stop the Loop.\n   */\n  stop(time) {\n    this._event.stop(time);\n    return this;\n  }\n  /**\n   * Cancel all scheduled events greater than or equal to the given time\n   * @param  time  The time after which events will be cancel.\n   */\n  cancel(time) {\n    this._event.cancel(time);\n    return this;\n  }\n  /**\n   * Internal function called when the notes should be called\n   * @param time  The time the event occurs\n   */\n  _tick(time) {\n    this.callback(time);\n  }\n  /**\n   * The state of the Loop, either started or stopped.\n   */\n  get state() {\n    return this._event.state;\n  }\n  /**\n   * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.\n   */\n  get progress() {\n    return this._event.progress;\n  }\n  /**\n   * The time between successive callbacks.\n   * @example\n   * const loop = new Tone.Loop();\n   * loop.interval = \"8n\"; // loop every 8n\n   */\n  get interval() {\n    return this._event.loopEnd;\n  }\n  set interval(interval) {\n    this._event.loopEnd = interval;\n  }\n  /**\n   * The playback rate of the loop. The normal playback rate is 1 (no change).\n   * A `playbackRate` of 2 would be twice as fast.\n   */\n  get playbackRate() {\n    return this._event.playbackRate;\n  }\n  set playbackRate(rate) {\n    this._event.playbackRate = rate;\n  }\n  /**\n   * Random variation +/-0.01s to the scheduled time.\n   * Or give it a time value which it will randomize by.\n   */\n  get humanize() {\n    return this._event.humanize;\n  }\n  set humanize(variation) {\n    this._event.humanize = variation;\n  }\n  /**\n   * The probably of the callback being invoked.\n   */\n  get probability() {\n    return this._event.probability;\n  }\n  set probability(prob) {\n    this._event.probability = prob;\n  }\n  /**\n   * Muting the Loop means that no callbacks are invoked.\n   */\n  get mute() {\n    return this._event.mute;\n  }\n  set mute(mute) {\n    this._event.mute = mute;\n  }\n  /**\n   * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n   */\n  get iterations() {\n    if (this._event.loop === true) {\n      return Infinity;\n    } else {\n      return this._event.loop;\n    }\n  }\n  set iterations(iters) {\n    if (iters === Infinity) {\n      this._event.loop = true;\n    } else {\n      this._event.loop = iters;\n    }\n  }\n  dispose() {\n    super.dispose();\n    this._event.dispose();\n    return this;\n  }\n}\n", "import { TicksClass } from \"../core/type/Ticks.js\";\nimport { TransportTimeClass } from \"../core/type/TransportTime.js\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { StateTimeline } from \"../core/util/StateTimeline.js\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck.js\";\nimport { ToneEvent } from \"./ToneEvent.js\";\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]).start(0);\n * Tone.Transport.start();\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Part extends ToneEvent {\n  constructor() {\n    const options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]);\n    super(options);\n    this.name = \"Part\";\n    /**\n     * Tracks the scheduled events\n     */\n    this._state = new StateTimeline(\"stopped\");\n    /**\n     * The events that belong to this part\n     */\n    this._events = new Set();\n    // make sure things are assigned in the right order\n    this._state.increasing = true;\n    // add the events\n    options.events.forEach(event => {\n      if (isArray(event)) {\n        this.add(event[0], event[1]);\n      } else {\n        this.add(event);\n      }\n    });\n  }\n  static getDefaults() {\n    return Object.assign(ToneEvent.getDefaults(), {\n      events: []\n    });\n  }\n  /**\n   * Start the part at the given time.\n   * @param  time    When to start the part.\n   * @param  offset  The offset from the start of the part to begin playing at.\n   */\n  start(time, offset) {\n    const ticks = this.toTicks(time);\n    if (this._state.getValueAtTime(ticks) !== \"started\") {\n      offset = defaultArg(offset, this._loop ? this._loopStart : 0);\n      if (this._loop) {\n        offset = defaultArg(offset, this._loopStart);\n      } else {\n        offset = defaultArg(offset, 0);\n      }\n      const computedOffset = this.toTicks(offset);\n      this._state.add({\n        id: -1,\n        offset: computedOffset,\n        state: \"started\",\n        time: ticks\n      });\n      this._forEach(event => {\n        this._startNote(event, ticks, computedOffset);\n      });\n    }\n    return this;\n  }\n  /**\n   * Start the event in the given event at the correct time given\n   * the ticks and offset and looping.\n   * @param  event\n   * @param  ticks\n   * @param  offset\n   */\n  _startNote(event, ticks, offset) {\n    ticks -= offset;\n    if (this._loop) {\n      if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n        if (event.startOffset < offset) {\n          // start it on the next loop\n          ticks += this._getLoopDuration();\n        }\n        event.start(new TicksClass(this.context, ticks));\n      } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n        event.loop = false;\n        event.start(new TicksClass(this.context, ticks));\n      }\n    } else if (event.startOffset >= offset) {\n      event.start(new TicksClass(this.context, ticks));\n    }\n  }\n  get startOffset() {\n    return this._startOffset;\n  }\n  set startOffset(offset) {\n    this._startOffset = offset;\n    this._forEach(event => {\n      event.startOffset += this._startOffset;\n    });\n  }\n  /**\n   * Stop the part at the given time.\n   * @param  time  When to stop the part.\n   */\n  stop(time) {\n    const ticks = this.toTicks(time);\n    this._state.cancel(ticks);\n    this._state.setStateAtTime(\"stopped\", ticks);\n    this._forEach(event => {\n      event.stop(time);\n    });\n    return this;\n  }\n  /**\n   * Get/Set an Event's value at the given time.\n   * If a value is passed in and no event exists at\n   * the given time, one will be created with that value.\n   * If two events are at the same time, the first one will\n   * be returned.\n   * @example\n   * const part = new Tone.Part();\n   * part.at(\"1m\"); // returns the part at the first measure\n   * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n   * // if an event didn't exist at that time, it will be created.\n   * @param time The time of the event to get or set.\n   * @param value If a value is passed in, the value of the event at the given time will be set to it.\n   */\n  at(time, value) {\n    const timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n    const tickTime = new TicksClass(this.context, 1).toSeconds();\n    const iterator = this._events.values();\n    let result = iterator.next();\n    while (!result.done) {\n      const event = result.value;\n      if (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n        if (isDefined(value)) {\n          event.value = value;\n        }\n        return event;\n      }\n      result = iterator.next();\n    }\n    // if there was no event at that time, create one\n    if (isDefined(value)) {\n      this.add(time, value);\n      // return the new event\n      return this.at(time);\n    } else {\n      return null;\n    }\n  }\n  add(time, value) {\n    // extract the parameters\n    if (time instanceof Object && Reflect.has(time, \"time\")) {\n      value = time;\n      time = value.time;\n    }\n    const ticks = this.toTicks(time);\n    let event;\n    if (value instanceof ToneEvent) {\n      event = value;\n      event.callback = this._tick.bind(this);\n    } else {\n      event = new ToneEvent({\n        callback: this._tick.bind(this),\n        context: this.context,\n        value\n      });\n    }\n    // the start offset\n    event.startOffset = ticks;\n    // initialize the values\n    event.set({\n      humanize: this.humanize,\n      loop: this.loop,\n      loopEnd: this.loopEnd,\n      loopStart: this.loopStart,\n      playbackRate: this.playbackRate,\n      probability: this.probability\n    });\n    this._events.add(event);\n    // start the note if it should be played right now\n    this._restartEvent(event);\n    return this;\n  }\n  /**\n   * Restart the given event\n   */\n  _restartEvent(event) {\n    this._state.forEach(stateEvent => {\n      if (stateEvent.state === \"started\") {\n        this._startNote(event, stateEvent.time, stateEvent.offset);\n      } else {\n        // stop the note\n        event.stop(new TicksClass(this.context, stateEvent.time));\n      }\n    });\n  }\n  remove(time, value) {\n    // extract the parameters\n    if (isObject(time) && time.hasOwnProperty(\"time\")) {\n      value = time;\n      time = value.time;\n    }\n    time = this.toTicks(time);\n    this._events.forEach(event => {\n      if (event.startOffset === time) {\n        if (isUndef(value) || isDefined(value) && event.value === value) {\n          this._events.delete(event);\n          event.dispose();\n        }\n      }\n    });\n    return this;\n  }\n  /**\n   * Remove all of the notes from the group.\n   */\n  clear() {\n    this._forEach(event => event.dispose());\n    this._events.clear();\n    return this;\n  }\n  /**\n   * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n   * @param after The time after which to cancel the scheduled events.\n   */\n  cancel(after) {\n    this._forEach(event => event.cancel(after));\n    this._state.cancel(this.toTicks(after));\n    return this;\n  }\n  /**\n   * Iterate over all of the events\n   */\n  _forEach(callback) {\n    if (this._events) {\n      this._events.forEach(event => {\n        if (event instanceof Part) {\n          event._forEach(callback);\n        } else {\n          callback(event);\n        }\n      });\n    }\n    return this;\n  }\n  /**\n   * Set the attribute of all of the events\n   * @param  attr  the attribute to set\n   * @param  value      The value to set it to\n   */\n  _setAll(attr, value) {\n    this._forEach(event => {\n      event[attr] = value;\n    });\n  }\n  /**\n   * Internal tick method\n   * @param  time  The time of the event in seconds\n   */\n  _tick(time, value) {\n    if (!this.mute) {\n      this.callback(time, value);\n    }\n  }\n  /**\n   * Determine if the event should be currently looping\n   * given the loop boundries of this Part.\n   * @param  event  The event to test\n   */\n  _testLoopBoundries(event) {\n    if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n      event.cancel(0);\n    } else if (event.state === \"stopped\") {\n      // reschedule it if it's stopped\n      this._restartEvent(event);\n    }\n  }\n  get probability() {\n    return this._probability;\n  }\n  set probability(prob) {\n    this._probability = prob;\n    this._setAll(\"probability\", prob);\n  }\n  get humanize() {\n    return this._humanize;\n  }\n  set humanize(variation) {\n    this._humanize = variation;\n    this._setAll(\"humanize\", variation);\n  }\n  /**\n   * If the part should loop or not\n   * between Part.loopStart and\n   * Part.loopEnd. If set to true,\n   * the part will loop indefinitely,\n   * if set to a number greater than 1\n   * it will play a specific number of\n   * times, if set to false, 0 or 1, the\n   * part will only play once.\n   * @example\n   * const part = new Tone.Part();\n   * // loop the part 8 times\n   * part.loop = 8;\n   */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    this._loop = loop;\n    this._forEach(event => {\n      event.loopStart = this.loopStart;\n      event.loopEnd = this.loopEnd;\n      event.loop = loop;\n      this._testLoopBoundries(event);\n    });\n  }\n  /**\n   * The loopEnd point determines when it will\n   * loop if Part.loop is true.\n   */\n  get loopEnd() {\n    return new TicksClass(this.context, this._loopEnd).toSeconds();\n  }\n  set loopEnd(loopEnd) {\n    this._loopEnd = this.toTicks(loopEnd);\n    if (this._loop) {\n      this._forEach(event => {\n        event.loopEnd = loopEnd;\n        this._testLoopBoundries(event);\n      });\n    }\n  }\n  /**\n   * The loopStart point determines when it will\n   * loop if Part.loop is true.\n   */\n  get loopStart() {\n    return new TicksClass(this.context, this._loopStart).toSeconds();\n  }\n  set loopStart(loopStart) {\n    this._loopStart = this.toTicks(loopStart);\n    if (this._loop) {\n      this._forEach(event => {\n        event.loopStart = this.loopStart;\n        this._testLoopBoundries(event);\n      });\n    }\n  }\n  /**\n   * The playback rate of the part\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    this._setAll(\"playbackRate\", rate);\n  }\n  /**\n   * The number of scheduled notes in the part.\n   */\n  get length() {\n    return this._events.size;\n  }\n  dispose() {\n    super.dispose();\n    this.clear();\n    return this;\n  }\n}\n", "import { assert } from \"../core/util/Debug.js\";\nimport { clamp } from \"../core/util/Math.js\";\n/**\n * Start at the first value and go up to the last\n */\nfunction* upPatternGen(numValues) {\n  let index = 0;\n  while (index < numValues) {\n    index = clamp(index, 0, numValues - 1);\n    yield index;\n    index++;\n  }\n}\n/**\n * Start at the last value and go down to 0\n */\nfunction* downPatternGen(numValues) {\n  let index = numValues - 1;\n  while (index >= 0) {\n    index = clamp(index, 0, numValues - 1);\n    yield index;\n    index--;\n  }\n}\n/**\n * Infinitely yield the generator\n */\nfunction* infiniteGen(numValues, gen) {\n  while (true) {\n    yield* gen(numValues);\n  }\n}\n/**\n * Alternate between two generators\n */\nfunction* alternatingGenerator(numValues, directionUp) {\n  let index = directionUp ? 0 : numValues - 1;\n  while (true) {\n    index = clamp(index, 0, numValues - 1);\n    yield index;\n    if (directionUp) {\n      index++;\n      if (index >= numValues - 1) {\n        directionUp = false;\n      }\n    } else {\n      index--;\n      if (index <= 0) {\n        directionUp = true;\n      }\n    }\n  }\n}\n/**\n * Starting from the bottom move up 2, down 1\n */\nfunction* jumpUp(numValues) {\n  let index = 0;\n  let stepIndex = 0;\n  while (index < numValues) {\n    index = clamp(index, 0, numValues - 1);\n    yield index;\n    stepIndex++;\n    index += stepIndex % 2 ? 2 : -1;\n  }\n}\n/**\n * Starting from the top move down 2, up 1\n */\nfunction* jumpDown(numValues) {\n  let index = numValues - 1;\n  let stepIndex = 0;\n  while (index >= 0) {\n    index = clamp(index, 0, numValues - 1);\n    yield index;\n    stepIndex++;\n    index += stepIndex % 2 ? -2 : 1;\n  }\n}\n/**\n * Choose a random index each time\n */\nfunction* randomGen(numValues) {\n  while (true) {\n    const randomIndex = Math.floor(Math.random() * numValues);\n    yield randomIndex;\n  }\n}\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\nfunction* randomOnce(numValues) {\n  // create an array of indices\n  const copy = [];\n  for (let i = 0; i < numValues; i++) {\n    copy.push(i);\n  }\n  while (copy.length > 0) {\n    // random choose an index, and then remove it so it's not chosen again\n    const randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n    const index = clamp(randVal[0], 0, numValues - 1);\n    yield index;\n  }\n}\n/**\n * Randomly choose to walk up or down 1 index\n */\nfunction* randomWalk(numValues) {\n  // randomly choose a starting index\n  let index = Math.floor(Math.random() * numValues);\n  while (true) {\n    if (index === 0) {\n      index++; // at bottom, so force upward step\n    } else if (index === numValues - 1) {\n      index--; // at top, so force downward step\n    } else if (Math.random() < 0.5) {\n      // else choose random downward or upward step\n      index--;\n    } else {\n      index++;\n    }\n    yield index;\n  }\n}\n/**\n * PatternGenerator returns a generator which will yield numbers between 0 and numValues\n * according to the passed in pattern that can be used as indexes into an array of size numValues.\n * @param numValues The size of the array to emit indexes for\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\nexport function* PatternGenerator(numValues, pattern = \"up\", index = 0) {\n  // safeguards\n  assert(numValues >= 1, \"The number of values must be at least one\");\n  switch (pattern) {\n    case \"up\":\n      yield* infiniteGen(numValues, upPatternGen);\n    case \"down\":\n      yield* infiniteGen(numValues, downPatternGen);\n    case \"upDown\":\n      yield* alternatingGenerator(numValues, true);\n    case \"downUp\":\n      yield* alternatingGenerator(numValues, false);\n    case \"alternateUp\":\n      yield* infiniteGen(numValues, jumpUp);\n    case \"alternateDown\":\n      yield* infiniteGen(numValues, jumpDown);\n    case \"random\":\n      yield* randomGen(numValues);\n    case \"randomOnce\":\n      yield* infiniteGen(numValues, randomOnce);\n    case \"randomWalk\":\n      yield* randomWalk(numValues);\n  }\n}\n", "import { Loop } from \"./Loop.js\";\nimport { PatternGenerator } from \"./PatternGenerator.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\n/**\n * Pattern arpeggiates between the given notes\n * in a number of patterns.\n * @example\n * const pattern = new Tone.Pattern((time, note) => {\n * \t// the order of the notes passed in depends on the pattern\n * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n * @category Event\n */\nexport class Pattern extends Loop {\n  constructor() {\n    const options = optionsFromArguments(Pattern.getDefaults(), arguments, [\"callback\", \"values\", \"pattern\"]);\n    super(options);\n    this.name = \"Pattern\";\n    this.callback = options.callback;\n    this._values = options.values;\n    this._pattern = PatternGenerator(options.values.length, options.pattern);\n    this._type = options.pattern;\n  }\n  static getDefaults() {\n    return Object.assign(Loop.getDefaults(), {\n      pattern: \"up\",\n      values: [],\n      callback: noOp\n    });\n  }\n  /**\n   * Internal function called when the notes should be called\n   */\n  _tick(time) {\n    const index = this._pattern.next();\n    this._index = index.value;\n    this._value = this._values[index.value];\n    this.callback(time, this._value);\n  }\n  /**\n   * The array of events.\n   */\n  get values() {\n    return this._values;\n  }\n  set values(val) {\n    this._values = val;\n    // reset the pattern\n    this.pattern = this._type;\n  }\n  /**\n   * The current value of the pattern.\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * The current index of the pattern.\n   */\n  get index() {\n    return this._index;\n  }\n  /**\n   * The pattern type.\n   */\n  get pattern() {\n    return this._type;\n  }\n  set pattern(pattern) {\n    this._type = pattern;\n    this._pattern = PatternGenerator(this._values.length, this._type);\n  }\n}\n", "import { TicksClass } from \"../core/type/Ticks.js\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { isArray, isString } from \"../core/util/TypeCheck.js\";\nimport { Part } from \"./Part.js\";\nimport { ToneEvent } from \"./ToneEvent.js\";\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal Cycles](http://tidalcycles.org/)\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const seq = new Tone.Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\nexport class Sequence extends ToneEvent {\n  constructor() {\n    const options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n    super(options);\n    this.name = \"Sequence\";\n    /**\n     * The object responsible for scheduling all of the events\n     */\n    this._part = new Part({\n      callback: this._seqCallback.bind(this),\n      context: this.context\n    });\n    /**\n     * private reference to all of the sequence proxies\n     */\n    this._events = [];\n    /**\n     * The proxied array\n     */\n    this._eventsArray = [];\n    this._subdivision = this.toTicks(options.subdivision);\n    this.events = options.events;\n    // set all of the values\n    this.loop = options.loop;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.playbackRate = options.playbackRate;\n    this.probability = options.probability;\n    this.humanize = options.humanize;\n    this.mute = options.mute;\n    this.playbackRate = options.playbackRate;\n  }\n  static getDefaults() {\n    return Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n      events: [],\n      loop: true,\n      loopEnd: 0,\n      loopStart: 0,\n      subdivision: \"8n\"\n    });\n  }\n  /**\n   * The internal callback for when an event is invoked\n   */\n  _seqCallback(time, value) {\n    if (value !== null && !this.mute) {\n      this.callback(time, value);\n    }\n  }\n  /**\n   * The sequence\n   */\n  get events() {\n    return this._events;\n  }\n  set events(s) {\n    this.clear();\n    this._eventsArray = s;\n    this._events = this._createSequence(this._eventsArray);\n    this._eventsUpdated();\n  }\n  /**\n   * Start the part at the given time.\n   * @param  time    When to start the part.\n   * @param  offset  The offset index to start at\n   */\n  start(time, offset) {\n    this._part.start(time, offset ? this._indexTime(offset) : offset);\n    return this;\n  }\n  /**\n   * Stop the part at the given time.\n   * @param  time  When to stop the part.\n   */\n  stop(time) {\n    this._part.stop(time);\n    return this;\n  }\n  /**\n   * The subdivision of the sequence. This can only be\n   * set in the constructor. The subdivision is the\n   * interval between successive steps.\n   */\n  get subdivision() {\n    return new TicksClass(this.context, this._subdivision).toSeconds();\n  }\n  /**\n   * Create a sequence proxy which can be monitored to create subsequences\n   */\n  _createSequence(array) {\n    return new Proxy(array, {\n      get: (target, property) => {\n        // property is index in this case\n        return target[property];\n      },\n      set: (target, property, value) => {\n        if (isString(property) && isFinite(parseInt(property, 10))) {\n          if (isArray(value)) {\n            target[property] = this._createSequence(value);\n          } else {\n            target[property] = value;\n          }\n        } else {\n          target[property] = value;\n        }\n        this._eventsUpdated();\n        // return true to accept the changes\n        return true;\n      }\n    });\n  }\n  /**\n   * When the sequence has changed, all of the events need to be recreated\n   */\n  _eventsUpdated() {\n    this._part.clear();\n    this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset);\n    // update the loopEnd\n    this.loopEnd = this.loopEnd;\n  }\n  /**\n   * reschedule all of the events that need to be rescheduled\n   */\n  _rescheduleSequence(sequence, subdivision, startOffset) {\n    sequence.forEach((value, index) => {\n      const eventOffset = index * subdivision + startOffset;\n      if (isArray(value)) {\n        this._rescheduleSequence(value, subdivision / value.length, eventOffset);\n      } else {\n        const startTime = new TicksClass(this.context, eventOffset, \"i\").toSeconds();\n        this._part.add(startTime, value);\n      }\n    });\n  }\n  /**\n   * Get the time of the index given the Sequence's subdivision\n   * @param  index\n   * @return The time of that index\n   */\n  _indexTime(index) {\n    return new TicksClass(this.context, index * this._subdivision + this.startOffset).toSeconds();\n  }\n  /**\n   * Clear all of the events\n   */\n  clear() {\n    this._part.clear();\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._part.dispose();\n    return this;\n  }\n  //-------------------------------------\n  // PROXY CALLS\n  //-------------------------------------\n  get loop() {\n    return this._part.loop;\n  }\n  set loop(l) {\n    this._part.loop = l;\n  }\n  /**\n   * The index at which the sequence should start looping\n   */\n  get loopStart() {\n    return this._loopStart;\n  }\n  set loopStart(index) {\n    this._loopStart = index;\n    this._part.loopStart = this._indexTime(index);\n  }\n  /**\n   * The index at which the sequence should end looping\n   */\n  get loopEnd() {\n    return this._loopEnd;\n  }\n  set loopEnd(index) {\n    this._loopEnd = index;\n    if (index === 0) {\n      this._part.loopEnd = this._indexTime(this._eventsArray.length);\n    } else {\n      this._part.loopEnd = this._indexTime(index);\n    }\n  }\n  get startOffset() {\n    return this._part.startOffset;\n  }\n  set startOffset(start) {\n    this._part.startOffset = start;\n  }\n  get playbackRate() {\n    return this._part.playbackRate;\n  }\n  set playbackRate(rate) {\n    this._part.playbackRate = rate;\n  }\n  get probability() {\n    return this._part.probability;\n  }\n  set probability(prob) {\n    this._part.probability = prob;\n  }\n  get progress() {\n    return this._part.progress;\n  }\n  get humanize() {\n    return this._part.humanize;\n  }\n  set humanize(variation) {\n    this._part.humanize = variation;\n  }\n  /**\n   * The number of scheduled events\n   */\n  get length() {\n    return this._part.length;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { GainToAudio } from \"../../signal/GainToAudio.js\";\nimport { Signal } from \"../../signal/Signal.js\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    super(options);\n    this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n    this._panner = this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n    this._split = this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n    this._g2a = new GainToAudio({\n      context: this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n    this.a = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n    this.b = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [this.a, this.b];\n    this.fade = new Signal({\n      context: this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(this, \"fade\");\n    this.context.getConstant(1).connect(this._panner);\n    this._panner.connect(this._split);\n    // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n    this._panner.channelCount = 1;\n    this._panner.channelCountMode = \"explicit\";\n    connect(this._split, this.a.gain, 0);\n    connect(this._split, this.b.gain, 1);\n    this.fade.chain(this._g2a, this._panner.pan);\n    this.a.connect(this.output);\n    this.b.connect(this.output);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      fade: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.a.dispose();\n    this.b.dispose();\n    this.output.dispose();\n    this.fade.dispose();\n    this._g2a.dispose();\n    this._panner.disconnect();\n    this._split.disconnect();\n    return this;\n  }\n}\n", "import { CrossFade } from \"../component/channel/CrossFade.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport class Effect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n    this._dryWet = new CrossFade({\n      context: this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n    this.wet = this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n    this.effectSend = new Gain({\n      context: this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n    this.effectReturn = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect input node\n     */\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect output\n     */\n    this.output = this._dryWet;\n    // connections\n    this.input.fan(this._dryWet.a, this.effectSend);\n    this.effectReturn.connect(this._dryWet.b);\n    this.wet.setValueAtTime(options.wet, 0);\n    this._internalChannels = [this.effectReturn, this.effectSend];\n    readOnly(this, \"wet\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  /**\n   * chains the effect in between the effectSend and effectReturn\n   */\n  connectEffect(effect) {\n    // add it to the internal channels\n    this._internalChannels.push(effect);\n    this.effectSend.chain(effect, this.effectReturn);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._dryWet.dispose();\n    this.effectSend.dispose();\n    this.effectReturn.dispose();\n    this.wet.dispose();\n    return this;\n  }\n}\n", "import { Effect } from \"../effect/Effect.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Base class for LFO-based effects.\n */\nexport class LFOEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"LFOEffect\";\n    this._lfo = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    this.depth = this._lfo.amplitude;\n    this.frequency = this._lfo.frequency;\n    this.type = options.type;\n    readOnly(this, [\"frequency\", \"depth\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 1,\n      type: \"sine\",\n      depth: 1\n    });\n  }\n  /**\n   * Start the effect.\n   */\n  start(time) {\n    this._lfo.start(time);\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n  stop(time) {\n    this._lfo.stop(time);\n    return this;\n  }\n  /**\n   * Sync the filter to the transport.\n   * @see {@link LFO.sync}\n   */\n  sync() {\n    this._lfo.sync();\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n  unsync() {\n    this._lfo.unsync();\n    return this;\n  }\n  /**\n   * The type of the LFO's oscillator.\n   * @see {@link Oscillator.type}\n   * @example\n   * const autoFilter = new Tone.AutoFilter().start().toDestination();\n   * const noise = new Tone.Noise().start().connect(autoFilter);\n   * autoFilter.type = \"square\";\n   */\n  get type() {\n    return this._lfo.type;\n  }\n  set type(type) {\n    this._lfo.type = type;\n  }\n  dispose() {\n    super.dispose();\n    this._lfo.dispose();\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n}\n", "import { Filter } from \"../component/filter/Filter.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFOEffect } from \"./LFOEffect.js\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect {\n  constructor() {\n    const options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    super(options);\n    this.name = \"AutoFilter\";\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    }));\n    // connections\n    this.connectEffect(this.filter);\n    this._lfo.connect(this.filter.frequency);\n    this.octaves = options.octaves;\n    this.baseFrequency = options.baseFrequency;\n  }\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      baseFrequency: 200,\n      octaves: 2.6,\n      filter: {\n        type: \"lowpass\",\n        rolloff: -12,\n        Q: 1\n      }\n    });\n  }\n  /**\n   * The minimum value of the filter's cutoff frequency.\n   */\n  get baseFrequency() {\n    return this._lfo.min;\n  }\n  set baseFrequency(freq) {\n    this._lfo.min = this.toFrequency(freq);\n    // and set the max\n    this.octaves = this._octaves;\n  }\n  /**\n   * The maximum value of the filter's cutoff frequency.\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(oct) {\n    this._octaves = oct;\n    this._lfo.max = this._lfo.min * Math.pow(2, oct);\n  }\n  dispose() {\n    super.dispose();\n    this.filter.dispose();\n    return this;\n  }\n}\n", "import { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\nexport class Panner extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    super(options);\n    this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n    this._panner = this.context.createStereoPanner();\n    this.input = this._panner;\n    this.output = this._panner;\n    this.pan = new Param({\n      context: this.context,\n      param: this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    });\n    // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n    this._panner.channelCount = options.channelCount;\n    this._panner.channelCountMode = \"explicit\";\n    // initial value\n    readOnly(this, \"pan\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      channelCount: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._panner.disconnect();\n    this.pan.dispose();\n    return this;\n  }\n}\n", "import { Panner } from \"../component/channel/Panner.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFOEffect } from \"./LFOEffect.js\";\n/**\n * AutoPanner is a {@link Panner} with an {@link LFO} connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect {\n  constructor() {\n    const options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n    super(options);\n    this.name = \"AutoPanner\";\n    this._panner = new Panner({\n      context: this.context,\n      channelCount: options.channelCount\n    });\n    // connections\n    this.connectEffect(this._panner);\n    this._lfo.connect(this._panner.pan);\n    this._lfo.min = -1;\n    this._lfo.max = 1;\n  }\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      channelCount: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._panner.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter.js\";\nimport { Abs } from \"../../signal/Abs.js\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    super(options);\n    this.name = \"Follower\";\n    this._abs = this.input = new Abs({\n      context: this.context\n    });\n    this._lowpass = this.output = new OnePoleFilter({\n      context: this.context,\n      frequency: 1 / this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n    this._abs.connect(this._lowpass);\n    this._smoothing = options.smoothing;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.05\n    });\n  }\n  /**\n   * The amount of time it takes a value change to arrive at the updated value.\n   */\n  get smoothing() {\n    return this._smoothing;\n  }\n  set smoothing(smoothing) {\n    this._smoothing = smoothing;\n    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n  }\n  dispose() {\n    super.dispose();\n    this._abs.dispose();\n    this._lowpass.dispose();\n    return this;\n  }\n}\n", "import { Effect } from \"./Effect.js\";\nimport { Filter } from \"../component/filter/Filter.js\";\nimport { Follower } from \"../component/analysis/Follower.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions.js\";\nimport { ScaleExp } from \"../signal/ScaleExp.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * AutoWah connects a {@link Follower} to a {@link Filter}.\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect {\n  constructor() {\n    const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    super(options);\n    this.name = \"AutoWah\";\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.follower\n    });\n    this._sweepRange = new ScaleExp({\n      context: this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this._inputBoost = new Gain({\n      context: this.context\n    });\n    this._bandpass = new Filter({\n      context: this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    this._peaking = new Filter({\n      context: this.context,\n      type: \"peaking\"\n    });\n    this._peaking.gain.value = options.gain;\n    this.gain = this._peaking.gain;\n    this.Q = this._bandpass.Q;\n    // the control signal path\n    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n    this._sweepRange.connect(this._bandpass.frequency);\n    this._sweepRange.connect(this._peaking.frequency);\n    // the filtered path\n    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n    // set the initial value\n    this._setSweepRange();\n    this.sensitivity = options.sensitivity;\n    readOnly(this, [\"gain\", \"Q\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: 0.2\n    });\n  }\n  /**\n   * The number of octaves that the filter will sweep above the baseFrequency.\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(octaves) {\n    this._octaves = octaves;\n    this._setSweepRange();\n  }\n  /**\n   * The follower's smoothing time\n   */\n  get follower() {\n    return this._follower.smoothing;\n  }\n  set follower(follower) {\n    this._follower.smoothing = follower;\n  }\n  /**\n   * The base frequency from which the sweep will start from.\n   */\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n  set baseFrequency(baseFreq) {\n    this._baseFrequency = this.toFrequency(baseFreq);\n    this._setSweepRange();\n  }\n  /**\n   * The sensitivity to control how responsive to the input signal the filter is.\n   */\n  get sensitivity() {\n    return gainToDb(1 / this._inputBoost.gain.value);\n  }\n  set sensitivity(sensitivity) {\n    this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n  }\n  /**\n   * sets the sweep range of the scaler\n   */\n  _setSweepRange() {\n    this._sweepRange.min = this._baseFrequency;\n    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n  }\n  dispose() {\n    super.dispose();\n    this._follower.dispose();\n    this._sweepRange.dispose();\n    this._bandpass.dispose();\n    this._peaking.dispose();\n    this._inputBoost.dispose();\n    return this;\n  }\n}\n", "import \"../core/worklet/SingleIOProcessor.worklet.js\";\nimport { registerProcessor } from \"../core/worklet/WorkletGlobalScope.js\";\nexport const workletName = \"bit-crusher\";\nexport const bitCrusherWorklet = /* javascript */`\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n`;\nregisterProcessor(workletName, bitCrusherWorklet);\n", "import { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet.js\";\nimport { Effect } from \"./Effect.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { connectSeries } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { workletName } from \"./BitCrusher.worklet.js\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\nexport class BitCrusher extends Effect {\n  constructor() {\n    const options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n    super(options);\n    this.name = \"BitCrusher\";\n    this._bitCrusherWorklet = new BitCrusherWorklet({\n      context: this.context,\n      bits: options.bits\n    });\n    // connect it up\n    this.connectEffect(this._bitCrusherWorklet);\n    this.bits = this._bitCrusherWorklet.bits;\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      bits: 4\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._bitCrusherWorklet.dispose();\n    return this;\n  }\n}\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\nclass BitCrusherWorklet extends ToneAudioWorklet {\n  constructor() {\n    const options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n    super(options);\n    this.name = \"BitCrusherWorklet\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    this.bits = new Param({\n      context: this.context,\n      value: options.bits,\n      units: \"positive\",\n      minValue: 1,\n      maxValue: 16,\n      param: this._dummyParam,\n      swappable: true\n    });\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioWorklet.getDefaults(), {\n      bits: 12\n    });\n  }\n  _audioWorkletName() {\n    return workletName;\n  }\n  onReady(node) {\n    connectSeries(this.input, node, this.output);\n    const bits = node.parameters.get(\"bits\");\n    this.bits.setParam(bits);\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.bits.dispose();\n    return this;\n  }\n}\n", "import { Effect } from \"./Effect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { WaveShaper } from \"../signal/WaveShaper.js\";\nimport { assert } from \"../core/util/Debug.js\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport class Chebyshev extends Effect {\n  constructor() {\n    const options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    super(options);\n    this.name = \"Chebyshev\";\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._order = options.order;\n    this.connectEffect(this._shaper);\n    this.order = options.order;\n    this.oversample = options.oversample;\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      order: 1,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * get the coefficient for that degree\n   * @param  x the x value\n   * @param  degree\n   * @param  memo memoize the computed value. this speeds up computation greatly.\n   */\n  _getCoefficient(x, degree, memo) {\n    if (memo.has(degree)) {\n      return memo.get(degree);\n    } else if (degree === 0) {\n      memo.set(degree, 0);\n    } else if (degree === 1) {\n      memo.set(degree, x);\n    } else {\n      memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n    }\n    return memo.get(degree);\n  }\n  /**\n   * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n   * signal through a Tone.WaveShaper. Must be an integer. The equations are in the form:\n   * ```\n   * order 2: 2x^2 + 1\n   * order 3: 4x^3 + 3x\n   * ```\n   * @min 1\n   * @max 100\n   */\n  get order() {\n    return this._order;\n  }\n  set order(order) {\n    assert(Number.isInteger(order), \"'order' must be an integer\");\n    this._order = order;\n    this._shaper.setMap(x => {\n      return this._getCoefficient(x, order, new Map());\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n  get oversample() {\n    return this._shaper.oversample;\n  }\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n  dispose() {\n    super.dispose();\n    this._shaper.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    super(options);\n    this.name = \"Split\";\n    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n    this._internalChannels = [this._splitter];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._splitter.disconnect();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Merge brings multiple mono input channels into a single multichannel output channel.\n *\n * @example\n * const merge = new Tone.Merge().toDestination();\n * // routing a sine tone in the left channel\n * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();\n * // and noise in the right channel\n * const noise = new Tone.Noise().connect(merge, 0, 1).start();;\n * @category Component\n */\nexport class Merge extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Merge.getDefaults(), arguments, [\"channels\"]);\n    super(options);\n    this.name = \"Merge\";\n    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._merger.disconnect();\n    return this;\n  }\n}\n", "import { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode.js\";\nimport { CrossFade } from \"../component/channel/CrossFade.js\";\nimport { Split } from \"../component/channel/Split.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Merge } from \"../component/channel/Merge.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Base class for Stereo effects.\n */\nexport class StereoEffect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"StereoEffect\";\n    this.input = new Gain({\n      context: this.context\n    });\n    // force mono sources to be stereo\n    this.input.channelCount = 2;\n    this.input.channelCountMode = \"explicit\";\n    this._dryWet = this.output = new CrossFade({\n      context: this.context,\n      fade: options.wet\n    });\n    this.wet = this._dryWet.fade;\n    this._split = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._merge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n    // connections\n    this.input.connect(this._split);\n    // dry wet connections\n    this.input.connect(this._dryWet.a);\n    this._merge.connect(this._dryWet.b);\n    readOnly(this, [\"wet\"]);\n  }\n  /**\n   * Connect the left part of the effect\n   */\n  connectEffectLeft(...nodes) {\n    this._split.connect(nodes[0], 0, 0);\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 0);\n  }\n  /**\n   * Connect the right part of the effect\n   */\n  connectEffectRight(...nodes) {\n    this._split.connect(nodes[0], 1, 0);\n    connectSeries(...nodes);\n    connect(nodes[nodes.length - 1], this._merge, 0, 1);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._dryWet.dispose();\n    this._split.dispose();\n    this._merge.dispose();\n    return this;\n  }\n}\n", "import { StereoEffect } from \"./StereoEffect.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Split } from \"../component/channel/Split.js\";\nimport { Merge } from \"../component/channel/Merge.js\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect extends StereoEffect {\n  constructor(options) {\n    super(options);\n    this.feedback = new Signal({\n      context: this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    this._feedbackL = new Gain({\n      context: this.context\n    });\n    this._feedbackR = new Gain({\n      context: this.context\n    });\n    this._feedbackSplit = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._feedbackMerge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n    this._merge.connect(this._feedbackSplit);\n    this._feedbackMerge.connect(this._split);\n    // the left output connected to the left input\n    this._feedbackSplit.connect(this._feedbackL, 0, 0);\n    this._feedbackL.connect(this._feedbackMerge, 0, 0);\n    // the right output connected to the right input\n    this._feedbackSplit.connect(this._feedbackR, 1, 0);\n    this._feedbackR.connect(this._feedbackMerge, 0, 1);\n    // the feedback control\n    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n    readOnly(this, [\"feedback\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.feedback.dispose();\n    this._feedbackL.dispose();\n    this._feedbackR.dispose();\n    this._feedbackSplit.dispose();\n    this._feedbackMerge.dispose();\n    return this;\n  }\n}\n", "import { StereoFeedbackEffect } from \"../effect/StereoFeedbackEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Delay } from \"../core/context/Delay.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Chorus is a stereo chorus effect composed of a left and right delay with an {@link LFO} applied to the delayTime of each channel.\n * When {@link feedback} is set to a value larger than 0, you also get Flanger-type effects.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n * Read more on the chorus effect on [Sound On Sound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n *\n * @example\n * const chorus = new Tone.Chorus(4, 2.5, 0.5).toDestination().start();\n * const synth = new Tone.PolySynth().connect(chorus);\n * synth.triggerAttackRelease([\"C3\", \"E3\", \"G3\"], \"8n\");\n *\n * @category Effect\n */\nexport class Chorus extends StereoFeedbackEffect {\n  constructor() {\n    const options = optionsFromArguments(Chorus.getDefaults(), arguments, [\"frequency\", \"delayTime\", \"depth\"]);\n    super(options);\n    this.name = \"Chorus\";\n    this._depth = options.depth;\n    this._delayTime = options.delayTime / 1000;\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._delayNodeL = new Delay({\n      context: this.context\n    });\n    this._delayNodeR = new Delay({\n      context: this.context\n    });\n    this.frequency = this._lfoL.frequency;\n    readOnly(this, [\"frequency\"]);\n    // have one LFO frequency control the other\n    this._lfoL.frequency.connect(this._lfoR.frequency);\n    // connections\n    this.connectEffectLeft(this._delayNodeL);\n    this.connectEffectRight(this._delayNodeR);\n    // lfo setup\n    this._lfoL.connect(this._delayNodeL.delayTime);\n    this._lfoR.connect(this._delayNodeR.delayTime);\n    // set the initial values\n    this.depth = this._depth;\n    this.type = options.type;\n    this.spread = options.spread;\n  }\n  static getDefaults() {\n    return Object.assign(StereoFeedbackEffect.getDefaults(), {\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: \"sine\",\n      spread: 180,\n      feedback: 0,\n      wet: 0.5\n    });\n  }\n  /**\n   * The depth of the effect. A depth of 1 makes the delayTime\n   * modulate between 0 and 2*delayTime (centered around the delayTime).\n   */\n  get depth() {\n    return this._depth;\n  }\n  set depth(depth) {\n    this._depth = depth;\n    const deviation = this._delayTime * depth;\n    this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoL.max = this._delayTime + deviation;\n    this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n    this._lfoR.max = this._delayTime + deviation;\n  }\n  /**\n   * The delayTime in milliseconds of the chorus. A larger delayTime\n   * will give a more pronounced effect. Nominal range a delayTime\n   * is between 2 and 20ms.\n   */\n  get delayTime() {\n    return this._delayTime * 1000;\n  }\n  set delayTime(delayTime) {\n    this._delayTime = delayTime / 1000;\n    this.depth = this._depth;\n  }\n  /**\n   * The oscillator type of the LFO.\n   */\n  get type() {\n    return this._lfoL.type;\n  }\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase;\n  }\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n  /**\n   * Start the effect.\n   */\n  start(time) {\n    this._lfoL.start(time);\n    this._lfoR.start(time);\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n  stop(time) {\n    this._lfoL.stop(time);\n    this._lfoR.stop(time);\n    return this;\n  }\n  /**\n   * Sync the filter to the transport.\n   * @see {@link LFO.sync}\n   */\n  sync() {\n    this._lfoL.sync();\n    this._lfoR.sync();\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n  unsync() {\n    this._lfoL.unsync();\n    this._lfoR.unsync();\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._lfoL.dispose();\n    this._lfoR.dispose();\n    this._delayNodeL.dispose();\n    this._delayNodeR.dispose();\n    this.frequency.dispose();\n    return this;\n  }\n}\n", "import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { WaveShaper } from \"../signal/WaveShaper.js\";\nimport { Effect } from \"./Effect.js\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n * Read more about distortion on [Wikipedia] (https://en.wikipedia.org/wiki/Distortion_(music)).\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\nexport class Distortion extends Effect {\n  constructor() {\n    const options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    super(options);\n    this.name = \"Distortion\";\n    this._shaper = new WaveShaper({\n      context: this.context,\n      length: 4096\n    });\n    this._distortion = options.distortion;\n    this.connectEffect(this._shaper);\n    this.distortion = options.distortion;\n    this.oversample = options.oversample;\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      distortion: 0.4,\n      oversample: \"none\"\n    });\n  }\n  /**\n   * The amount of distortion. Nominal range is between 0 and 1.\n   */\n  get distortion() {\n    return this._distortion;\n  }\n  set distortion(amount) {\n    this._distortion = amount;\n    const k = amount * 100;\n    const deg = Math.PI / 180;\n    this._shaper.setMap(x => {\n      if (Math.abs(x) < 0.001) {\n        // should output 0 when input is 0\n        return 0;\n      } else {\n        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n      }\n    });\n  }\n  /**\n   * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n   */\n  get oversample() {\n    return this._shaper.oversample;\n  }\n  set oversample(oversampling) {\n    this._shaper.oversample = oversampling;\n  }\n  dispose() {\n    super.dispose();\n    this._shaper.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../core/context/Gain.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Effect } from \"./Effect.js\";\n/**\n * FeedbackEffect provides a loop between an audio source and its own output.\n * This is a base-class for feedback effects.\n */\nexport class FeedbackEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"FeedbackEffect\";\n    this._feedbackGain = new Gain({\n      context: this.context,\n      gain: options.feedback,\n      units: \"normalRange\"\n    });\n    this.feedback = this._feedbackGain.gain;\n    readOnly(this, \"feedback\");\n    // the feedback loop\n    this.effectReturn.chain(this._feedbackGain, this.effectSend);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      feedback: 0.125\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._feedbackGain.dispose();\n    this.feedback.dispose();\n    return this;\n  }\n}\n", "import { Delay } from \"../core/context/Delay.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { FeedbackEffect } from \"./FeedbackEffect.js\";\n/**\n * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.\n *\n * @param delayTime The delay applied to the incoming signal.\n * @param feedback The amount of the effected signal which is fed back through the delay.\n * @example\n * const feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toDestination();\n * const tom = new Tone.MembraneSynth({\n * \toctaves: 4,\n * \tpitchDecay: 0.1\n * }).connect(feedbackDelay);\n * tom.triggerAttackRelease(\"A2\", \"32n\");\n * @category Effect\n */\nexport class FeedbackDelay extends FeedbackEffect {\n  constructor() {\n    const options = optionsFromArguments(FeedbackDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    super(options);\n    this.name = \"FeedbackDelay\";\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: options.delayTime,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = this._delayNode.delayTime;\n    // connect it up\n    this.connectEffect(this._delayNode);\n    readOnly(this, \"delayTime\");\n  }\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._delayNode.dispose();\n    this.delayTime.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\nexport class PhaseShiftAllpass extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"PhaseShiftAllpass\";\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The phase shifted output\n     */\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The PhaseShifted allpass output\n     */\n    this.offset90 = new Gain({\n      context: this.context\n    });\n    const allpassBank1Values = [0.6923878, 0.9360654322959, 0.988229522686, 0.9987488452737];\n    const allpassBank2Values = [0.4021921162426, 0.856171088242, 0.9722909545651, 0.9952884791278];\n    this._bank0 = this._createAllPassFilterBank(allpassBank1Values);\n    this._bank1 = this._createAllPassFilterBank(allpassBank2Values);\n    this._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]);\n    // connect Allpass filter banks\n    connectSeries(this.input, ...this._bank0, this._oneSampleDelay, this.output);\n    connectSeries(this.input, ...this._bank1, this.offset90);\n  }\n  /**\n   * Create all of the IIR filters from an array of values using the coefficient calculation.\n   */\n  _createAllPassFilterBank(bankValues) {\n    const nodes = bankValues.map(value => {\n      const coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n      return this.context.createIIRFilter(coefficients[0], coefficients[1]);\n    });\n    return nodes;\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n    this.offset90.dispose();\n    this._bank0.forEach(f => f.disconnect());\n    this._bank1.forEach(f => f.disconnect());\n    this._oneSampleDelay.disconnect();\n    return this;\n  }\n}\n", "import { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Effect } from \"../effect/Effect.js\";\nimport { Add } from \"../signal/Add.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { Negate } from \"../signal/Negate.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { Oscillator } from \"../source/oscillator/Oscillator.js\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode.js\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\nexport class FrequencyShifter extends Effect {\n  constructor() {\n    const options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    super(options);\n    this.name = \"FrequencyShifter\";\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -this.context.sampleRate / 2,\n      maxValue: this.context.sampleRate / 2\n    });\n    this._sine = new ToneOscillatorNode({\n      context: this.context,\n      type: \"sine\"\n    });\n    this._cosine = new Oscillator({\n      context: this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    this._sineMultiply = new Multiply({\n      context: this.context\n    });\n    this._cosineMultiply = new Multiply({\n      context: this.context\n    });\n    this._negate = new Negate({\n      context: this.context\n    });\n    this._add = new Add({\n      context: this.context\n    });\n    this._phaseShifter = new PhaseShiftAllpass({\n      context: this.context\n    });\n    this.effectSend.connect(this._phaseShifter);\n    // connect the carrier frequency signal to the two oscillators\n    this.frequency.fan(this._sine.frequency, this._cosine.frequency);\n    this._phaseShifter.offset90.connect(this._cosineMultiply);\n    this._cosine.connect(this._cosineMultiply.factor);\n    this._phaseShifter.connect(this._sineMultiply);\n    this._sine.connect(this._sineMultiply.factor);\n    this._sineMultiply.connect(this._negate);\n    this._cosineMultiply.connect(this._add);\n    this._negate.connect(this._add.addend);\n    this._add.connect(this.effectReturn);\n    // start the oscillators at the same time\n    const now = this.immediate();\n    this._sine.start(now);\n    this._cosine.start(now);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 0\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this._add.dispose();\n    this._cosine.dispose();\n    this._cosineMultiply.dispose();\n    this._negate.dispose();\n    this._phaseShifter.dispose();\n    this._sine.dispose();\n    this._sineMultiply.dispose();\n    return this;\n  }\n}\n", "import { StereoEffect } from \"./StereoEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter.js\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using {@link Reverb}.\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect {\n  constructor() {\n    const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    super(options);\n    this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n    this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n    this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n    this._allpassFiltersR = [];\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    // make the allpass filters on the right\n    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n      const allpassL = this.context.createBiquadFilter();\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    });\n    // make the allpass filters on the left\n    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n      const allpassR = this.context.createBiquadFilter();\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    });\n    // make the comb filters\n    this._combFilters = combFilterTunings.map((delayTime, index) => {\n      const lfpf = new LowpassCombFilter({\n        context: this.context,\n        dampening: options.dampening,\n        delayTime\n      });\n      if (index < combFilterTunings.length / 2) {\n        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n      } else {\n        this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n      }\n      this.roomSize.connect(lfpf.resonance);\n      return lfpf;\n    });\n    readOnly(this, [\"roomSize\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.7,\n      dampening: 3000\n    });\n  }\n  /**\n   * The amount of dampening of the reverberant signal.\n   */\n  get dampening() {\n    return this._combFilters[0].dampening;\n  }\n  set dampening(d) {\n    this._combFilters.forEach(c => c.dampening = d);\n  }\n  dispose() {\n    super.dispose();\n    this._allpassFiltersL.forEach(al => al.disconnect());\n    this._allpassFiltersR.forEach(ar => ar.disconnect());\n    this._combFilters.forEach(cf => cf.dispose());\n    this.roomSize.dispose();\n    return this;\n  }\n}\n", "import { StereoEffect } from \"./StereoEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Scale } from \"../signal/Scale.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four {@link FeedbackCombFilter}.\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using {@link Reverb}.\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\nexport class JCReverb extends StereoEffect {\n  constructor() {\n    const options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    super(options);\n    this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n    this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n    this._feedbackCombFilters = [];\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    this._scaleRoomSize = new Scale({\n      context: this.context,\n      min: -0.733,\n      max: 0.197\n    });\n    // make the allpass filters\n    this._allpassFilters = allpassFilterFreqs.map(freq => {\n      const allpass = this.context.createBiquadFilter();\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    });\n    // and the comb filters\n    this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n      const fbcf = new FeedbackCombFilter({\n        context: this.context,\n        delayTime\n      });\n      this._scaleRoomSize.connect(fbcf.resonance);\n      fbcf.resonance.value = combFilterResonances[index];\n      if (index < combFilterDelayTimes.length / 2) {\n        this.connectEffectLeft(...this._allpassFilters, fbcf);\n      } else {\n        this.connectEffectRight(...this._allpassFilters, fbcf);\n      }\n      return fbcf;\n    });\n    // chain the allpass filters together\n    this.roomSize.connect(this._scaleRoomSize);\n    readOnly(this, [\"roomSize\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._allpassFilters.forEach(apf => apf.disconnect());\n    this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n    this.roomSize.dispose();\n    this._scaleRoomSize.dispose();\n    return this;\n  }\n}\n", "import { StereoFeedbackEffect } from \"./StereoFeedbackEffect.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Just like a {@link StereoFeedbackEffect}, but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect extends StereoFeedbackEffect {\n  constructor(options) {\n    super(options);\n    // the left output connected to the right input\n    this._feedbackL.disconnect();\n    this._feedbackL.connect(this._feedbackMerge, 0, 1);\n    // the left output connected to the right input\n    this._feedbackR.disconnect();\n    this._feedbackR.connect(this._feedbackMerge, 0, 0);\n    readOnly(this, [\"feedback\"]);\n  }\n}\n", "import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Delay } from \"../core/context/Delay.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect {\n  constructor() {\n    const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    super(options);\n    this.name = \"PingPongDelay\";\n    this._leftDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightPreDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = new Signal({\n      context: this.context,\n      units: \"time\",\n      value: options.delayTime\n    });\n    // connect it up\n    this.connectEffectLeft(this._leftDelay);\n    this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n    // rearranged the feedback to be after the rightPreDelay\n    this._feedbackL.disconnect();\n    this._feedbackL.connect(this._rightDelay);\n    readOnly(this, [\"delayTime\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._leftDelay.dispose();\n    this._rightDelay.dispose();\n    this._rightPreDelay.dispose();\n    this.delayTime.dispose();\n    return this;\n  }\n}\n", "import { FeedbackEffect } from \"./FeedbackEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Delay } from \"../core/context/Delay.js\";\nimport { CrossFade } from \"../component/channel/CrossFade.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions.js\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect {\n  constructor() {\n    const options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    super(options);\n    this.name = \"PitchShift\";\n    this._frequency = new Signal({\n      context: this.context\n    });\n    this._delayA = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoA = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(this._delayA.delayTime);\n    this._delayB = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoB = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(this._delayB.delayTime);\n    this._crossFade = new CrossFade({\n      context: this.context\n    });\n    this._crossFadeLFO = new LFO({\n      context: this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(this._crossFade.fade);\n    this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: this.context\n    });\n    this.delayTime = this._feedbackDelay.delayTime;\n    readOnly(this, \"delayTime\");\n    this._pitch = options.pitch;\n    this._windowSize = options.windowSize;\n    // connect the two delay lines up\n    this._delayA.connect(this._crossFade.a);\n    this._delayB.connect(this._crossFade.b);\n    // connect the frequency\n    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n    // route the input\n    this.effectSend.fan(this._delayA, this._delayB);\n    this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n    // start the LFOs at the same time\n    const now = this.now();\n    this._lfoA.start(now);\n    this._lfoB.start(now);\n    this._crossFadeLFO.start(now);\n    // set the initial value\n    this.windowSize = this._windowSize;\n  }\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n  }\n  /**\n   * Repitch the incoming signal by some interval (measured in semi-tones).\n   * @example\n   * const pitchShift = new Tone.PitchShift().toDestination();\n   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n   * pitchShift.pitch = -12; // down one octave\n   * pitchShift.pitch = 7; // up a fifth\n   */\n  get pitch() {\n    return this._pitch;\n  }\n  set pitch(interval) {\n    this._pitch = interval;\n    let factor = 0;\n    if (interval < 0) {\n      this._lfoA.min = 0;\n      this._lfoA.max = this._windowSize;\n      this._lfoB.min = 0;\n      this._lfoB.max = this._windowSize;\n      factor = intervalToFrequencyRatio(interval - 1) + 1;\n    } else {\n      this._lfoA.min = this._windowSize;\n      this._lfoA.max = 0;\n      this._lfoB.min = this._windowSize;\n      this._lfoB.max = 0;\n      factor = intervalToFrequencyRatio(interval) - 1;\n    }\n    this._frequency.value = factor * (1.2 / this._windowSize);\n  }\n  /**\n   * The window size corresponds roughly to the sample length in a looping sampler.\n   * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n   * signal, but larger values will result in smoother pitch shifting for larger intervals.\n   * A nominal range of 0.03 to 0.1 is recommended.\n   */\n  get windowSize() {\n    return this._windowSize;\n  }\n  set windowSize(size) {\n    this._windowSize = this.toSeconds(size);\n    this.pitch = this._pitch;\n  }\n  dispose() {\n    super.dispose();\n    this._frequency.dispose();\n    this._delayA.dispose();\n    this._delayB.dispose();\n    this._lfoA.dispose();\n    this._lfoB.dispose();\n    this._crossFade.dispose();\n    this._crossFadeLFO.dispose();\n    this._feedbackDelay.dispose();\n    return this;\n  }\n}\n", "import { StereoEffect } from \"./StereoEffect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect {\n  constructor() {\n    const options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    super(options);\n    this.name = \"Phaser\";\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this.Q = new Signal({\n      context: this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    this._filtersL = this._makeFilters(options.stages, this._lfoL);\n    this._filtersR = this._makeFilters(options.stages, this._lfoR);\n    this.frequency = this._lfoL.frequency;\n    this.frequency.value = options.frequency;\n    // connect them up\n    this.connectEffectLeft(...this._filtersL);\n    this.connectEffectRight(...this._filtersR);\n    // control the frequency with one LFO\n    this._lfoL.frequency.connect(this._lfoR.frequency);\n    // set the options\n    this.baseFrequency = options.baseFrequency;\n    this.octaves = options.octaves;\n    // start the lfo\n    this._lfoL.start();\n    this._lfoR.start();\n    readOnly(this, [\"frequency\", \"Q\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    });\n  }\n  _makeFilters(stages, connectToFreq) {\n    const filters = [];\n    // make all the filters\n    for (let i = 0; i < stages; i++) {\n      const filter = this.context.createBiquadFilter();\n      filter.type = \"allpass\";\n      this.Q.connect(filter.Q);\n      connectToFreq.connect(filter.frequency);\n      filters.push(filter);\n    }\n    return filters;\n  }\n  /**\n   * The number of octaves the phase goes above the baseFrequency\n   */\n  get octaves() {\n    return this._octaves;\n  }\n  set octaves(octaves) {\n    this._octaves = octaves;\n    const max = this._baseFrequency * Math.pow(2, octaves);\n    this._lfoL.max = max;\n    this._lfoR.max = max;\n  }\n  /**\n   * The the base frequency of the filters.\n   */\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n  set baseFrequency(freq) {\n    this._baseFrequency = this.toFrequency(freq);\n    this._lfoL.min = this._baseFrequency;\n    this._lfoR.min = this._baseFrequency;\n    this.octaves = this._octaves;\n  }\n  dispose() {\n    super.dispose();\n    this.Q.dispose();\n    this._lfoL.dispose();\n    this._lfoR.dispose();\n    this._filtersL.forEach(f => f.disconnect());\n    this._filtersR.forEach(f => f.disconnect());\n    this.frequency.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { Merge } from \"../component/channel/Merge.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Noise } from \"../source/Noise.js\";\nimport { Effect } from \"./Effect.js\";\nimport { OfflineContext } from \"../core/context/OfflineContext.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { assertRange } from \"../core/util/Debug.js\";\n/**\n * Simple convolution created with decaying noise.\n * Generates an Impulse Response Buffer\n * with Tone.Offline then feeds the IR into ConvolverNode.\n * The impulse response generation is async, so you have\n * to wait until {@link ready} resolves before it will make a sound.\n *\n * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).\n * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.\n *\n * @category Effect\n */\nexport class Reverb extends Effect {\n  constructor() {\n    const options = optionsFromArguments(Reverb.getDefaults(), arguments, [\"decay\"]);\n    super(options);\n    this.name = \"Reverb\";\n    /**\n     * Convolver node\n     */\n    this._convolver = this.context.createConvolver();\n    /**\n     * Resolves when the reverb buffer is generated. Whenever either {@link decay}\n     * or {@link preDelay} are set, you have to wait until {@link ready} resolves\n     * before the IR is generated with the latest values.\n     */\n    this.ready = Promise.resolve();\n    this._decay = options.decay;\n    this._preDelay = options.preDelay;\n    this.generate();\n    this.connectEffect(this._convolver);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      decay: 1.5,\n      preDelay: 0.01\n    });\n  }\n  /**\n   * The duration of the reverb.\n   */\n  get decay() {\n    return this._decay;\n  }\n  set decay(time) {\n    time = this.toSeconds(time);\n    assertRange(time, 0.001);\n    this._decay = time;\n    this.generate();\n  }\n  /**\n   * The amount of time before the reverb is fully ramped in.\n   */\n  get preDelay() {\n    return this._preDelay;\n  }\n  set preDelay(time) {\n    time = this.toSeconds(time);\n    assertRange(time, 0);\n    this._preDelay = time;\n    this.generate();\n  }\n  /**\n   * Generate the Impulse Response. Returns a promise while the IR is being generated.\n   * @return Promise which returns this object.\n   */\n  generate() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const previousReady = this.ready;\n      // create a noise burst which decays over the duration in each channel\n      const context = new OfflineContext(2, this._decay + this._preDelay, this.context.sampleRate);\n      const noiseL = new Noise({\n        context\n      });\n      const noiseR = new Noise({\n        context\n      });\n      const merge = new Merge({\n        context\n      });\n      noiseL.connect(merge, 0, 0);\n      noiseR.connect(merge, 0, 1);\n      const gainNode = new Gain({\n        context\n      }).toDestination();\n      merge.connect(gainNode);\n      noiseL.start(0);\n      noiseR.start(0);\n      // predelay\n      gainNode.gain.setValueAtTime(0, 0);\n      gainNode.gain.setValueAtTime(1, this._preDelay);\n      // decay\n      gainNode.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay);\n      // render the buffer\n      const renderPromise = context.render();\n      this.ready = renderPromise.then(noOp);\n      // wait for the previous `ready` to resolve\n      yield previousReady;\n      // set the buffer\n      this._convolver.buffer = (yield renderPromise).get();\n      return this;\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._convolver.disconnect();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { Split } from \"./Split.js\";\nimport { Add } from \"../../signal/Add.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Subtract } from \"../../signal/Subtract.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels).\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideSplit.getDefaults(), arguments));\n    this.name = \"MidSideSplit\";\n    this._split = this.input = new Split({\n      channels: 2,\n      context: this.context\n    });\n    this._midAdd = new Add({\n      context: this.context\n    });\n    this.mid = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._sideSubtract = new Subtract({\n      context: this.context\n    });\n    this.side = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._split.connect(this._midAdd, 0);\n    this._split.connect(this._midAdd.addend, 1);\n    this._split.connect(this._sideSubtract, 0);\n    this._split.connect(this._sideSubtract.subtrahend, 1);\n    this._midAdd.connect(this.mid);\n    this._sideSubtract.connect(this.side);\n  }\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n    this._midAdd.dispose();\n    this._sideSubtract.dispose();\n    this._split.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { Merge } from \"./Merge.js\";\nimport { Add } from \"../../signal/Add.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Subtract } from \"../../signal/Subtract.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by {@link MidSideSplit}\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideMerge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    this.name = \"MidSideMerge\";\n    this.mid = new Gain({\n      context: this.context\n    });\n    this.side = new Gain({\n      context: this.context\n    });\n    this._left = new Add({\n      context: this.context\n    });\n    this._leftMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._right = new Subtract({\n      context: this.context\n    });\n    this._rightMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._merge = this.output = new Merge({\n      context: this.context\n    });\n    this.mid.fan(this._left);\n    this.side.connect(this._left.addend);\n    this.mid.connect(this._right);\n    this.side.connect(this._right.subtrahend);\n    this._left.connect(this._leftMult);\n    this._right.connect(this._rightMult);\n    this._leftMult.connect(this._merge, 0, 0);\n    this._rightMult.connect(this._merge, 0, 1);\n  }\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n    this._leftMult.dispose();\n    this._rightMult.dispose();\n    this._left.dispose();\n    this._right.dispose();\n    return this;\n  }\n}\n", "import { Effect } from \"./Effect.js\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit.js\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge.js\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport class MidSideEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"MidSideEffect\";\n    this._midSideMerge = new MidSideMerge({\n      context: this.context\n    });\n    this._midSideSplit = new MidSideSplit({\n      context: this.context\n    });\n    this._midSend = this._midSideSplit.mid;\n    this._sideSend = this._midSideSplit.side;\n    this._midReturn = this._midSideMerge.mid;\n    this._sideReturn = this._midSideMerge.side;\n    // the connections\n    this.effectSend.connect(this._midSideSplit);\n    this._midSideMerge.connect(this.effectReturn);\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n  connectEffectMid(...nodes) {\n    this._midSend.chain(...nodes, this._midReturn);\n  }\n  /**\n   * Connect the side chain of the effect\n   */\n  connectEffectSide(...nodes) {\n    this._sideSend.chain(...nodes, this._sideReturn);\n  }\n  dispose() {\n    super.dispose();\n    this._midSideSplit.dispose();\n    this._midSideMerge.dispose();\n    this._midSend.dispose();\n    this._sideSend.dispose();\n    this._midReturn.dispose();\n    this._sideReturn.dispose();\n    return this;\n  }\n}\n", "import { MidSideEffect } from \"../effect/MidSideEffect.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { Multiply } from \"../signal/Multiply.js\";\nimport { Subtract } from \"../signal/Subtract.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { connect } from \"../core/context/ToneAudioNode.js\";\n/**\n * Applies a width factor to the mid/side seperation.\n * 0 is all mid and 1 is all side.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * ```\n * Mid *= 2*(1-width)<br>\n * Side *= 2*width\n * ```\n * @category Effect\n */\nexport class StereoWidener extends MidSideEffect {\n  constructor() {\n    const options = optionsFromArguments(StereoWidener.getDefaults(), arguments, [\"width\"]);\n    super(options);\n    this.name = \"StereoWidener\";\n    this.width = new Signal({\n      context: this.context,\n      value: options.width,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"width\"]);\n    this._twoTimesWidthMid = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._twoTimesWidthSide = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    this._midMult = new Multiply({\n      context: this.context\n    });\n    this._twoTimesWidthMid.connect(this._midMult.factor);\n    this.connectEffectMid(this._midMult);\n    this._oneMinusWidth = new Subtract({\n      context: this.context\n    });\n    this._oneMinusWidth.connect(this._twoTimesWidthMid);\n    connect(this.context.getConstant(1), this._oneMinusWidth);\n    this.width.connect(this._oneMinusWidth.subtrahend);\n    this._sideMult = new Multiply({\n      context: this.context\n    });\n    this.width.connect(this._twoTimesWidthSide);\n    this._twoTimesWidthSide.connect(this._sideMult.factor);\n    this.connectEffectSide(this._sideMult);\n  }\n  static getDefaults() {\n    return Object.assign(MidSideEffect.getDefaults(), {\n      width: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.width.dispose();\n    this._midMult.dispose();\n    this._sideMult.dispose();\n    this._twoTimesWidthMid.dispose();\n    this._twoTimesWidthSide.dispose();\n    this._oneMinusWidth.dispose();\n    return this;\n  }\n}\n", "import { StereoEffect } from \"./StereoEffect.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Gain } from \"../core/context/Gain.js\";\nimport { Signal } from \"../signal/Signal.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an {@link LFO}.\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\nexport class Tremolo extends StereoEffect {\n  constructor() {\n    const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    super(options);\n    this.name = \"Tremolo\";\n    this._lfoL = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._amplitudeL = new Gain({\n      context: this.context\n    });\n    this._amplitudeR = new Gain({\n      context: this.context\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    this.depth = new Signal({\n      context: this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.connectEffectLeft(this._amplitudeL);\n    this.connectEffectRight(this._amplitudeR);\n    this._lfoL.connect(this._amplitudeL.gain);\n    this._lfoR.connect(this._amplitudeR.gain);\n    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n    this.spread = options.spread;\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 10,\n      type: \"sine\",\n      depth: 0.5,\n      spread: 180\n    });\n  }\n  /**\n   * Start the tremolo.\n   */\n  start(time) {\n    this._lfoL.start(time);\n    this._lfoR.start(time);\n    return this;\n  }\n  /**\n   * Stop the tremolo.\n   */\n  stop(time) {\n    this._lfoL.stop(time);\n    this._lfoR.stop(time);\n    return this;\n  }\n  /**\n   * Sync the effect to the transport.\n   */\n  sync() {\n    this._lfoL.sync();\n    this._lfoR.sync();\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport\n   */\n  unsync() {\n    this._lfoL.unsync();\n    this._lfoR.unsync();\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * The oscillator type.\n   */\n  get type() {\n    return this._lfoL.type;\n  }\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase; // 180\n  }\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n  dispose() {\n    super.dispose();\n    this._lfoL.dispose();\n    this._lfoR.dispose();\n    this._amplitudeL.dispose();\n    this._amplitudeR.dispose();\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n}\n", "import { Effect } from \"./Effect.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { LFO } from \"../source/oscillator/LFO.js\";\nimport { Delay } from \"../core/context/Delay.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n * modulates the delayTime of the delay, causing the pitch to rise and fall.\n * @category Effect\n */\nexport class Vibrato extends Effect {\n  constructor() {\n    const options = optionsFromArguments(Vibrato.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    super(options);\n    this.name = \"Vibrato\";\n    this._delayNode = new Delay({\n      context: this.context,\n      delayTime: 0,\n      maxDelay: options.maxDelay\n    });\n    this._lfo = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 0,\n      max: options.maxDelay,\n      frequency: options.frequency,\n      phase: -90 // offse the phase so the resting position is in the center\n    }).start().connect(this._delayNode.delayTime);\n    this.frequency = this._lfo.frequency;\n    this.depth = this._lfo.amplitude;\n    this.depth.value = options.depth;\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.effectSend.chain(this._delayNode, this.effectReturn);\n  }\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      maxDelay: 0.005,\n      frequency: 5,\n      depth: 0.1,\n      type: \"sine\"\n    });\n  }\n  /**\n   * Type of oscillator attached to the Vibrato.\n   */\n  get type() {\n    return this._lfo.type;\n  }\n  set type(type) {\n    this._lfo.type = type;\n  }\n  dispose() {\n    super.dispose();\n    this._delayNode.dispose();\n    this._lfo.dispose();\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Split } from \"../channel/Split.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { assert, assertRange } from \"../../core/util/Debug.js\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n    super(options);\n    this.name = \"Analyser\";\n    /**\n     * The analyser node.\n     */\n    this._analysers = [];\n    /**\n     * The buffer that the FFT data is written to\n     */\n    this._buffers = [];\n    this.input = this.output = this._gain = new Gain({\n      context: this.context\n    });\n    this._split = new Split({\n      context: this.context,\n      channels: options.channels\n    });\n    this.input.connect(this._split);\n    assertRange(options.channels, 1);\n    // create the analysers\n    for (let channel = 0; channel < options.channels; channel++) {\n      this._analysers[channel] = this.context.createAnalyser();\n      this._split.connect(this._analysers[channel], channel, 0);\n    }\n    // set the values initially\n    this.size = options.size;\n    this.type = options.type;\n    this.smoothing = options.smoothing;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      size: 1024,\n      smoothing: 0.8,\n      type: \"fft\",\n      channels: 1\n    });\n  }\n  /**\n   * Run the analysis given the current settings. If {@link channels} = 1,\n   * it will return a Float32Array. If {@link channels} > 1, it will\n   * return an array of Float32Arrays where each index in the array\n   * represents the analysis done on a channel.\n   */\n  getValue() {\n    this._analysers.forEach((analyser, index) => {\n      const buffer = this._buffers[index];\n      if (this._type === \"fft\") {\n        analyser.getFloatFrequencyData(buffer);\n      } else if (this._type === \"waveform\") {\n        analyser.getFloatTimeDomainData(buffer);\n      }\n    });\n    if (this.channels === 1) {\n      return this._buffers[0];\n    } else {\n      return this._buffers;\n    }\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   */\n  get size() {\n    return this._analysers[0].frequencyBinCount;\n  }\n  set size(size) {\n    this._analysers.forEach((analyser, index) => {\n      analyser.fftSize = size * 2;\n      this._buffers[index] = new Float32Array(size);\n    });\n  }\n  /**\n   * The number of channels the analyser does the analysis on. Channel\n   * separation is done using {@link Split}\n   */\n  get channels() {\n    return this._analysers.length;\n  }\n  /**\n   * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n   */\n  get type() {\n    return this._type;\n  }\n  set type(type) {\n    assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n    this._type = type;\n  }\n  /**\n   * 0 represents no time averaging with the last analysis frame.\n   */\n  get smoothing() {\n    return this._analysers[0].smoothingTimeConstant;\n  }\n  set smoothing(val) {\n    this._analysers.forEach(a => a.smoothingTimeConstant = val);\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._analysers.forEach(a => a.disconnect());\n    this._split.dispose();\n    this._gain.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Analyser } from \"./Analyser.js\";\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MeterBase.getDefaults(), arguments));\n    this.name = \"MeterBase\";\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\"\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._analyser.dispose();\n    return this;\n  }\n}\n", "import { gainToDb } from \"../../core/type/Conversions.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\nimport { warn } from \"../../core/util/Debug.js\";\nimport { Analyser } from \"./Analyser.js\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n * Setting `normalRange` to `true` will covert the output to a range of\n * 0-1. See an example using a graphical display\n * [here](https://tonejs.github.io/examples/meter).\n * @see {@link DCMeter}.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase {\n  constructor() {\n    const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    super(options);\n    this.name = \"Meter\";\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channelCount\n    });\n    this.smoothing = options.smoothing, this.normalRange = options.normalRange;\n    this._rms = new Array(options.channelCount);\n    this._rms.fill(0);\n  }\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channelCount: 1\n    });\n  }\n  /**\n   * Use {@link getValue} instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n  getLevel() {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  }\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when {@link normalRange} is `false`.\n   * If {@link channels} = 1, then the output is a single number\n   * representing the value of the input signal. When {@link channels} > 1,\n   * then each channel is returned as a value in a number array.\n   */\n  getValue() {\n    const aValues = this._analyser.getValue();\n    const channelValues = this.channels === 1 ? [aValues] : aValues;\n    const vals = channelValues.map((values, index) => {\n      const totalSquared = values.reduce((total, current) => total + current * current, 0);\n      const rms = Math.sqrt(totalSquared / values.length);\n      // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n      this._rms[index] = Math.max(rms, this._rms[index] * this.smoothing);\n      return this.normalRange ? this._rms[index] : gainToDb(this._rms[index]);\n    });\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  }\n  /**\n   * The number of channels of analysis.\n   */\n  get channels() {\n    return this._analyser.channels;\n  }\n  dispose() {\n    super.dispose();\n    this._analyser.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { dbToGain } from \"../../core/type/Conversions.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\nimport { assert } from \"../../core/util/Debug.js\";\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * Read more about FFT algorithms on [Wikipedia] (https://en.wikipedia.org/wiki/Fast_Fourier_transform).\n * @category Component\n */\nexport class FFT extends MeterBase {\n  constructor() {\n    const options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n    super(options);\n    this.name = \"FFT\";\n    this.normalRange = options.normalRange;\n    this._analyser.type = \"fft\";\n    this.size = options.size;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalRange: false,\n      size: 1024,\n      smoothing: 0.8\n    });\n  }\n  /**\n   * Gets the current frequency data from the connected audio source.\n   * Returns the frequency data of length {@link size} as a Float32Array of decibel values.\n   */\n  getValue() {\n    const values = this._analyser.getValue();\n    return values.map(v => this.normalRange ? dbToGain(v) : v);\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   * Determines the size of the array returned by {@link getValue} (i.e. the number of\n   * frequency bins). Large FFT sizes may be costly to compute.\n   */\n  get size() {\n    return this._analyser.size;\n  }\n  set size(size) {\n    this._analyser.size = size;\n  }\n  /**\n   * 0 represents no time averaging with the last analysis frame.\n   */\n  get smoothing() {\n    return this._analyser.smoothing;\n  }\n  set smoothing(val) {\n    this._analyser.smoothing = val;\n  }\n  /**\n   * Returns the frequency value in hertz of each of the indices of the FFT's {@link getValue} response.\n   * @example\n   * const fft = new Tone.FFT(32);\n   * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));\n   */\n  getFrequencyOfIndex(index) {\n    assert(0 <= index && index < this.size, `index must be greater than or equal to 0 and less than ${this.size}`);\n    return index * this.context.sampleRate / (this.size * 2);\n  }\n}\n", "import { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\n/**\n * DCMeter gets the raw value of the input signal at the current time.\n * @see {@link Meter}.\n *\n * @example\n * const meter = new Tone.DCMeter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * const level = meter.getValue();\n * @category Component\n */\nexport class DCMeter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(DCMeter.getDefaults(), arguments));\n    this.name = \"DCMeter\";\n    this._analyser.type = \"waveform\";\n    this._analyser.size = 256;\n  }\n  /**\n   * Get the signal value of the incoming signal\n   */\n  getValue() {\n    const value = this._analyser.getValue();\n    return value[0];\n  }\n}\n", "import { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase {\n  constructor() {\n    const options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    super(options);\n    this.name = \"Waveform\";\n    this._analyser.type = \"waveform\";\n    this.size = options.size;\n  }\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      size: 1024\n    });\n  }\n  /**\n   * Return the waveform for the current time as a Float32Array where each value in the array\n   * represents a sample in the waveform.\n   */\n  getValue() {\n    return this._analyser.getValue();\n  }\n  /**\n   * The size of analysis. This must be a power of two in the range 16 to 16384.\n   * Determines the size of the array returned by {@link getValue}.\n   */\n  get size() {\n    return this._analyser.size;\n  }\n  set size(size) {\n    this._analyser.size = size;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    super(options);\n    this.name = \"Solo\";\n    this.input = this.output = new Gain({\n      context: this.context\n    });\n    if (!Solo._allSolos.has(this.context)) {\n      Solo._allSolos.set(this.context, new Set());\n    }\n    Solo._allSolos.get(this.context).add(this);\n    // set initially\n    this.solo = options.solo;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      solo: false\n    });\n  }\n  /**\n   * Isolates this instance and mutes all other instances of Solo.\n   * Only one instance can be soloed at a time. A soloed\n   * instance will report `solo=false` when another instance is soloed.\n   */\n  get solo() {\n    return this._isSoloed();\n  }\n  set solo(solo) {\n    if (solo) {\n      this._addSolo();\n    } else {\n      this._removeSolo();\n    }\n    Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed\n   */\n  get muted() {\n    return this.input.gain.value === 0;\n  }\n  /**\n   * Add this to the soloed array\n   */\n  _addSolo() {\n    if (!Solo._soloed.has(this.context)) {\n      Solo._soloed.set(this.context, new Set());\n    }\n    Solo._soloed.get(this.context).add(this);\n  }\n  /**\n   * Remove this from the soloed array\n   */\n  _removeSolo() {\n    if (Solo._soloed.has(this.context)) {\n      Solo._soloed.get(this.context).delete(this);\n    }\n  }\n  /**\n   * Is this on the soloed array\n   */\n  _isSoloed() {\n    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n  }\n  /**\n   * Returns true if no one is soloed\n   */\n  _noSolos() {\n    // either does not have any soloed added\n    return !Solo._soloed.has(this.context) ||\n    // or has a solo set but doesn't include any items\n    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n  }\n  /**\n   * Solo the current instance and unsolo all other instances.\n   */\n  _updateSolo() {\n    if (this._isSoloed()) {\n      this.input.gain.value = 1;\n    } else if (this._noSolos()) {\n      // no one is soloed\n      this.input.gain.value = 1;\n    } else {\n      this.input.gain.value = 0;\n    }\n  }\n  dispose() {\n    super.dispose();\n    Solo._allSolos.get(this.context).delete(this);\n    this._removeSolo();\n    return this;\n  }\n}\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\nSolo._soloed = new Map();\n", "import { readOnly } from \"../../core/util/Interface.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Panner } from \"./Panner.js\";\nimport { Volume } from \"./Volume.js\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    super(options);\n    this.name = \"PanVol\";\n    this._panner = this.input = new Panner({\n      context: this.context,\n      pan: options.pan,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panner.pan;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    // connections\n    this._panner.connect(this._volume);\n    this.mute = options.mute;\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      pan: 0,\n      volume: 0,\n      channelCount: 1\n    });\n  }\n  /**\n   * Mute/unmute the volume\n   */\n  get mute() {\n    return this._volume.mute;\n  }\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n  dispose() {\n    super.dispose();\n    this._panner.dispose();\n    this.pan.dispose();\n    this._volume.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Solo } from \"./Solo.js\";\nimport { PanVol } from \"./PanVol.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * @see {@link PanVol} and {@link Solo}\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    super(options);\n    this.name = \"Channel\";\n    this._solo = this.input = new Solo({\n      solo: options.solo,\n      context: this.context\n    });\n    this._panVol = this.output = new PanVol({\n      context: this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panVol.pan;\n    this.volume = this._panVol.volume;\n    this._solo.connect(this._panVol);\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false,\n      channelCount: 1\n    });\n  }\n  /**\n   * Solo/unsolo the channel. Soloing is only relative to other {@link Channel}s and {@link Solo} instances\n   */\n  get solo() {\n    return this._solo.solo;\n  }\n  set solo(solo) {\n    this._solo.solo = solo;\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed,\n   * or the channel is muted\n   */\n  get muted() {\n    return this._solo.muted || this.mute;\n  }\n  /**\n   * Mute/unmute the volume\n   */\n  get mute() {\n    return this._panVol.mute;\n  }\n  set mute(mute) {\n    this._panVol.mute = mute;\n  }\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n  _getBus(name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n    return Channel.buses.get(name);\n  }\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * {@link connect}, except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since {@link send}\n   * and {@link receive} can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n  send(name, volume = 0) {\n    const bus = this._getBus(name);\n    const sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  }\n  /**\n   * Receive audio from a channel which was connected with {@link send}.\n   * @param name The channel name to receive audio from.\n   */\n  receive(name) {\n    const bus = this._getBus(name);\n    bus.connect(this);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._panVol.dispose();\n    this.pan.dispose();\n    this.volume.dispose();\n    this._solo.dispose();\n    return this;\n  }\n}\n/**\n * Store the send/receive channels by name.\n */\nChannel.buses = new Map();\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Merge } from \"./Merge.js\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\nexport class Mono extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Mono.getDefaults(), arguments));\n    this.name = \"Mono\";\n    this.input = new Gain({\n      context: this.context\n    });\n    this._merge = this.output = new Merge({\n      channels: 2,\n      context: this.context\n    });\n    this.input.connect(this._merge, 0, 0);\n    this.input.connect(this._merge, 0, 1);\n  }\n  dispose() {\n    super.dispose();\n    this._merge.dispose();\n    this.input.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly, writable } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Filter } from \"../filter/Filter.js\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    super(options);\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid);\n    // the frequency control signal\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency);\n    // the Q value\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n    this._lowMidFilter.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}\n", "import { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport \"../../core/context/Listener.js\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    super(options);\n    this.name = \"Panner3D\";\n    this._panner = this.input = this.output = this.context.createPanner();\n    // set some values\n    this.panningModel = options.panningModel;\n    this.maxDistance = options.maxDistance;\n    this.distanceModel = options.distanceModel;\n    this.coneOuterGain = options.coneOuterGain;\n    this.coneOuterAngle = options.coneOuterAngle;\n    this.coneInnerAngle = options.coneInnerAngle;\n    this.refDistance = options.refDistance;\n    this.rolloffFactor = options.rolloffFactor;\n    this.positionX = new Param({\n      context: this.context,\n      param: this._panner.positionX,\n      value: options.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this._panner.positionY,\n      value: options.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this._panner.positionZ,\n      value: options.positionZ\n    });\n    this.orientationX = new Param({\n      context: this.context,\n      param: this._panner.orientationX,\n      value: options.orientationX\n    });\n    this.orientationY = new Param({\n      context: this.context,\n      param: this._panner.orientationY,\n      value: options.orientationY\n    });\n    this.orientationZ = new Param({\n      context: this.context,\n      param: this._panner.orientationZ,\n      value: options.orientationZ\n    });\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: \"inverse\",\n      maxDistance: 10000,\n      orientationX: 0,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: \"equalpower\",\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    });\n  }\n  /**\n   * Sets the position of the source in 3d space.\n   */\n  setPosition(x, y, z) {\n    this.positionX.value = x;\n    this.positionY.value = y;\n    this.positionZ.value = z;\n    return this;\n  }\n  /**\n   * Sets the orientation of the source in 3d space.\n   */\n  setOrientation(x, y, z) {\n    this.orientationX.value = x;\n    this.orientationY.value = y;\n    this.orientationZ.value = z;\n    return this;\n  }\n  /**\n   * The panning model. Either \"equalpower\" or \"HRTF\".\n   */\n  get panningModel() {\n    return this._panner.panningModel;\n  }\n  set panningModel(val) {\n    this._panner.panningModel = val;\n  }\n  /**\n   * A reference distance for reducing volume as source move further from the listener\n   */\n  get refDistance() {\n    return this._panner.refDistance;\n  }\n  set refDistance(val) {\n    this._panner.refDistance = val;\n  }\n  /**\n   * Describes how quickly the volume is reduced as source moves away from listener.\n   */\n  get rolloffFactor() {\n    return this._panner.rolloffFactor;\n  }\n  set rolloffFactor(val) {\n    this._panner.rolloffFactor = val;\n  }\n  /**\n   * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n   */\n  get distanceModel() {\n    return this._panner.distanceModel;\n  }\n  set distanceModel(val) {\n    this._panner.distanceModel = val;\n  }\n  /**\n   * The angle, in degrees, inside of which there will be no volume reduction\n   */\n  get coneInnerAngle() {\n    return this._panner.coneInnerAngle;\n  }\n  set coneInnerAngle(val) {\n    this._panner.coneInnerAngle = val;\n  }\n  /**\n   * The angle, in degrees, outside of which the volume will be reduced\n   * to a constant value of coneOuterGain\n   */\n  get coneOuterAngle() {\n    return this._panner.coneOuterAngle;\n  }\n  set coneOuterAngle(val) {\n    this._panner.coneOuterAngle = val;\n  }\n  /**\n   * The gain outside of the coneOuterAngle\n   */\n  get coneOuterGain() {\n    return this._panner.coneOuterGain;\n  }\n  set coneOuterGain(val) {\n    this._panner.coneOuterGain = val;\n  }\n  /**\n   * The maximum distance between source and listener,\n   * after which the volume will not be reduced any further.\n   */\n  get maxDistance() {\n    return this._panner.maxDistance;\n  }\n  set maxDistance(val) {\n    this._panner.maxDistance = val;\n  }\n  dispose() {\n    super.dispose();\n    this._panner.disconnect();\n    this.orientationX.dispose();\n    this.orientationY.dispose();\n    this.orientationZ.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { theWindow } from \"../../core/context/AudioContext.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer\n * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.\n * This is only natively supported in Chrome and Firefox.\n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n * @category Component\n */\nexport class Recorder extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Recorder.getDefaults(), arguments);\n    super(options);\n    this.name = \"Recorder\";\n    this.input = new Gain({\n      context: this.context\n    });\n    assert(Recorder.supported, \"Media Recorder API is not available\");\n    this._stream = this.context.createMediaStreamDestination();\n    this.input.connect(this._stream);\n    this._recorder = new MediaRecorder(this._stream.stream, {\n      mimeType: options.mimeType\n    });\n  }\n  static getDefaults() {\n    return ToneAudioNode.getDefaults();\n  }\n  /**\n   * The mime type is the format that the audio is encoded in. For Chrome\n   * that is typically webm encoded as \"vorbis\".\n   */\n  get mimeType() {\n    return this._recorder.mimeType;\n  }\n  /**\n   * Test if your platform supports the Media Recorder API. If it's not available,\n   * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n   */\n  static get supported() {\n    return theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n  }\n  /**\n   * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n   */\n  get state() {\n    if (this._recorder.state === \"inactive\") {\n      return \"stopped\";\n    } else if (this._recorder.state === \"paused\") {\n      return \"paused\";\n    } else {\n      return \"started\";\n    }\n  }\n  /**\n   * Start the Recorder. Returns a promise which resolves\n   * when the recorder has started.\n   */\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(this.state !== \"started\", \"Recorder is already started\");\n      const startPromise = new Promise(done => {\n        const handleStart = () => {\n          this._recorder.removeEventListener(\"start\", handleStart, false);\n          done();\n        };\n        this._recorder.addEventListener(\"start\", handleStart, false);\n      });\n      this._recorder.start();\n      return yield startPromise;\n    });\n  }\n  /**\n   * Stop the recorder. Returns a promise with the recorded content until this point\n   * encoded as {@link mimeType}\n   */\n  stop() {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(this.state !== \"stopped\", \"Recorder is not started\");\n      const dataPromise = new Promise(done => {\n        const handleData = e => {\n          this._recorder.removeEventListener(\"dataavailable\", handleData, false);\n          done(e.data);\n        };\n        this._recorder.addEventListener(\"dataavailable\", handleData, false);\n      });\n      this._recorder.stop();\n      return yield dataPromise;\n    });\n  }\n  /**\n   * Pause the recorder\n   */\n  pause() {\n    assert(this.state === \"started\", \"Recorder must be started\");\n    this._recorder.pause();\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this._stream.disconnect();\n    return this;\n  }\n}\n", "import { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    super(options);\n    this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n    this._compressor = this.context.createDynamicsCompressor();\n    this.input = this._compressor;\n    this.output = this._compressor;\n    this.threshold = new Param({\n      minValue: this._compressor.threshold.minValue,\n      maxValue: this._compressor.threshold.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    this.attack = new Param({\n      minValue: this._compressor.attack.minValue,\n      maxValue: this._compressor.attack.maxValue,\n      context: this.context,\n      param: this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    this.release = new Param({\n      minValue: this._compressor.release.minValue,\n      maxValue: this._compressor.release.maxValue,\n      context: this.context,\n      param: this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    this.knee = new Param({\n      minValue: this._compressor.knee.minValue,\n      maxValue: this._compressor.knee.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    this.ratio = new Param({\n      minValue: this._compressor.ratio.minValue,\n      maxValue: this._compressor.ratio.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    });\n    // set the defaults\n    readOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.003,\n      knee: 30,\n      ratio: 12,\n      release: 0.25,\n      threshold: -24\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n   */\n  get reduction() {\n    return this._compressor.reduction;\n  }\n  dispose() {\n    super.dispose();\n    this._compressor.disconnect();\n    this.attack.dispose();\n    this.release.dispose();\n    this.threshold.dispose();\n    this.ratio.dispose();\n    this.knee.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { GreaterThan } from \"../../signal/GreaterThan.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { Follower } from \"../analysis/Follower.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions.js\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses {@link Follower} to follow the ampltiude\n * of the incoming signal and compares it to the {@link threshold} value using {@link GreaterThan}.\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\nexport class Gate extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    super(options);\n    this.name = \"Gate\";\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.smoothing\n    });\n    this._gt = new GreaterThan({\n      context: this.context,\n      value: dbToGain(options.threshold)\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this._gate = this.output = new Gain({\n      context: this.context\n    });\n    // connections\n    this.input.connect(this._gate);\n    // the control signal\n    this.input.chain(this._follower, this._gt, this._gate.gain);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.1,\n      threshold: -40\n    });\n  }\n  /**\n   * The threshold of the gate in decibels\n   */\n  get threshold() {\n    return gainToDb(this._gt.value);\n  }\n  set threshold(thresh) {\n    this._gt.value = dbToGain(thresh);\n  }\n  /**\n   * The attack/decay speed of the gate.\n   * @see {@link Follower.smoothing}\n   */\n  get smoothing() {\n    return this._follower.smoothing;\n  }\n  set smoothing(smoothingTime) {\n    this._follower.smoothing = smoothingTime;\n  }\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this._follower.dispose();\n    this._gt.dispose();\n    this._gate.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Compressor } from \"./Compressor.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a {@link Compressor} with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\nexport class Limiter extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    super(options);\n    this.name = \"Limiter\";\n    this._compressor = this.input = this.output = new Compressor({\n      context: this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    this.threshold = this._compressor.threshold;\n    readOnly(this, \"threshold\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      threshold: -12\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal.\n   */\n  get reduction() {\n    return this._compressor.reduction;\n  }\n  dispose() {\n    super.dispose();\n    this._compressor.dispose();\n    this.threshold.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { Compressor } from \"./Compressor.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MidSideSplit } from \"../channel/MidSideSplit.js\";\nimport { MidSideMerge } from \"../channel/MidSideMerge.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * MidSideCompressor applies two different compressors to the {@link mid}\n * and {@link side} signal components of the input.\n * @see {@link MidSideSplit} and {@link MidSideMerge}.\n * @category Component\n */\nexport class MidSideCompressor extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    super(options);\n    this.name = \"MidSideCompressor\";\n    this._midSideSplit = this.input = new MidSideSplit({\n      context: this.context\n    });\n    this._midSideMerge = this.output = new MidSideMerge({\n      context: this.context\n    });\n    this.mid = new Compressor(Object.assign(options.mid, {\n      context: this.context\n    }));\n    this.side = new Compressor(Object.assign(options.side, {\n      context: this.context\n    }));\n    this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n    this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n    readOnly(this, [\"mid\", \"side\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      side: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      }\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n    this._midSideSplit.dispose();\n    this._midSideMerge.dispose();\n    return this;\n  }\n}\n", "import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { Compressor } from \"./Compressor.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { MultibandSplit } from \"../channel/MultibandSplit.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\n/**\n * A compressor with separate controls over low/mid/high dynamics.\n * @see {@link Compressor} and {@link MultibandSplit}\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\nexport class MultibandCompressor extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    super(options);\n    this.name = \"MultibandCompressor\";\n    this._splitter = this.input = new MultibandSplit({\n      context: this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    this.lowFrequency = this._splitter.lowFrequency;\n    this.highFrequency = this._splitter.highFrequency;\n    this.output = new Gain({\n      context: this.context\n    });\n    this.low = new Compressor(Object.assign(options.low, {\n      context: this.context\n    }));\n    this.mid = new Compressor(Object.assign(options.mid, {\n      context: this.context\n    }));\n    this.high = new Compressor(Object.assign(options.high, {\n      context: this.context\n    }));\n    // connect the compressor\n    this._splitter.low.chain(this.low, this.output);\n    this._splitter.mid.chain(this.mid, this.output);\n    this._splitter.high.chain(this.high, this.output);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      lowFrequency: 250,\n      highFrequency: 2000,\n      low: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      },\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      high: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      }\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._splitter.dispose();\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.output.dispose();\n    return this;\n  }\n}\n", "import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly, writable } from \"../../core/util/Interface.js\";\nimport { MultibandSplit } from \"../channel/MultibandSplit.js\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\nexport class EQ3 extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    super(options);\n    this.name = \"EQ3\";\n    /**\n     * the output\n     */\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [];\n    this.input = this._multibandSplit = new MultibandSplit({\n      context: this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    this._lowGain = new Gain({\n      context: this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    this._midGain = new Gain({\n      context: this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    this._highGain = new Gain({\n      context: this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    this.low = this._lowGain.gain;\n    this.mid = this._midGain.gain;\n    this.high = this._highGain.gain;\n    this.Q = this._multibandSplit.Q;\n    this.lowFrequency = this._multibandSplit.lowFrequency;\n    this.highFrequency = this._multibandSplit.highFrequency;\n    // the frequency bands\n    this._multibandSplit.low.chain(this._lowGain, this.output);\n    this._multibandSplit.mid.chain(this._midGain, this.output);\n    this._multibandSplit.high.chain(this._highGain, this.output);\n    readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._internalChannels = [this._multibandSplit];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      high: 0,\n      highFrequency: 2500,\n      low: 0,\n      lowFrequency: 400,\n      mid: 0\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._multibandSplit.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this._lowGain.dispose();\n    this._midGain.dispose();\n    this._highGain.dispose();\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}\n", "import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode {\n  constructor() {\n    const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    super(options);\n    this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n    this._convolver = this.context.createConvolver();\n    this._buffer = new ToneAudioBuffer(options.url, buffer => {\n      this.buffer = buffer;\n      options.onload();\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    // set if it's already loaded, set it immediately\n    if (this._buffer.loaded) {\n      this.buffer = this._buffer;\n    }\n    // initially set normalization\n    this.normalize = options.normalize;\n    // connect it up\n    this.input.chain(this._convolver, this.output);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  }\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.buffer = yield this._buffer.load(url);\n    });\n  }\n  /**\n   * The convolver's buffer\n   */\n  get buffer() {\n    if (this._buffer.length) {\n      return this._buffer;\n    } else {\n      return null;\n    }\n  }\n  set buffer(buffer) {\n    if (buffer) {\n      this._buffer.set(buffer);\n    }\n    // if it's already got a buffer, create a new one\n    if (this._convolver.buffer) {\n      // disconnect the old one\n      this.input.disconnect();\n      this._convolver.disconnect();\n      // create and connect a new one\n      this._convolver = this.context.createConvolver();\n      this.input.chain(this._convolver, this.output);\n    }\n    const buff = this._buffer.get();\n    this._convolver.buffer = buff ? buff : null;\n  }\n  /**\n   * The normalize property of the ConvolverNode interface is a boolean that\n   * controls whether the impulse response from the buffer will be scaled by\n   * an equal-power normalization when the buffer attribute is set, or not.\n   */\n  get normalize() {\n    return this._convolver.normalize;\n  }\n  set normalize(norm) {\n    this._convolver.normalize = norm;\n  }\n  dispose() {\n    super.dispose();\n    this._buffer.dispose();\n    this._convolver.disconnect();\n    return this;\n  }\n}\n", "export { getContext, setContext } from \"./core/Global.js\";\nexport * from \"./classes.js\";\nexport * from \"./version.js\";\nimport { getContext } from \"./core/Global.js\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer.js\";\nexport { start } from \"./core/Global.js\";\nexport { supported } from \"./core/context/AudioContext.js\";\n/**\n * The current audio context time of the global {@link BaseContext}.\n * @see {@link Context.now}\n * @category Core\n */\nexport function now() {\n  return getContext().now();\n}\n/**\n * The current audio context time of the global {@link Context} without the {@link Context.lookAhead}\n * @see {@link Context.immediate}\n * @category Core\n */\nexport function immediate() {\n  return getContext().immediate();\n}\n/**\n * The Transport object belonging to the global Tone.js Context.\n * @see {@link TransportClass}\n * @category Core\n * @deprecated Use {@link getTransport} instead\n */\nexport const Transport = getContext().transport;\n/**\n * The Transport object belonging to the global Tone.js Context.\n * @see {@link TransportClass}\n * @category Core\n */\nexport function getTransport() {\n  return getContext().transport;\n}\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * @see {@link DestinationClass}\n * @category Core\n * @deprecated Use {@link getDestination} instead\n */\nexport const Destination = getContext().destination;\n/**\n * @deprecated Use {@link getDestination} instead\n */\nexport const Master = getContext().destination;\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * @see {@link DestinationClass}\n * @category Core\n */\nexport function getDestination() {\n  return getContext().destination;\n}\n/**\n * The {@link ListenerClass} belonging to the global Tone.js Context.\n * @category Core\n * @deprecated Use {@link getListener} instead\n */\nexport const Listener = getContext().listener;\n/**\n * The {@link ListenerClass} belonging to the global Tone.js Context.\n * @category Core\n */\nexport function getListener() {\n  return getContext().listener;\n}\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks.\n * @see {@link DrawClass}\n * @category Core\n * @deprecated Use {@link getDraw} instead\n */\nexport const Draw = getContext().draw;\n/**\n * Get the singleton attached to the global context.\n * Draw is used to synchronize the draw frame with the Transport's callbacks.\n * @see {@link DrawClass}\n * @category Core\n */\nexport function getDraw() {\n  return getContext().draw;\n}\n/**\n * A reference to the global context\n * @see {@link Context}\n * @deprecated Use {@link getContext} instead\n */\nexport const context = getContext();\n/**\n * Promise which resolves when all of the loading promises are resolved.\n * Alias for static {@link ToneAudioBuffer.loaded} method.\n * @category Core\n */\nexport function loaded() {\n  return ToneAudioBuffer.loaded();\n}\n// this fills in name changes from 13.x to 14.x\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers.js\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource.js\";\n/** @deprecated Use {@link ToneAudioBuffer} */\nexport const Buffer = ToneAudioBuffer;\n/** @deprecated Use {@link ToneAudioBuffers} */\nexport const Buffers = ToneAudioBuffers;\n/** @deprecated Use {@link ToneBufferSource} */\nexport const BufferSource = ToneBufferSource;\n"],
  "mappings": "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",
  "names": ["insertElementInSet", "cacheTestResult", "createNotSupportedError", "exposeCurrentFrameAndCurrentTime", "getNativeContext", "getOrCreateBackupOfflineAudioContext", "isNativeOfflineAudioContext", "nativeAudioWorkletNodeConstructor", "window", "context", "addActiveInputConnectionToAudioNode", "addPassiveInputConnectionToAudioNode", "connectNativeAudioNodeToNativeAudioNode", "deleteActiveInputConnectionToAudioNode", "disconnectNativeAudioNodeFromNativeAudioNode", "getAudioNodeConnections", "getAudioNodeTailTime", "getEventListenersOfAudioNode", "getNativeAudioNode", "insertElementInSet", "isActiveAudioNode", "isPartOfACycle", "isPassiveAudioNode", "insertElementInSet", "createNativeGainNode", "disconnect", "getUnrenderedAudioWorkletNodes", "createAnalyserNodeRenderer", "createIndexSizeError", "createNativeAnalyserNode", "getNativeContext", "isNativeOfflineAudioContext", "context", "createNativeAnalyserNode", "getNativeAudioNode", "renderInputsOfAudioNode", "DEFAULT_OPTIONS", "audioBufferStore", "cacheTestResult", "createNotSupportedError", "nativeAudioBufferConstructor", "nativeOfflineAudioContextConstructor", "wrapAudioBufferCopyChannelMethods", "wrapAudioBufferCopyChannelMethodsOutOfBounds", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioBufferSourceNodeRenderer", "createAudioParam", "createInvalidStateError", "createNativeAudioBufferSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "wrapEventListener", "context", "connectAudioParam", "createNativeAudioBufferSourceNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "start", "context", "baseAudioContextConstructor", "createInvalidStateError", "createNotSupportedError", "createUnknownError", "mediaElementAudioSourceNodeConstructor", "mediaStreamAudioDestinationNodeConstructor", "mediaStreamAudioSourceNodeConstructor", "mediaStreamTrackAudioSourceNodeConstructor", "nativeAudioContextConstructor", "audioNodeConstructor", "createAudioDestinationNodeRenderer", "createIndexSizeError", "createInvalidStateError", "getNativeContext", "isNativeOfflineAudioContext", "renderInputsOfAudioNode", "context", "renderInputsOfAudioNode", "createAudioParam", "createNativeChannelMergerNode", "createNativeConstantSourceNode", "createNativeScriptProcessorNode", "createNotSupportedError", "getFirstSample", "isNativeOfflineAudioContext", "overwriteAccessors", "context", "nativeAudioWorkletNodeConstructor", "connect", "disconnect", "cacheTestResult", "createIndexSizeError", "createInvalidAccessError", "createNotSupportedError", "eventTargetConstructor", "getNativeContext", "isNativeAudioContext", "isNativeAudioNode", "isNativeAudioParam", "isNativeOfflineAudioContext", "nativeAudioWorkletNodeConstructor", "context", "audioParamAudioNodeStore", "createAudioParamRenderer", "createCancelAndHoldAutomationEvent", "createCancelScheduledValuesAutomationEvent", "createExponentialRampToValueAutomationEvent", "createLinearRampToValueAutomationEvent", "createSetTargetAutomationEvent", "createSetValueAutomationEvent", "createSetValueCurveAutomationEvent", "nativeAudioContextConstructor", "setValueAtTimeUntilPossible", "DEFAULT_OPTIONS", "addUnrenderedAudioWorkletNode", "audioNodeConstructor", "createAudioParam", "createAudioWorkletNodeRenderer", "createNativeAudioWorkletNode", "getAudioNodeConnections", "getBackupOfflineAudioContext", "getNativeContext", "isNativeOfflineAudioContext", "nativeAudioWorkletNodeConstructor", "sanitizeAudioWorkletNodeOptions", "setActiveAudioWorkletNodeInputs", "testAudioWorkletNodeOptionsClonability", "wrapEventListener", "context", "exposeCurrentFrameAndCurrentTime", "connectAudioParam", "connectMultipleOutputs", "createNativeAudioBufferSourceNode", "createNativeChannelMergerNode", "createNativeChannelSplitterNode", "createNativeConstantSourceNode", "createNativeGainNode", "deleteUnrenderedAudioWorkletNode", "disconnectMultipleOutputs", "getNativeAudioNode", "nativeAudioWorkletNodeConstructor", "nativeOfflineAudioContextConstructor", "renderAutomation", "renderInputsOfAudioNode", "renderNativeOfflineAudioContext", "addAudioWorkletModule", "analyserNodeConstructor", "audioBufferConstructor", "audioBufferSourceNodeConstructor", "biquadFilterNodeConstructor", "channelMergerNodeConstructor", "channelSplitterNodeConstructor", "constantSourceNodeConstructor", "convolverNodeConstructor", "decodeAudioData", "delayNodeConstructor", "dynamicsCompressorNodeConstructor", "gainNodeConstructor", "iIRFilterNodeConstructor", "minimalBaseAudioContextConstructor", "oscillatorNodeConstructor", "pannerNodeConstructor", "periodicWaveConstructor", "stereoPannerNodeConstructor", "waveShaperNodeConstructor", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createBiquadFilterNodeRenderer", "createInvalidAccessError", "createNativeBiquadFilterNode", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "connectAudioParam", "createNativeBiquadFilterNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "DEFAULT_OPTIONS", "audioNodeConstructor", "createChannelMergerNodeRenderer", "createNativeChannelMergerNode", "getNativeContext", "isNativeOfflineAudioContext", "context", "createNativeChannelMergerNode", "getNativeAudioNode", "renderInputsOfAudioNode", "DEFAULT_OPTIONS", "audioNodeConstructor", "createChannelSplitterNodeRenderer", "createNativeChannelSplitterNode", "getNativeContext", "isNativeOfflineAudioContext", "sanitizeChannelSplitterOptions", "context", "createNativeChannelSplitterNode", "getNativeAudioNode", "renderInputsOfAudioNode", "renderInputsOfAudioParam", "createIndexSizeError", "createNativeAudioBufferSourceNode", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createConstantSourceNodeRendererFactory", "createNativeConstantSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "wrapEventListener", "context", "connectAudioParam", "createNativeConstantSourceNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "start", "DEFAULT_OPTIONS", "audioNodeConstructor", "createConvolverNodeRenderer", "createNativeConvolverNode", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "createNativeConvolverNode", "getNativeAudioNode", "renderInputsOfAudioNode", "createNotSupportedError", "nativeOfflineAudioContextConstructor", "audioBufferStore", "cacheTestResult", "createDataCloneError", "createEncodingError", "getNativeContext", "isNativeContext", "testAudioBufferCopyChannelMethodsOutOfBoundsSupport", "testPromiseSupport", "wrapAudioBufferCopyChannelMethods", "wrapAudioBufferCopyChannelMethodsOutOfBounds", "connectNativeAudioNodeToNativeAudioNode", "getAudioNodeConnections", "getNativeAudioNode", "getNativeAudioParam", "getNativeContext", "isActiveAudioNode", "isNativeOfflineAudioContext", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createDelayNodeRenderer", "createNativeDelayNode", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "connectAudioParam", "createNativeDelayNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "pickElementFromSet", "getUnrenderedAudioWorkletNodes", "audioParamAudioNodeStore", "getAudioNodeConnections", "getValueForKey", "createIndexSizeError", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createDynamicsCompressorNodeRenderer", "createNativeDynamicsCompressorNode", "createNotSupportedError", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "connectAudioParam", "createNativeDynamicsCompressorNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "window", "wrapEventListener", "window", "createAbortError", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createGainNodeRenderer", "createNativeGainNode", "getNativeContext", "isNativeOfflineAudioContext", "context", "connectAudioParam", "createNativeGainNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "activeAudioWorkletNodeInputsStore", "getValueForKey", "getAudioNodeConnections", "audioNodeTailTimeStore", "getAudioParamConnections", "backupOfflineAudioContextStore", "context", "backupOfflineAudioContextStore", "nativeOfflineAudioContextConstructor", "unrenderedAudioWorkletNodeStore", "DEFAULT_OPTIONS", "audioNodeConstructor", "createNativeIIRFilterNode", "createIIRFilterNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "createNativeAudioBufferSourceNode", "getNativeAudioNode", "nativeOfflineAudioContextConstructor", "renderInputsOfAudioNode", "renderNativeOfflineAudioContext", "disconnectNativeAudioNodeFromNativeAudioNode", "getAudioNodeConnections", "getNativeAudioNode", "getNativeAudioParam", "isActiveAudioNode", "isNativeAudioContext", "isNativeAudioNode", "isNativeAudioParam", "isNativeOfflineAudioContext", "nativeAudioContextConstructor", "window", "window", "isNativeAudioContext", "isNativeOfflineAudioContext", "nativeOfflineAudioContextConstructor", "window", "cacheTestResult", "testTransferablesSupport", "audioNodeConstructor", "createNativeMediaElementAudioSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "context", "DEFAULT_OPTIONS", "audioNodeConstructor", "createNativeMediaStreamAudioDestinationNode", "getNativeContext", "isNativeOfflineAudioContext", "context", "audioNodeConstructor", "createNativeMediaStreamAudioSourceNode", "getNativeContext", "isNativeOfflineAudioContext", "context", "audioNodeConstructor", "createNativeMediaStreamTrackAudioSourceNode", "getNativeContext", "context", "createInvalidStateError", "createNotSupportedError", "createUnknownError", "minimalBaseAudioContextConstructor", "nativeAudioContextConstructor", "audioDestinationNodeConstructor", "createAudioListener", "eventTargetConstructor", "isNativeOfflineAudioContext", "unrenderedAudioWorkletNodeStore", "wrapEventListener", "DEFAULT_OPTIONS", "cacheTestResult", "createInvalidStateError", "createNativeOfflineAudioContext", "minimalBaseAudioContextConstructor", "startRendering", "insertElementInSet", "isNativeAudioNode", "connect", "disconnect", "cacheTestResult", "createIndexSizeError", "window", "start", "start", "addSilentConnection", "cacheTestResult", "testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport", "testAudioBufferSourceNodeStartMethodOffsetClampingSupport", "testAudioBufferSourceNodeStopMethodNullifiedBufferSupport", "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport", "testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport", "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport", "wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls", "window", "createNativeGainNode", "overwriteAccessors", "window", "createInvalidStateError", "createNativeAudioWorkletNodeFaker", "createNativeGainNode", "createNotSupportedError", "monitorConnections", "nativeAudioWorkletNodeConstructor", "connectMultipleOutputs", "createIndexSizeError", "createInvalidStateError", "createNativeChannelMergerNode", "createNativeChannelSplitterNode", "createNativeConstantSourceNode", "createNativeGainNode", "createNativeScriptProcessorNode", "createNotSupportedError", "disconnectMultipleOutputs", "exposeCurrentFrameAndCurrentTime", "getActiveAudioWorkletNodeInputs", "monitorConnections", "nativeAudioContextConstructor", "wrapChannelMergerNode", "addSilentConnection", "cacheTestResult", "createNativeConstantSourceNodeFaker", "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport", "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport", "addSilentConnection", "createNativeAudioBufferSourceNode", "createNativeGainNode", "monitorConnections", "createNotSupportedError", "overwriteAccessors", "createNotSupportedError", "createNativeIIRFilterNodeFaker", "createInvalidAccessError", "createInvalidStateError", "createNativeScriptProcessorNode", "createNotSupportedError", "createInvalidStateError", "isNativeOfflineAudioContext", "window", "addSilentConnection", "cacheTestResult", "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport", "testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport", "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport", "wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls", "createNativePannerNodeFaker", "connectNativeAudioNodeToNativeAudioNode", "createInvalidStateError", "createNativeChannelMergerNode", "createNativeGainNode", "createNativeScriptProcessorNode", "createNativeWaveShaperNode", "createNotSupportedError", "disconnectNativeAudioNodeFromNativeAudioNode", "getFirstSample", "monitorConnections", "createIndexSizeError", "createNotSupportedError", "createNativeChannelMergerNode", "createNativeChannelSplitterNode", "createNativeGainNode", "createNativeWaveShaperNode", "createNotSupportedError", "monitorConnections", "nativeStereoPannerNodeFakerFactory", "createConnectedNativeAudioBufferSourceNode", "createInvalidStateError", "createNativeWaveShaperNodeFaker", "isDCCurve", "monitorConnections", "nativeAudioContextConstructor", "overwriteAccessors", "createConnectedNativeAudioBufferSourceNode", "createInvalidStateError", "createNativeGainNode", "isDCCurve", "monitorConnections", "DEFAULT_OPTIONS", "baseAudioContextConstructor", "cacheTestResult", "createInvalidStateError", "createNativeOfflineAudioContext", "startRendering", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createNativeOscillatorNode", "createOscillatorNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "wrapEventListener", "context", "connectAudioParam", "createNativeOscillatorNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "start", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createNativePannerNode", "createPannerNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "connectAudioParam", "createNativeChannelMergerNode", "createNativeConstantSourceNode", "createNativeGainNode", "createNativePannerNode", "getNativeAudioNode", "nativeOfflineAudioContextConstructor", "renderAutomation", "renderInputsOfAudioNode", "renderNativeOfflineAudioContext", "DEFAULT_OPTIONS", "createNativePeriodicWave", "getNativeContext", "sanitizePeriodicWaveOptions", "context", "renderInputsOfAudioParam", "getAudioNodeConnections", "getAudioNodeRenderer", "isPartOfACycle", "getAudioNodeRenderer", "getAudioParamConnections", "isPartOfACycle", "cacheTestResult", "createNativeGainNode", "createNativeScriptProcessorNode", "activeAudioWorkletNodeInputsStore", "audioNodeTailTimeStore", "audioBufferStore", "cacheTestResult", "getAudioNodeRenderer", "getUnrenderedAudioWorkletNodes", "renderNativeOfflineAudioContext", "testAudioBufferCopyChannelMethodsOutOfBoundsSupport", "wrapAudioBufferCopyChannelMethods", "wrapAudioBufferCopyChannelMethodsOutOfBounds", "DEFAULT_OPTIONS", "audioNodeConstructor", "createAudioParam", "createNativeStereoPannerNode", "createStereoPannerNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "context", "connectAudioParam", "createNativeStereoPannerNode", "getNativeAudioNode", "renderAutomation", "renderInputsOfAudioNode", "nativeAudioBufferConstructor", "nativeOfflineAudioContextConstructor", "nativeAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeAudioContextConstructor", "nativeOfflineAudioContextConstructor", "isSupported", "nativeAudioWorkletNodeConstructor", "nativeOfflineAudioContextConstructor", "nativeAudioWorkletNodeConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "window", "nativeAudioContextConstructor", "createNativeGainNode", "nativeOfflineAudioContextConstructor", "nativeOfflineAudioContextConstructor", "DEFAULT_OPTIONS", "audioNodeConstructor", "createInvalidStateError", "createNativeWaveShaperNode", "createWaveShaperNodeRenderer", "getNativeContext", "isNativeOfflineAudioContext", "setAudioNodeTailTime", "context", "createNativeWaveShaperNode", "getNativeAudioNode", "renderInputsOfAudioNode", "convertNumberToUnsignedLong", "createIndexSizeError", "convertNumberToUnsignedLong", "copyFromChannel", "copyToChannel", "overwriteAccessors", "createInvalidStateError", "monitorConnections", "start", "disconnect", "window", "isNativeAudioNode", "window", "isNativeAudioNode", "window", "isNativeAudioNode", "window", "context", "context", "isAudioNode", "isAudioNode", "context", "now", "context", "start", "context", "context", "log", "now", "isAudioNode", "now", "context", "context", "context", "now", "context", "now", "context", "now", "context", "start", "now", "now", "context", "start", "workletName", "workletName", "now", "now", "context"]
}
